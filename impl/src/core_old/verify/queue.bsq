//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

entity Queue<T> provides Object, Expandoable<T> {
    static s_size(q: Queue<T>): Int # queue_size

    method size(): Int {
        abort;
    }

    method empty(): Bool {
        return Queue<T>::s_size(this) == 0;
    }

    method toList(): List<T> {
        abort;
    }

    method dequeue(): T, Queue<T>
        requires release Queue<T>::s_size(this) != 0;
    {
        abort;
    }

    static idequeue(ref q: Queue<T>): T 
        requires release Queue<T>::s_size(q) != 0;
    {
        abort;
    }

    method peek(): T
        requires release Queue<T>::s_size(this) != 0;
    {
        abort;
    }

    method tryPeek(): T? {
        abort;
    }

    method lookahead(k: Int): T
        requires release k < Queue<T>::s_size(this);
    {
        abort;
    }

    method tryLookahead(k: Int): T? {
        abort;
    }

    method rest(): Queue<T>
        requires release Queue<T>::s_size(this) != 0;
    {
        abort;
    }

    static irest(ref q: Queue<T>)
        requires release Queue<T>::s_size(q) != 0;
    {
       abort;
    }

    method enqueue(v: T): Queue<T> {
        abort;
    }

    static ienqueue(ref q: Queue<T>, v: T) {
       abort;
    }
}
