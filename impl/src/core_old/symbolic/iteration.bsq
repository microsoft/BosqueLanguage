//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSIterate;

hidden recursive function s_while<S>(state: S, step: recursive? fn(s: S) -> S, cond: recursive? fn(s: S) -> Bool): S {
    if(!cond[recursive?](state)) {
        return state;
    }
    else {
        let nstate = step[recursive?](state);
        return NSIterate::s_while<S>[recursive](nstate, step, cond);
    }
}

hidden recursive function s_until<S>(state: S, step: recursive? fn(s: S) -> S, cond: recursive? fn(s: S) -> Bool): S {
    if(cond[recursive?](state)) {
        return state;
    }
    else {
        let nstate = step[recursive?](state);
        return NSIterate::s_until<S>[recursive](nstate, step, cond);
    }
}

hidden recursive function s_steps<S>(state: S, k: Int, step: recursive? fn(s: S) -> S): S {
    if(k == 0) {
        return state;
    }
    else {
        let nstate = step[recursive?](state);
        return NSIterate::s_steps<S>[recursive](nstate, k - 1, step);
    }
}

hidden recursive function s_reduce<T>(acc: T, vals: List<T>, vsize: Int, idx: Int, op: recursive? fn(a: T, b: T) -> T): T {
    if(idx == vsize) {
        return acc;
    }
    else {
        let nacc = op[recursive?](acc, List<T>::s_unsafe_get(vals, idx));
        return NSIterate::s_reduce<T>[recursive](acc, vals, vsize, idx + 1, op);
    }
}

recursive? function while<S>(initial: S, step: recursive? fn(s: S) -> S, cond: recursive? fn(s: S) -> Bool): S {
    return NSIterate::s_while<S>[recursive](initial, step, cond);
}

recursive? function until<S>(initial: S, step: recursive? fn(s: S) -> S, cond: recursive? fn(s: S) -> Bool): S {
    return NSIterate::s_until<S>[recursive](initial, step, cond);
}

recursive? function steps<S>(initial: S, k: Int, step: recursive? fn(s: S) -> S): S {
    return NSIterate::s_steps<S>[recursive](initial, k, step);
}

recursive? function reduce<T>(initial: T, vals: List<T>, op: recursive? fn(a: T, b: T) -> T, commutative?: Bool): T {
    return NSIterate::s_reduce<T>[recursive](initial, vals, List<T>::s_size(vals), 0, op);
}