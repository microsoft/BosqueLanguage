//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

entity Stack<T> provides Object, Expandoable<T> {
    pragma KnownSafe
    hidden static s_size(s: Stack<T>): Int # stack_size

    pragma KnownSafe
    hidden static s_unsafe_top(s: Stack<T>): T # stack_unsafe_top

    pragma KnownSafe
    hidden static s_unsafe_at(s: Stack<T>, idx: Int): T # stack_unsafe_at

    pragma KnownSafe
    hidden static s_unsafe_push(s: Stack<T>, v: T): Stack<T> # stack_unsafe_push

    pragma KnownSafe
    hidden static s_unsafe_pop(s: Stack<T>): Stack<T> # stack_unsafe_pop

    hidden static s_toList(q: Stack<T>, lp: List<T>, idx: Int): List<T> {
        if(idx == Stack<T>::s_size(q)) {
            return lp;
        }
        else {
            let val = Stack<T>::s_unsafe_at(q, idx);
            return Stack<T>::s_toList(q, List<T>::s_unsafe_push(lp, val), idx + 1);
        }
    }

    method size(): Int {
        return Stack<T>::s_size(this);
    }

    method empty(): Bool {
        return Stack<T>::s_size(this) == 0;
    }

    method toList(): List<T> {
        return Stack<T>::s_toList(this, List<T>@{}, 0);
    }

    method pop(): T, Stack<T>
        requires release Stack<T>::s_size(this) != 0;
    {
        return Stack<T>::s_unsafe_top(this), Stack<T>::s_unsafe_pop(this);
    }

    static ipop(ref s: Stack<T>): T 
        requires release Stack<T>::s_size(s) != 0;
    {
        let res = Stack<T>::s_unsafe_top(s);
        s = Stack<T>::s_unsafe_pop(s);

        return res;
    }

    method peek(): T
        requires release Stack<T>::s_size(this) != 0;
    {
        return Stack<T>::s_unsafe_top(this);
    }

    method tryPeek(): T? {
        return Stack<T>::s_size(this) != 0 ? Stack<T>::s_unsafe_top(this) : none;
    }

    method lookahead(k: Int): T
        requires release k < Stack<T>::s_size(this);
    {
        return Stack<T>::s_unsafe_at(this, k);
    }

    method tryLookahead(k: Int): T? {
        return k < Stack<T>::s_size(this) ? Stack<T>::s_unsafe_at(this, k) : none;
    }

    method rest(): Stack<T> 
        requires release Stack<T>::s_size(this) != 0;
    {
        return Stack<T>::s_unsafe_pop(this);
    }

    static irest(ref s: Stack<T>)
        requires release Stack<T>::s_size(s) != 0;
    {
        s = Queue<T>::s_unsafe_pop(s);
        return none;
    }

    method push(v: T): Stack<T> {
        return Queue<T>::s_unsafe_push(this, v);
    }

    static ipush(ref s: Stack<T>, v: T) {
        s = Stack<T>::s_unsafe_push(s, v);
        return none;
    }
}
