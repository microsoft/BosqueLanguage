//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

entity KeyList<K where KeyType> provides Object {
    field hkey: K;
    field tail: KeyList<K>?;

    hidden recursive static s_insert(kl: KeyList<K>, val: K): KeyList<K> {
        if(!KeyType::less(kl.hkey, val)) {
            return KeyList<K>@{hkey=val, tail=kl};
        }
        else {
            let tl = kl.tail;
            if(tl == none) {
                return KeyList<K>@{hkey=kl.hkey, tail=KeyList<K>@{hkey=val, tail=none}};
            }
            else {
                return KeyList<K>@{hkey=kl.hkey, tail=KeyList<K>::s_insert[recursive](tl, val)};
            }
        }
    }

    hidden recursive static s_sort(kl: KeyList<K>, rkl: KeyList<K>): KeyList<K> {
        let tl = kl.tail;
        if(tl == none) {
            return KeyList<K>::s_insert[recursive](rkl, kl.hkey);
        }
        else {
            return KeyList<K>::s_sort[recursive](tl, KeyList<K>::s_insert[recursive](rkl, kl.hkey));
        }
    }

    static sort(kl: KeyList<K>?): KeyList<K>? {
        if(kl == none) {
            return none;
        }
        else {
            let tl = kl.tail;
            if(tl == none) {
                return kl;
            }
            else {
                return KeyList<K>::s_sort[recursive](tl, KeyList<K>@{hkey=kl.hkey, tail=none});
            }
        }
    }
}