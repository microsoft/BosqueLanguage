//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

entity Map<K where KeyType, V> provides Object, Expandoable<MapEntry<K, V>>, PODType when K PODType && V PODType, APIType when K APIType && V APIType {
    hidden static s_size(m: Map<K, V>): Int # map_size
    hidden static s_has_key(m: Map<K, V>, key: K): Bool # map_has_key
    hidden static s_at_val(m: Map<K, V>, key: K): V # map_at_val

    hidden static s_key_list(m: Map<K, V>): List<K> # map_key_list
    hidden static s_key_set(m: Map<K, V>): Set<K> # map_key_set
    hidden static s_values(m: Map<K, V>): List<V> # map_values
    hidden static s_entries(m: Map<K, V>): List<MapEntry<K, V>> # map_entries

    hidden static s_has_all(m: Map<K, V>, kl: List<K>): Bool # map_has_all
    hidden static s_domainincludes(m: Map<K, V>, s: Set<K>): Bool # map_domainincludes

    recursive? hidden static s_submap(m: Map<K, V>, p: recursive? fn(_: K, _: V) -> Bool): Map<K, V> # map_submap
    hidden static s_oftype<T where KeyType, U>(m: Map<K, V>): Map<T, U> # map_oftype
    hidden static s_cast<T where KeyType, U>(m: Map<K, V>): Map<T, U> # map_cast

    hidden static s_projectall(m: Map<K, V>, dl: List<K>): Map<K, V> # map_projectall
    hidden static s_excludeall(m: Map<K, V>, ds: List<K>): Map<K, V> # map_excludeall

    hidden static s_project(m: Map<K, V>, ds: Set<K>): Map<K, V> # map_project
    hidden static s_exclude(m: Map<K, V>, ds: Set<K>): Map<K, V> # map_exclude

    recursive? hidden static s_remap<U>(m: Map<K, V>, f: recursive? fn(_: K, _: V) -> U): Map<K, U> # map_remap

    hidden static s_composewith<U>(m: Map<K, V>, cm: Map<V, U>): Map<K, U> # map_composewith
    hidden static s_trycomposewith<U>(m: Map<K, V>, cm: Map<V, U>): Map<K, U?> # map_trycomposewith
    hidden static s_defaultcomposewith<U>(m: Map<K, V>, cm: Map<V, U>, default: U): Map<K, U> # map_defaultcomposewith

    hidden static {when V KeyType} s_invertinj(m: Map<K, V>): Map<V, K> # map_invertinj
    hidden static {when V KeyType} s_invertrel(m: Map<K, V>): Map<V, List<K>> # map_invertrel

    hidden static s_union(m: Map<K, V>, om: Map<K, V>): Map<K, V> # map_union
    hidden static s_unionall(dl: List<Map<K, V>>): Map<K, V> # map_unionall

    hidden static s_merge(m: Map<K, V>, om: Map<K, V>): Map<K, V> # map_merge
    hidden static s_mergeall(dl: List<Map<K, V>>): Map<K, V> # map_mergeall

    method size(): Int {
        return Map<K, V>::s_size(this);
    }

    method empty(): Bool {
        return Map<K, V>::s_size(this) == 0;
    }

    method keys(): List<K> {
        return Map<K, V>::s_key_list(this);
    }

    method keySet(): Set<K> {
        return Map<K, V>::s_key_set(this);
    }

    method values(): List<V> {
        return Map<K, V>::s_values(this);
    }

    method entries(): List<MapEntry<K, V>> {
        return Map<K, V>::s_entries(this);
    }

    method toDynamicMap(): DynamicMap<K, V> {
        abort;
    }

    method has(key: K): Bool {
        return Map<K, V>::s_has_key(this, key);
    }

    method hasAll(...kl: List<K>): Bool {
        return Map<K, V>::s_has_all(this, kl);
    }

    method domainSubsetOf(s: Set<K>): Bool {
        if(Set<K>::s_size(s) > Map<K, V>::s_size(this)) {
            return false;
        }
        else {
            return Map<K, V>::s_domainincludes(this, s);
        }
    }

    method get(key: K): V 
        requires release Map<K, V>::s_has_key(this, key);
    {
        return Map<K, V>::s_at_val(this, key);
    }

    method tryGet(k: K): V? {
        return Map<K, V>::s_has_key(this, k) ? Map<K, V>::s_at_val(this, k) : none;
    }

    method defaultGet(k: K, default: V): V {
        return Map<K, V>::s_has_key(this, k) ? Map<K, V>::s_at_val(this, k) : default;
    }

    recursive? method submap(p: recursive? fn(_: K, _: V) -> Bool): Map<K, V> {
        return Map<K, V>::s_submap[recursive?](this, p);
    }

    method ofType<T where KeyType, U>(): Map<T, U> {
        return Map<K, V>::s_oftype<T, U>(this);
    }

    method cast<T where KeyType, U>(): Map<T, U> {
        return Map<K, V>::s_cast<T, U>(this);
    }

    method projectAll(...kl: List<K>): Map<K, V> {
        return Map<K, V>::s_projectall(this, kl);
    }

    method excludeAll(...kl: List<K>): Map<K, V> {
        return Map<K, V>::s_excludeall(this, kl);
    }

    method projectSet(ds: Set<K>): Map<K, V> {
        return Map<K, V>::s_project(this, ds);
    }

    method excludeSet(ds: Set<K>): Map<K, V> {
        return Map<K, V>::s_exclude(this, ds);
    }

    recursive? method remap<U>(f: recursive? fn(_: K, _: V) -> U): Map<K, U> {
        return Map<K, V>::s_remap<U>[recursive?](this, f);
    }

    method {when V KeyType} composeWith<U>(m: Map<V, U>): Map<K, U> {
        return Map<K, V>::s_composewith<U>(this, m);
    }

    method {when V KeyType} tryComposeWith<U>(m: Map<V, U>): Map<K, U?> {
        return Map<K, V>::s_trycomposewith<U>(this, m);
    }

    method {when V KeyType} defaultComposeWith<U>(m: Map<V, U>, default: U): Map<K, U> {
        return Map<K, V>::s_defaultcomposewith<U>(this, m, default);
    }

    method {when V KeyType} invertInjective(): Map<V, K> {
        return Map<K, V>::s_invertinj(this);
    }

    method {when V KeyType} invertRelational(): Map<V, List<K>> {
        return Map<K, V>::s_invertrel(this);
    }

    method unionWith(m: Map<K, V>): Map<K, V> {
        return Map<K, V>::s_union(this, m);
    }

    static unionOf(...ml: List<Map<K, V>>): Map<K, V> {
        if(List<Map<K, V>>::s_size(ml) == 0) {
            return Map<K, V>@{};
        }
        elif(List<Map<K, V>>::s_size(ml) == 1) {
            return List<Map<K, V>>::s_unsafe_get(ml, 0);
        }
        else {
            return Map<K, V>::s_unionall(ml);
        }
    }

    method mergeWith(m: Map<K, V>): Map<K, V> {
        return Map<K, V>::s_merge(this, m);
    }

    static mergeOf(...ml: List<Map<K, V>>): Map<K, V> {
        if(List<Map<K, V>>::s_size(ml) == 0) {
            return Map<K, V>@{};
        }
        elif(List<Map<K, V>>::s_size(ml) == 1) {
            return List<Map<K, V>>::s_unsafe_get(ml, 0);
        }
        else {
            return Map<K, V>::s_mergeall(ml);
        }
    }
}

entity DynamicMap<K where KeyType, V> provides Object, Expandoable<MapEntry<K, V>> {
    method size(): Int {
        abort;
    }

    method empty(): Bool  {
        abort;
    }

    method keys(): List<K>  {
        abort;
    }

    method keySet(): Set<K>  {
        abort;
    }

    method values(): List<V>  {
        abort;
    }

    method entries(): List<MapEntry<K, V>>  {
        abort;
    }

    method toMap(): DynamicMap<K, V> {
        abort;
    }

    method has(key: K): Bool {
        abort;
    }

    method hasAll(...ks: List<K>): Bool {
        abort;
    }

    method domainSubsetOf(s: Set<K>): Bool {
        abort;
    }

    method get(key: K): V {
        abort;
    }

    method tryGet(k: K): V? {
        abort;
    }

    method add(k: K, v: V): DynamicMap<K, V> {
        abort;
    }

    method addAll(...el: List<MapEntry<K, V>>): DynamicMap<K, V> {
        abort;
    }

    method insert(k: K, v: V): DynamicMap<K, V> {
        abort;
    }

    method insertAll(...el: List<MapEntry<K, V>>): DynamicMap<K, V> {
        abort;
    }

    method update(k: K, v: V): DynamicMap<K, V> {
        abort;
    }

    method updateAll(...el: List<MapEntry<K, V>>): DynamicMap<K, V> {
        abort;
    }

    method remove(k: K): DynamicMap<K, V> {
        abort;
    }

    method removeAll(...kl: List<K>): DynamicMap<K, V> {
        abort;
    }

    recursive? method submap(p: recursive? fn(_: K, _: V) -> Bool): DynamicMap<K, V> {
        abort;
    }

    method ofType<T where KeyType, U>(): Map<T, U> {
        abort;
    }

    method cast<T where KeyType, U>(): Map<T, U> {
        abort;
    }

    method projectAll(...kl: List<K>): DynamicMap<K, V> {
        abort;
    }

    method excludeAll(...kl: List<K>): DynamicMap<K, V> {
        abort;
    }

    method projectSet(ds: Set<K>): DynamicMap<K, V> {
        abort;
    }

    method excludeSet(ds: Set<K>): Map<K, V> {
        abort;
    }

    recursive? method remap<U>(f: recursive? fn(_: K, _: V) -> U): DynamicMap<K, U> {
        abort;
    }

    method unionWith(m: Map<K, V>): DynamicMap<K, V> {
        abort;
    }

    static union(...ml: List<Map<K, V>>): DynamicMap<K, V> {
        abort;
    }

    method mergeWith(m: Map<K, V>): DynamicMap<K, V> {
        abort;
    }

    static merge(...ml: List<Map<K, V>>): DynamicMap<K, V> {
        abort;
    }
}


