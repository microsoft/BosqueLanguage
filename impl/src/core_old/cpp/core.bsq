//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method asOrNone<T>(): T? {
        return this->is<T>() ? this->as<T>() : none;
    }

    method asTry<T>(ref? v: T): Bool {
        if(!this->is<T>()) {
            return false;
        }
        else {
            v = this->as<T>();
            return true;
        }
    }

    method isSome(): Bool # special_method
    method isNone(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
concept Some provides Any {
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
concept KeyType provides Any {
    function equal<T grounded KeyType>(a: T, b: T): Bool # special_method
    function less<T grounded KeyType>(a: T, b: T): Bool # special_method
}

//<summary>Type for indicating that a datatype is Plain-Old-Data.</summary>
concept PODType provides APIType {
    function bufferify<T grounded PODType>(data: T, format?: BufferFormat = BufferFormat::bosque, encoding?: BufferEncoding = BufferEncoding::utf8, compression?: BufferCompression = BufferCompression::off): Buffer<T> # pod_bufferify
    function parseBuffer<T grounded PODType>(data: Buffer<T>): Result<T, String> # pod_tryparsebuffer
}

//<summary>Type to unify Buffers and APITypes at top level for checking</summary>
concept APIValue provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
concept APIType provides APIValue {
    function bufferify<T grounded APIType>(data: T, format?: BufferFormat = BufferFormat::bosque, encoding?: BufferEncoding = BufferEncoding::utf8, compression?: BufferCompression = BufferCompression::off): Buffer<T> # api_bufferify
    function parseBuffer<T grounded APIType>(data: Buffer<T>): Result<T, String> # api_tryparsebuffer
}

//<summary>Type for representing the none-value.</summary>
grounded parsable struct entity None provides KeyType, PODType, APIType {
    function parse(str: String): Result<None, String> {
        if(str == "none") {
            return ok(none);
        }
        else {
            return err("Expected None");
        }
    }
}

//<summary>Primitive boolean value.</summary>
grounded parsable struct entity Bool provides Some, KeyType, PODType, APIType {
    function parse(str: String): Result<Bool, String> {
        if(str == "false") {
            return ok(false);
        }
        elif(str == "true") {
            return ok(true);
        }
        else {
            return err("Expected Bool");
        }
    }

    function stringify(b: Bool): String {
        return b ? "true" : "false";
    }
}
inline infix operator ==(a: Bool, b: Bool): Bool = default;
inline infix operator !=(a: Bool, b: Bool): Bool = default;

//<summary>Special truthy value for easy Bool | None testing</summary>
function isTruthy(tval: Bool?): Bool {
    return tval != none ? tval : false;
}

//<summary>Primitive integer value.</summary>
grounded parsable struct entity Int provides Some, KeyType, PODType, APIType {
    private function s_mod(a: Int, b: Int): Int # int_mod

    const min_value: Int = -9223372036854775808;
    const max_value: Int = 9223372036854775807;

    function parse(str: String): Result<Int, String> # int_tryparse
    function stringify(i: Int): String # int_tostring

    method abs(): Int {
        return this < 0 ? -this : this;
    }
}
inline prefix operator +(a: Int): Int = default;
inline prefix operator -(a: Int): Int = default;
inline infix operator *(a: Int, b, Int): Int = default;
inline infix operator /(a: Int, b, Int): Int = default;
inline infix operator +(a: Int, b, Int): Int = default;
inline infix operator -(a: Int, b, Int): Int = default;
inline infix operator ==(a: Int, b: Int): Bool = default;
inline infix operator !=(a: Int, b: Int): Bool = default;
inline infix operator <(a: Int, b: Int): Bool = default;
inline infix operator >(a: Int, b: Int): Bool = default;
inline infix operator <=(a: Int, b: Int): Bool = default;
inline infix operator >=(a: Int, b: Int): Bool = default;

//<summary>Primitive natural number value.</summary>
grounded parsable struct entity Nat provides Some, KeyType, PODType, APIType {
    const max_value: Nat = 18446744073709551615n;

    function parse(str: String): Result<Nat, String> # nat_tryparse
    function stringify(i: Nat): String # nat_tostring
}
inline prefix operator +(a: Nat): Nat = default;
inline infix operator *(a: Nat, b, Nat): Nat = default;
inline infix operator /(a: Nat, b, Nat): Nat = default;
inline infix operator +(a: Nat, b, Nat): Nat = default;
inline infix operator -(a: Nat, b, Nat): Nat = default;
inline infix operator ==(a: Nat, b: Nat): Bool = default;
inline infix operator !=(a: Nat, b: Nat): Bool = default;
inline infix operator <(a: Nat, b: Nat): Bool = default;
inline infix operator >(a: Nat, b: Nat): Bool = default;
inline infix operator <=(a: Nat, b: Nat): Bool = default;
inline infix operator >=(a: Nat, b: Nat): Bool = default;

//<summary>Primitive big-integer value.</summary>
grounded parsable struct entity BigInt provides Some, KeyType, PODType, APIType {
    function parse(str: String): Result<BigInt, String> # bigint_tryparse
    function stringify(i: BigInt): String # bigint_tostring

    const min_safeInt: BigInt = -9223372036854775808I;
    const max_safeInt: BigInt = 9223372036854775807I;

    method isSafeInt(): Bool {
        return BigInt::min_safeInt <= this && this <= BigInt::max_safeInt;
    }

    function fromInt(i: Int): BigInt # bigint_fromint
    method toInt(): Int # bigint_toint 
}
inline prefix operator +(a: BigInt): BigInt = default;
inline prefix operator -(a: BigInt): BigInt = default;
inline infix operator *(a: BigInt, b, BigInt): BigInt = default;
inline infix operator /(a: BigInt, b, BigInt): BigInt = default;
inline infix operator +(a: BigInt, b, BigInt): BigInt = default;
inline infix operator -(a: BigInt, b, BigInt): BigInt = default;
inline infix operator ==(a: BigInt, b: BigInt): Bool = default;
inline infix operator !=(a: BigInt, b: BigInt): Bool = default;
inline infix operator <(a: BigInt, b: BigInt): Bool = default;
inline infix operator >(a: BigInt, b: BigInt): Bool = default;
inline infix operator <=(a: BigInt, b: BigInt): Bool = default;
inline infix operator >=(a: BigInt, b: BigInt): Bool = default;

//<summary>Primitive big-integer value.</summary>
grounded parsable struct entity BigNat provides Some, KeyType, PODType, APIType {
    function parse(str: String): Result<BigNat, String> # bignat_tryparse
    function stringify(i: BigInt): String # bignat_tostring

    const max_safeNat: BigInt = 18446744073709551615N;

    method isSafeNat(): Bool {
        return this <= BigNat::max_safeInt;
    }

    function fromNat(n: Nat): BigInt # bignat_fromnat
    method toNat(): Nat # bignat_tonat
}
inline prefix operator +(a: BigNat): BigNat = default;
inline infix operator *(a: BigNat, b, BigNat): BigNat = default;
inline infix operator /(a: BigNat, b, BigNat): BigNat = default;
inline infix operator +(a: BigNat, b, BigNat): BigNat = default;
inline infix operator -(a: BigNat, b, BigNat): BigNat = default;
inline infix operator ==(a: BigNat, b: BigNat): Bool = default;
inline infix operator !=(a: BigNat, b: BigNat): Bool = default;
inline infix operator <(a: BigNat, b: BigNat): Bool = default;
inline infix operator >(a: BigNat, b: BigNat): Bool = default;
inline infix operator <=(a: BigNat, b: BigNat): Bool = default;
inline infix operator >=(a: BigNat, b: BigNat): Bool = default;

//<summary>Primitive rational value.</summary>
grounded parsable struct entity Rational provides Some, KeyType, PODType, APIType {
    function parse(str: String): Result<Rational, String> # rational_tryparse
    function stringify(i: Rational): String # rational_tostring

    method isIntegral(): Bool # rational_isint
    method isSafeIntegral(): Bool # rational_issafeint

    function fromInt(n: Int): Rational # rational_fromint
    method toInt(): Int # rational_toint

    function fromBigInt(bi: BigInt): Rational # rational_fromnat
    method toBigInt(): BigInt # rational_tonat
}
inline prefix operator +(a: Rational): Rational = default;
inline prefix operator -(a: Rational): Rational = default;
inline infix operator *(a: Rational, b, Rational): Rational = default;
inline infix operator /(a: Rational, b, Rational): Rational = default;
inline infix operator +(a: Rational, b, Rational): Rational = default;
inline infix operator -(a: Rational, b, Rational): Rational = default;
inline infix operator ==(a: Rational, b: Rational): Bool = default;
inline infix operator !=(a: Rational, b: Rational): Bool = default;
inline infix operator <(a: Rational, b: Rational): Bool = default;
inline infix operator >(a: Rational, b: Rational): Bool = default;
inline infix operator <=(a: Rational, b: Rational): Bool = default;
inline infix operator >=(a: Rational, b: Rational): Bool = default;

//<summary>Primitive float value -- compiler flags control bitness -- defaults to 64bit.</summary>
grounded parsable struct entity Float provides Some, PODType, APIType {
    private function s_float_min_value(): Float # float_min_value
    private function s_float_max_value(): Float # float_max_value
    private function s_float_infinity_value(): Float # float_infinity_value
    private function s_float_nan_value(): Float # float_nan_value

    const min_value: Float = Float::s_float_min_value();
    const max_value: Float = Float::s_float_max_value();

    const infinity: Float = Float::s_float_infinity_value();
    const nan: Float = Float::s_float_nan_value();
    
    const pi: Float = 3.1415926535897931;
    const e: Float = 2.7182818284590451;

    function parse(str: String): Result<Float, String> # float_tryparse
    function stringify(f: Float): String # float_tostring

    method isInfinite(): Bool # float_isinfinity
    method isNan(): Bool # float_isnan
}
inline prefix operator +(a: Float): Float = default;
inline prefix operator -(a: Float): Float = default;
inline infix operator *(a: Float, b, Float): Float = default;
inline infix operator /(a: Float, b, Float): Float = default;
inline infix operator +(a: Float, b, Float): Float = default;
inline infix operator -(a: Float, b, Float): Float = default;
inline infix operator <(a: Float, b: Float): Bool = default;
inline infix operator >(a: Float, b: Float): Bool = default;

//<summary>Primitive float decimal value.</summary>
grounded parsable struct entity Decimal provides Some, PODType, APIType {
    private function s_decimal_min_value(): Decimal # decimal_min_value
    private function s_decimal_max_value(): Decimal # decimal_max_value

    const min_value: Decimal = Decimal::s_decimal_min_value();
    const max_value: Decimal = Decimal::s_decimal_max_value();

    function parse(str: String): Result<Decimal, String> # decimal_tryparse
    function stringify(d: Decimal): String # decimal_tostring

    method abs(): Decimal {
        return this < 0 ? -this : this;
    }
}
inline prefix operator +(a: Decimal): Decimal = default;
inline prefix operator -(a: Decimal): Decimal = default;
inline infix operator *(a: Decimal, b, Decimal): Decimal = default;
inline infix operator /(a: Decimal, b, Decimal): Decimal = default;
inline infix operator +(a: Decimal, b, Decimal): Decimal = default;
inline infix operator -(a: Decimal, b, Decimal): Decimal = default;
inline infix operator <(a: Decimal, b: Decimal): Bool = default;
inline infix operator >(a: Decimal, b: Decimal): Bool = default;


//<summary>Primitive complex floating point value.</summary>
grounded parsable struct entity Complex provides Some, PODType, APIType {
    function parse(str: String): Result<Complex, String> # complex_tryparse
    function stringify(c: Complex): String # complex_tostring
}
inline prefix operator +(a: Complex): Complex = default;
inline prefix operator -(a: Complex): Complex = default;
inline infix operator *(a: Complex, b, Complex): Complex = default;
inline infix operator /(a: Complex, b, Complex): Complex = default;
inline infix operator +(a: Complex, b, Complex): Complex = default;
inline infix operator -(a: Complex, b, Complex): Complex = default;
inline infix operator <(a: Complex, b: Complex): Bool = default;
inline infix operator >(a: Complex, b: Complex): Bool = default;

//<summary>Primitive string value.</summary>
grounded entity String provides Some, KeyType, PODType, APIType {
    private function s_length(s: String): Int # string_count
    private function s_charat(s: String): Int # string_charat

    private function s_concat(s1: List<String>): String # string_concat

    private function s_rangeInBounds(str: String, start: Int?, end: Int?): Bool {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return 0 <= s && s <= e && e <= String::s_length(str);
    }

    private function s_substring(s: String, start: Int, end: Int): String # string_substring

    method length(): Int {
        return String::s_length(this);
    }

    method charAt(idx: Int): String
        requires release 0 <= idx && idx < String::s_length(this);
    {
        return String::s_charat(this, idx);
    }

    function concat(...args: List<String>): String {
        if(List<String>::s_size(args) == 0) {
            return "";
        }
        elif(List<String>::s_size(args) == 1) {
            return args.front();
        }
        else {
            return String::s_concat(args);
        }
    }

    method substring(start?: Int, end?: Int): String
        requires release String::s_rangeInBounds(this, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(this);
        return String::s_substring(this, s, e);
    }

    method includes(str: String): Bool # string_includes
    method startsWith(str: String): Bool # string_startswith
    method endsWith(str: String): Bool # string_endswith

    method indexOf(str: String): Int # string_indexof
    method lastIndexOf(str: String): Int # string_indexof

    method split(sep: String): List<String> # string_indexof
    function join(sep: String, args: List<String>): String # string_join

    method trim(): String # string_trim
    method trimStart(): String # string_trimstart
    method trimEnd(): String # string_trimend

    function compare(a: String, b: String): Bool # string_compare
}
inline infix operator ==(a: Rational, b: Rational): Bool = default;
inline infix operator !=(a: Rational, b: Rational): Bool = default;
inline infix operator <(a: Rational, b: Rational): Bool = default;
inline infix operator >(a: Rational, b: Rational): Bool = default;
inline infix operator <=(a: Rational, b: Rational): Bool = default;
inline infix operator >=(a: Rational, b: Rational): Bool = default;

//<summary>Primitive safe string value.</summary>
grounded entity StringOf<T where validator> provides Some, KeyType, PODType, APIType {
    private function s_unsafe_from(str: String): SafeString<T> # stringof_unsafe_from

    method string(): String # datastring_string

    function from(str: String): StringOf<T>
        requires release T::accepts(str);
    {
        return StringOf<T>::s_unsafe_from(str);
    }
  
    function from(str: String): StringOf<T>
        requires release T::accepts(str);
    {
        return StringOf<T>::s_unsafe_from(str);
    }

    function tryFrom(str: String): StringOf<T>? {
        return T::accepts(str) ? StringOf<T>::s_unsafe_from(str) : none;
    }

    method convertable<U where validator>(): Bool {
        return U::accepts(this.string());
    }
    
    method convert<U where validator>(): StringOf<U> {
        return StringOf<U>::from(this.string());
    }

    method tryConvert<U where validator>(): StringOf<U> {
        return StringOf<U>::tryFrom(this.string());
    }
}
//special case for == and < operations

//<summary>Primitive DataString value.</summary>
grounded entity DataString<T where parsable> provides Some, KeyType, APIValue {
    private function s_unsafe_from(str: String): DataString<T> # datastring_unsafe_from

    method string(): String # datastring_string

    function from(str: String): DataString<T> 
        requires release T::parse(str).isOk();
    {
        return DataString<T>::s_unsafe_from(str);
    }

    function tryFrom(str: String): DataString<T>? {
        return T::parse(str).isOk() ? DataString<T>::s_unsafe_from(str) : none;
    }

    method convertable<U where parsable>(): Bool {
        return U::parse(this.string()).isOk();
    }

    method convert<U where parsable>(): DataString<U>  {
        return DataString<U>::from(this.string());
    }

    method tryConvert<U where parsable>(): DataString<U>? {
        return DataString<U>::tryFrom(this.string());
    }
}
//special case for == and < operations

//<summary>An efficient buffer encoding for data.</summary>
entity Buffer<T where grounded PODType | APIType> provides Some, APIValue {
    method bytes(): ByteBuffer # buffer_bytes
}

//<summary>An efficient buffer encoding for data.</summary>
entity DataBuffer<T where parsable> provides Some, APIValue {
    method bytes(): ByteBuffer # bufferof_bytes
}

enum BufferFormat {
    text,
    bosque,
    json
}

enum BufferEncoding {
    utf8,
    binary
}

enum BufferCompression {
    off,
    time,
    space
}

//<summary>An efficient byte buffer for data.</summary>
entity ByteBuffer provides Some, APIValue {
}

//<summary>Unit declarations for seconds, milliseconds, and ISOTime</summary>
numeric typedecl ISOSeconds = Int & {
    toMilliseconds(): ISOMilliSecond {
        return ISOMilliSecond::create(this.value() * 1000);
    }
}
inline prefix operator +(a: ISOSeconds): ISOSeconds = default;
inline prefix operator -(a: ISOSeconds): ISOSeconds = default;
inline infix operator +(a: ISOSeconds, b, ISOSeconds): ISOSeconds = default;
inline infix operator -(a: ISOSeconds, b, ISOSeconds): ISOSeconds = default;
inline infix operator ==(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator !=(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator <(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator >(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator <=(a: ISOSeconds, b: ISOSeconds): Bool = default;
inline infix operator >=(a: ISOSeconds, b: ISOSeconds): Bool = default;

numeric typedecl ISOMilliSeconds = Int & {
    toSeconds(): ISOSeconds {
        return ISOSeconds::create(this.value() / 1000);
    }
}
inline prefix operator +(a: ISOMilliSeconds): ISOMilliSeconds = default;
inline prefix operator -(a: ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator +(a: ISOMilliSeconds, b, ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator -(a: ISOMilliSeconds, b, ISOMilliSeconds): ISOMilliSeconds = default;
inline infix operator ==(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator !=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator <(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator >(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator <=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;
inline infix operator >=(a: ISOMilliSeconds, b: ISOMilliSeconds): Bool = default;

numeric ISOTime = Nat;
inline infix operator +(a: ISOMilliSeconds, b, ISOTime): ISOTime # default_isoaddsecl;
inline infix operator +(a: ISOTime, b, ISOMilliSeconds): ISOTime # default_isoaddsecr;
inline infix operator -(a: ISOTime, b, ISOTime): ISOMilliSeconds # default_isodiff;
inline infix operator ==(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator !=(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator <(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator >(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator <=(a: ISOTime, b: ISOTime): Bool = default;
inline infix operator >=(a: ISOTime, b: ISOTime): Bool = default;

//<summary>Primitive UUID value.</summary>
grounded parsable struct entity UUID provides Some, KeyType, PODType, APIType {
    function parse(str: String): Result<UUID, String> # uuid_tryparse
}
inline infix operator ==(a: UUID, b: UUID): Bool = default;
inline infix operator !=(a: UUID, b: UUID): Bool = default;

//<summary>Unit declarations for LogicalTime</summary>
numeric LogicalTime = Nat;
inline infix operator +(a: Int, b, LogicalTime): LogicalTime # default_logic_iltl;
inline infix operator +(a: LogicalTime, b, Int): LogicalTime # default_logic_iltr;
inline infix operator +(a: Nat, b, LogicalTime): LogicalTime # default_logic_nltl;
inline infix operator +(a: LogicalTime, b, Nat): LogicalTime # default_logic_nltr;
inline infix operator -(a: LogicalTime, b, LogicalTime): Int # default_logic_ltdiff;
inline infix operator ==(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator !=(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator <(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator >(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator <=(a: LogicalTime, b: LogicalTime): Bool = default;
inline infix operator >=(a: LogicalTime, b: LogicalTime): Bool = default;

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
grounded parsable entity CryptoHash provides Some, KeyType, PODType, APIType {
    function compute<T>(value: T): CryptoHash # cryptohash_compute

    function parse(str: String): Result<CryptoHash, String> # cryptohash_tryparse
}
inline infix operator ==(a: CryptoHash, b: CryptoHash): Bool = default;
inline infix operator !=(a: CryptoHash, b: CryptoHash): Bool = default;

//<summary>Primitive regex value.</summary>
entity Regex provides Some {
    private function s_accepts(str: String, start: Int, end: Int): Bool # regex_accepts
    private function s_match(str: String, start: Int, end: Int): Int, Int # regex_match

    private function s_rangeInBounds(str: String, start: Int?, end: Int?): Bool {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return 0 <= s && s <= e && e <= String::s_length(str); 
    }

    method accepts(str: String, start?: Int, end?: Int): Bool
        requires release Regex::s_rangeInBounds(s, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(str);
        return Regex::s_accepts(str, s, e);
    }

    method match(str: String, start?: Int, end?: Int): RegexMatch?
        requires release Regex::s_rangeInBounds(s, start, end);
    {
        let s, e = start ?| 0, end ?| String::s_length(str);

        let i, l = Regex::s_match(str, s, e);
        return (l != -1) ? RegexMatch#{ success=true, index=i, length=l } : none;
    }
}

struct entity RegexMatch provides Some {
    field index: Int;
    field length: Int;

    invariant $index >= 0 && $length >= 0;
}

//<summary>Static methods for Tuples.</summary>
concept Tuple provides Some {
    function append(...args: List<Tuple>): Tuple # special_method
}

//<summary>Static methods for Records.</summary>
concept Record provides Some {
    function join(...args: List<Record>): Record # special_method
}

//<summary>Result type.</summary>
struct concept Result<T, E=Any> provides Some {
    struct entity Ok provides Result<T, E> {
        field value: T;

        function create(value: T): Ok {
            return Ok@{ value = value };
        }
    }

    struct entity Err provides Result<T, E> {
        field info: E;

        function create(info: E): Err {
            return Err@{ info = info };
        }
    }

    function createOk(value: T): Result<T, E> {
        return Ok::create(value);
    }

    function createErr(info: E): Result<T, E> {
        return Err::create(info);
    }

    method isOk(): Bool {
        return this.is<Ok>();
    }

    method isErr(): Bool {
        return this.is<Err>();
    }

    method value(): T {
        return this.as<Ok>().value;
    }

    method error(): E {
        return this.as<Err>().info;
    }

    method convert<U?, V?>(): Result<U, V> {
        return this.isOk() ? Result<U, V>::createOk(this.value().as<U>()) ? Result<U, V>::createErr(this.error().as<V>()); 
    }
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All collections provide this concept so we can expand them with spread operators.</summary>
concept Expandoable<T> provides Object {
    method expand<U>(): List<U> # special_method
}
