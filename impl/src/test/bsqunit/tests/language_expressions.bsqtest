//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace Expressions;

////
//Logical Operators

const lfalse: Bool = false;
const ltrue: Bool = true;

chktest function logical_negation_false_sc_lit(): Bool {
    return (!false);
}

chktest function logical_negation_true_list(): Bool {
    return !(!true);
}

chktest function logical_negation_false(): Bool {
    return (!Expressions::lfalse);
}

chktest function logical_negation_true(): Bool {
    return !(!Expressions::ltrue);
}

chktest function logical_and_true_sc_lt(): Bool {
    return !(false && true);
}

chktest function logical_and_tf(): Bool {
    return !(Expressions::ltrue && Expressions::lfalse);
}

chktest function logical_and_tt(): Bool {
    return (Expressions::ltrue && Expressions::ltrue);
}

chktest function logical_and_sc(): Bool {
    return !(Expressions::lfalse && (1n / 0n == 1n));
}

chktest function logical_or_false_sc_lit(): Bool {
    return (false || true);
}

chktest function logical_or_tf(): Bool {
    return (Expressions::ltrue || Expressions::lfalse);
}

chktest function logical_or_ff(): Bool {
    return !(Expressions::lfalse || Expressions::lfalse);
}

chktest function logical_or_sc(): Bool {
    return (Expressions::ltrue || (1n / 0n == 1n));
}

chktest function logical_implies_false_lit(): Bool {
    return (false ==> true);
}

chktest function logical_implies_tf(): Bool {
    return !(Expressions::ltrue ==> Expressions::lfalse);
}

chktest function logical_impliestt(): Bool {
    return (Expressions::ltrue ==> Expressions::ltrue);
}

chktest function logical_implies_ft(): Bool {
    return (Expressions::lfalse ==> Expressions::ltrue);
}

chktest function logical_implies_sc(): Bool {
    return (Expressions::lfalse ==> (1n / 0n == 1n));
}

chktest function logical_land_tft(): Bool {
    return !(/\(true, false, true)); 
}

chktest function logical_land_ttt(): Bool {
    return /\(true, true, true); 
}

chktest function logical_lor_tft(): Bool {
    return \/(true, false, true); 
}

chktest function logical_lor_fff(): Bool {
    return !(\/(false, false, false)); 
}

////
//Types for operator and compare tests
algebraic orderable typedecl ItemCount = Int;

entity ActionCount {
    field count: Int;
}

infix operator ==(a: ActionCount, b: ActionCount): Bool {
    return a.count == b.count;
}

infix operator !=(a: ActionCount, b: ActionCount): Bool {
    return a.count != b.count;
}

infix operator <(a: ActionCount, b: ActionCount): Bool {
    return a.count < b.count;
}

infix operator >(a: ActionCount, b: ActionCount): Bool {
    return a.count > b.count;
}

infix operator <=(a: ActionCount, b: ActionCount): Bool {
    return a.count <= b.count;
}

infix operator >=(a: ActionCount, b: ActionCount): Bool {
    return a.count >= b.count;
}

entity Complex {
    field r: Float;
    field i: Float;
}

infix operator ==(a: Complex, b: Complex): Bool {
    return a.r == b.r && a.i == b.i;
}

infix operator !=(a: Complex, b: Complex): Bool {
    return a.r != b.r || a.i != b.i;
}

////
//Compare operator overloads

chktest function compare_eq_itemcount_true(): Bool {
    return (3_ItemCount == 3_ItemCount); 
}

chktest function compare_eq_itemcount_false(): Bool {
    return !(3_ItemCount == 5_ItemCount); 
}

chktest function compare_neq_itemcount_true(): Bool {
    return (3_ItemCount != 5_ItemCount); 
}

chktest function compare_neq_itemcount_false(): Bool {
    return !(3_ItemCount != 3_ItemCount); 
}

chktest function compare_less_itemcount_true(): Bool {
    return (1_ItemCount < 3_ItemCount); 
}

chktest function compare_less_itemcount_false(): Bool {
    return !(3_ItemCount < 1_ItemCount);
}

chktest function compare_less_itemcount_false_eq(): Bool {
    return !(3_ItemCount < 3_ItemCount);
}

chktest function compare_greater_itemcount_true(): Bool {
    return (3_ItemCount > 1_ItemCount); 
}

chktest function compare_greater_itemcount_false(): Bool {
    return !(1_ItemCount > 3_ItemCount);
}

chktest function compare_greater_itemcount_false_eq(): Bool {
    return !(3_ItemCount > 3_ItemCount);
}

chktest function compare_less_eq_itemcount_true(): Bool {
    return (1_ItemCount <= 3_ItemCount); 
}

chktest function compare_less_eq_itemcount_false(): Bool {
    return !(3_ItemCount <= 1_ItemCount);
}

chktest function compare_less_eq_itemcount_true_eq(): Bool {
    return (3_ItemCount <= 3_ItemCount);
}

chktest function compare_greater_itemcount_nat_true(): Bool {
    return (3_ItemCount >= 1_ItemCount); 
}

chktest function compare_greater_itemcount_nat_false(): Bool {
    return !(1_ItemCount >= 3_ItemCount);
}

chktest function compare_greater_itemcount_nat_true_eq(): Bool {
    return (3_ItemCount >= 3_ItemCount);
}

chktest function compare_eq_actioncount_true(): Bool {
    return (ActionCount{3} == ActionCount{3}); 
}

chktest function compare_eq_actioncount_false(): Bool {
    return !(ActionCount{3} == ActionCount{5}); 
}

chktest function compare_neq_actioncount_true(): Bool {
    return (ActionCount{3} != ActionCount{5}); 
}

chktest function compare_neq_actioncount_false(): Bool {
    return !(ActionCount{3} != ActionCount{3}); 
}

chktest function compare_less_actioncount_true(): Bool {
    return (ActionCount{1} < ActionCount{3}); 
}

chktest function compare_less_actioncount_false(): Bool {
    return !(ActionCount{3} < ActionCount{1});
}

chktest function compare_less_actioncount_false_eq(): Bool {
    return !(ActionCount{3} < ActionCount{3});
}

chktest function compare_greater_actioncount_true(): Bool {
    return (ActionCount{3} > ActionCount{1}); 
}

chktest function compare_greater_actioncount_false(): Bool {
    return !(ActionCount{1} > ActionCount{3});
}

chktest function compare_greater_actioncount_false_eq(): Bool {
    return !(ActionCount{3} > ActionCount{3});
}

chktest function compare_less_eq_actioncount_true(): Bool {
    return (ActionCount{1} <= ActionCount{3}); 
}

chktest function compare_less_eq_actioncount_false(): Bool {
    return !(ActionCount{3} <= ActionCount{1});
}

chktest function compare_less_eq_actioncount_true_eq(): Bool {
    return (ActionCount{3} <= ActionCount{3});
}

chktest function compare_greater_actioncount_nat_true(): Bool {
    return (ActionCount{3} >= ActionCount{1}); 
}

chktest function compare_greater_actioncount_nat_false(): Bool {
    return !(ActionCount{1} >= ActionCount{3});
}

chktest function compare_greater_actioncount_nat_true_eq(): Bool {
    return (ActionCount{3} >= ActionCount{3});
}

chktest function compare_neq_complex(): Bool {
    return Complex{1.0f, 0.0f} != Complex{1.0f, 1.0f};
}

////
//Algebraic operator overloads

chktest function ops_negate_itemcount(): Bool {
    return -(1_ItemCount) == -1_ItemCount;
}

chktest function ops_negate_itemcount_identity(x: ItemCount): Bool {
    return -(-x) == x;
}

chktest function ops_plus_itemcount(): Bool {
    return +(-1_ItemCount) == +-1_ItemCount;
}

chktest function ops_plus_itemcount_identity(x: ItemCount): Bool {
    return +x == x;
}

chktest function ops_add_itemcount(): Bool {
    return (-1_ItemCount + 3_ItemCount) == 2_ItemCount;
}

chktest function ops_add_itemcount_identity(x: ItemCount): Bool {
    return (0_ItemCount + x) == x;
}

chktest function ops_add_itemcount_inverse(x: ItemCount): Bool {
    return (x + -x) == 0_ItemCount;
}

__chktest function ops_add_itemcount_inverse_find(x: ItemCount): Bool {
    return (5_ItemCount + x) == 0_ItemCount;
}

chktest function ops_sub_itemcount(): Bool {
    return (1_ItemCount - 3_ItemCount) == -2_ItemCount;
}

chktest function ops_sub_itemcount_identity(x: ItemCount): Bool {
    return (x - x) == 0_ItemCount;
}

chktest function ops_sub_itemcount_inverse(x: ItemCount): Bool {
    return (x + -x) == 0_ItemCount;
}

__chktest function ops_sub_itemcount_inverse_find(x: ItemCount): Bool {
    return (x - x) == x;
}

chktest function ops_mult_itemcount(): Bool {
    return (2i * 3_ItemCount) == 6_ItemCount;
}

chktest function ops_mult_itemcountx(): Bool {
    return (0i * 3_ItemCount) == 0_ItemCount;
}

chktest function ops_mult_itemcount_zero(x: ItemCount): Bool {
    return (x * 0i) == 0_ItemCount;
}

chktest function ops_mult_itemcount_one(x: ItemCount): Bool {
    return (x * 1i) == x;
}

chktest function ops_mult_itemcount_negone(x: ItemCount): Bool {
    return (x * -1i) == -x;
}

chktest function ops_div_itemcount(): Bool {
    return (4_ItemCount / 2i) == 2_ItemCount;
}

chktest function ops_div_itemcount_ii(): Bool {
    return (4_ItemCount / 2_ItemCount) == 2i;
}

chktest function ops_div_itemcountx(): Bool {
    return (0_ItemCount / 2i) == 0_ItemCount;
}

chktest function ops_div_int_one(x: ItemCount): Bool {
    return (x / 1i) == x;
}

////
//Static Namespace Operators

abstract operator %ns_operator%(a: Any, b: Any): Any;

operator %ns_operator%(a: Int, b: Int): Int {
    return a + b;
}

operator %ns_operator%(a: Nat, b: Bool): Nat {
    if(b) {
        return a;
    }
    else {
        return 0n;
    }
}

chktest function operator_ii(): Bool {
    return %ns_operator%(1i, 2i) == 3i;
}

chktest function operator_nb(): Bool {
    return %ns_operator%(1n, true) == 1n;
}
