{
    "suite": "readme",
    "tests": [
        {
            "test": "addchk",
            "src": null,
            "sig": "function main(x: Nat, y: Nat): Bool",
            "code": "function add2(x: Nat, y: Nat): Nat { return x + y; }",
            "typechk": [
                "add2(x, 0i) == x",
                "add2(x, 0f) == x"
            ],
            "refutes": [
                "add2(x, y) >= 0n",
                "add2(x, 0) == x",
                "add2(0, y) == y",
                "add2(2, 3) == 5n",
                "add2(x=2, y=3) == 5n",
                "add2(y=2, 5) == 7n"
            ],
            "reachables": [
                "add2(1, 2) == 3n",
                "add2(x, y) == 3n",
                "add2(x=x, 1) == 3n",
                "add2(y=y, 1) == 3n"
            ]
        },
        {
            "test": "addex",
            "src": null,
            "sig": "function main(x: Nat, y: Nat): Nat",
            "code": "",
            "icpp": [
                ["x + y", [2, 3], "5n"]
            ]
        },
        {
            "test": "allPositive",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(...args: List<Int>): Bool { return args.allOf(pred(x) => x >= 0i); }",
            "typechk": [
            ],
            "refutes": [
                "allPositive()",
                "allPositive(1, 4, 3)",
                "!allPositive(0, -3)",
                "x < 0i || allPositive(0, x)"
            ],
            "reachables": [
                "allPositive(0, x)",
                "!allPositive(0, x)"
            ]
        },
        {
            "test": "allPositiveCapture",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(v: Int, ...args: List<Int>): Bool { return args.allOf(pred(x) => x >= v); }",
            "typechk": [
            ],
            "refutes": [
                "allPositive(0i)"
            ],
            "reachables": [
                "allPositive(0i, 2, x)"
            ]
        },
        {
            "test": "sign",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function sign(x?: Int=0i): Int { var y: Int; if(x == 0i) { y = 0i; } else { y = (x > 0i) ? 1i : -1i; } return y; }",
            "typechk": [
                "sign() == 0n",
                "sign(3n) == 0i"
            ],
            "refutes": [
                "sign() == 0i",
                "sign(4i) == 1i",
                "sign(-4i) == -1i",
                "sign(x) <= 1i"
            ],
            "reachables": [
                "sign(x) == 1i",
                "sign(x) == 0i"
            ]
        },
        {
            "test": "recordtuple",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function doit(tup: #[Int, Bool], rec: #{f: String, g: Int}): Int { return tup.0 + rec.g; }",
            "typechk": [
                "doit(#[1n], #{f=\"yes\", g=0i}) == 1i",
                "doit(#[1n, true], #{g=0i}) == 1i",
                "doit(#[1n, true], #{f=\"yes\", g=0i}) == 1i",
                "doit(#[1i, true], #{f=true, g=0i}) == 1i",
                "doit(@[1i, true], #{f=\"yes\", g=0i}) == 0i",
                "doit(#[1i, true], @{f=\"yes\", g=0i}) == 0i"
            ],
            "refutes": [
                "doit(#[1i, true], #{f=\"yes\", g=0i}) == 1i",
                "doit(#[0, true], #{f=\"yes\", g=1}) == 1i",
                "(x > 4i) | (doit(#[x, true], #{f=\"yes\", g=x}) == 2i * x)"
            ],
            "reachables": [
                "doit(#[x, true], #{f=\"yes\", g=x}) == x",
                "x < 4i & doit(#[x, true], #{f=\"yes\", g=x + 1i}) == 5i"
            ]
        },
        {
            "test": "invariants",
            "src": "doc_examples/data_invariants.txt",
            "sig": "function main(x: String): Bool",
            "code": "",
            "typechk": [
                "NamedGreeting@{}.sayHello() === \"[type error]\""
            ],
            "refutes": [
                "GenericGreeting@{}.sayHello() === \"hello world\"",
                "GenericGreeting::instance.sayHello() === \"hello world\"",
                "NamedGreeting@{name=\"bob\"}.sayHello() === \"hello bob\""
            ],
            "reachables": [
                "NamedGreeting@{name=x}.sayHello() === \"hello bob\""
            ]
        },
        {
            "test": "validators",
            "src": "doc_examples/validators.txt",
            "sig": "function main(s: String): Bool",
            "code": "",
            "typechk": [
                "is3pt(\"12\")",
                "is3pt('98052' of ZipcodeUS)",
                "is3pt('3' of CSSpt)"
            ],
            "refutes": [
                "ZipcodeUS::accepts(\"98052-0000\")",
                "ZipcodeUS::accepts(\"98052\")",
                "is3pt('3pt' of CSSpt)"
            ],
            "reachables": [
                "!ZipcodeUS::accepts(\"98052-\")",
                "ZipcodeUS::accepts(s)",
                "!ZipcodeUS::accepts(s)",
                "is3pt(StringOf<CSSpt>::from(s))"
            ]
        }
    ]
}