{
    "suite": "readme",
    "tests": [
        {
            "test": "addchk",
            "src": null,
            "sig": "function main(x: Nat, y: Nat): Nat",
            "code": "function add2(x: Nat, y: Nat): Nat { return x + y; }",
            "typechk": [
                "add2(x, 0i)",
                "add2(x, 0f)"
            ],
            "infeasible": [
                {
                    "action": "add2(x, 0)",
                    "check": "res == x"
                },
                {
                    "action": "add2(0, y)",
                    "check": "res == y"
                },
                {
                    "action": "add2(x=2, y=3)",
                    "check": "res == 5n"
                },
                {
                    "action": "add2(y=2, 5)",
                    "check": "res == 7n"
                }
            ],
            "witness": [
                {
                    "action": "add2(0, y)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(x, y)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(x=x, 0)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(y=y, 1)",
                    "check": "res != 7n"
                }
            ], 
            "evaluates": [
                {
                    "action": "add2(x, y)",
                    "args": [2, 3],
                    "result": 5
                }
            ],
            "icpp": [
                {
                    "action": "add2(2, 3)",
                    "args": [2, 3],
                    "result": "5n"
                }
            ]
        },
        {
            "test": "allPositive",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(...args: List<Int>): Bool { return args.allOf(pred(x) => x >= 0i); }",
            "typechk": [
            ],
            "infeasible": [
                {
                    "action": "allPositive()",
                    "check": "res"
                },
                {
                    "action": "allPositive(1, 4, 3)",
                    "check": "res"
                },
                {
                    "action": "allPositive(0, -3)",
                    "check": "!res"
                },
                {
                    "action": "allPositive(0, x)",
                    "check": "x < 0i || res"
                }
            ],
            "witness": [
                {
                    "action": "allPositive(0, x)",
                    "check": "res"
                },
                {
                    "action": "allPositive(0, x)",
                    "check": "!res"
                }
            ],
            "evaluates": [
                {
                    "action": "allPositive(0, x, 5)",
                    "args": [2],
                    "result": true
                },
                {
                    "action": "allPositive(x, 7, 7)",
                    "args": [-1],
                    "result": false
                }
            ],
            "icpp": [
                {
                    "action": "allPositive()",
                    "args": [2],
                    "result": "true"
                },
                {
                    "action": "allPositive(0, x, 5)",
                    "args": [2],
                    "result": "true"
                },
                {
                    "action": "allPositive(0, x, 2)",
                    "args": [-1],
                    "result": "false"
                }
            ]
        },
        {
            "test": "sign",
            "src": null,
            "sig": "function main(x: Int): Int",
            "code": "function sign(x?: Int=0i): Int { var y: Int; if(x == 0i) { y = 0i; } else { y = (x > 0i) ? 1i : -1i; } return y; }",
            "typechk": [
                "sign(3n)"
            ],
            "infeasible": [
                {
                    "action": "sign()",
                    "check": "res == 0i"
                },
                {
                    "action": "sign(4i)",
                    "check": "res == 1i"
                },
                {
                    "action": "sign(-4i)",
                    "check": "res == -1i"
                },
                {
                    "action": "sign(x)",
                    "check": "res <= 1i"
                }
            ],
            "witness": [
                {
                    "action": "sign(x)",
                    "check": "res != 1i"
                },
                {
                    "action": "sign(x)",
                    "check": "res != 0i"
                }
            ],
            "evaluates": [
                {
                    "action": "sign(x)",
                    "args": [2],
                    "result": 1
                },
                {
                    "action": "sign(x)",
                    "args": [0],
                    "result": 0
                },
                {
                    "action": "sign(x)",
                    "args": [-5],
                    "result": -1
                }
            ],
            "icpp": [
                {
                    "action": "sign(x)",
                    "args": [2],
                    "result": "1i"
                },
                {
                    "action": "sign()",
                    "args": [0],
                    "result": "0i"
                },
                {
                    "action": "sign(x)",
                    "args": [0],
                    "result": "0i"
                },
                {
                    "action": "sign(x)",
                    "args": [-5],
                    "result": "-1i"
                }
            ]
        }
    ]
}