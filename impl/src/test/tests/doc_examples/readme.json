{
    "suite": "readme",
    "tests": [
        {
            "test": "addchk",
            "src": null,
            "sig": "function main(x: Nat, y: Nat): Nat",
            "code": "function add2(x: Nat, y: Nat): Nat { return x + y; }",
            "typechk": [
                "add2(x, 0i)",
                "add2(x, 0f)"
            ],
            "infeasible": [
                {
                    "action": "add2(x, 0)",
                    "check": "res == x"
                },
                {
                    "action": "add2(0, y)",
                    "check": "res == y"
                },
                {
                    "action": "add2(x=2, y=3)",
                    "check": "res == 5n"
                },
                {
                    "action": "add2(y=2, 5)",
                    "check": "res == 7n"
                }
            ],
            "witness": [
                {
                    "action": "add2(0, y)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(x, y)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(x=x, 0)",
                    "check": "res != 3n"
                },
                {
                    "action": "add2(y=y, 1)",
                    "check": "res != 7n"
                }
            ], 
            "evaluates": [
                {
                    "action": "add2(x, y)",
                    "args": [2, 3],
                    "result": 5
                }
            ],
            "icpp": [
                {
                    "action": "add2(2, 3)",
                    "args": [2, 3],
                    "result": "5n"
                }
            ]
        },
        {
            "test": "allPositive",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(...args: List<Int>): Bool { return args.allOf(pred(x) => x >= 0i); }",
            "typechk": [
            ],
            "infeasible": [
                {
                    "action": "allPositive()",
                    "check": "res"
                },
                {
                    "action": "allPositive(1, 4, 3)",
                    "check": "res"
                },
                {
                    "action": "allPositive(0, -3)",
                    "check": "!res"
                },
                {
                    "action": "allPositive(0, x)",
                    "check": "x < 0i || res"
                }
            ],
            "witness": [
                {
                    "action": "allPositive(0, x)",
                    "check": "res"
                },
                {
                    "action": "allPositive(0, x)",
                    "check": "!res"
                }
            ],
            "evaluates": [
                {
                    "action": "allPositive(0, x, 5)",
                    "args": [2],
                    "result": true
                },
                {
                    "action": "allPositive(x, 7, 7)",
                    "args": [-1],
                    "result": false
                }
            ],
            "icpp": [
                {
                    "action": "allPositive()",
                    "args": [2],
                    "result": "true"
                },
                {
                    "action": "allPositive(0, x, 5)",
                    "args": [2],
                    "result": "true"
                },
                {
                    "action": "allPositive(0, x, 2)",
                    "args": [-1],
                    "result": "false"
                }
            ]
        },
        {
            "test": "allPositiveCapture",
            "src": null,
            "sig": "function main(x: Int): Bool",
            "code": "function allPositive(v: Int, ...args: List<Int>): Bool { return args.allOf(pred(x) => x >= v); }",
            "typechk": [
            ],
            "infeasible": [
                {
                    "action": "allPositive(0i)",
                    "check": "res"
                }
            ],
            "witness": [
                {
                    "action": "allPositive(0i, 2i, x)",
                    "check": "res"
                }
            ]
        },
        {
            "test": "recordtuple",
            "src": null,
            "sig": "function main(x: Int): Int",
            "code": "function doit(tup: [Int, Bool], rec: {f: String, g: Int}): Int { return tup.0 + rec.g; }",
            "typechk": [
                "doit([1n], {f=\"yes\", g=0i}) == 1i",
                "doit([1n, true], {g=0i}) == 1i",
                "doit([1n, true], {f=\"yes\", g=0i}) == 1i",
                "doit([1i, true], {f=true, g=0i}) == 1i"
            ],
            "infeasible": [
                {
                    "action": "doit([1i, true], {f=\"yes\", g=0i})",
                    "check": "res == 1i"
                },
                {
                    "action": "doit([0, true], {f=\"yes\", g=1})",
                    "check": "res == 1i"
                },
                {
                    "action": "doit([x, true], {f=\"yes\", g=x})",
                    "check": "(x > 4i) || res == 2i * x"
                }
            ],
            "witness": [
                {
                    "action": "doit([x, true], {f=\"yes\", g=x})",
                    "check": "res == x"
                },
                {
                    "action": "doit([x, true], {f=\"yes\", g=x + 1i})",
                    "check": "x < 4i && res == 5i"
                }
            ]
        },
        {
            "test": "sign",
            "src": null,
            "sig": "function main(x: Int): Int",
            "code": "function sign(x?: Int=0i): Int { var y: Int; if(x == 0i) { y = 0i; } else { y = (x > 0i) ? 1i : -1i; } return y; }",
            "typechk": [
                "sign(3n)"
            ],
            "infeasible": [
                {
                    "action": "sign()",
                    "check": "res == 0i"
                },
                {
                    "action": "sign(4i)",
                    "check": "res == 1i"
                },
                {
                    "action": "sign(-4i)",
                    "check": "res == -1i"
                },
                {
                    "action": "sign(x)",
                    "check": "res <= 1i"
                }
            ],
            "witness": [
                {
                    "action": "sign(x)",
                    "check": "res != 1i"
                },
                {
                    "action": "sign(x)",
                    "check": "res != 0i"
                }
            ],
            "evaluates": [
                {
                    "action": "sign(x)",
                    "args": [2],
                    "result": 1
                },
                {
                    "action": "sign(x)",
                    "args": [0],
                    "result": 0
                },
                {
                    "action": "sign(x)",
                    "args": [-5],
                    "result": -1
                }
            ],
            "icpp": [
                {
                    "action": "sign(x)",
                    "args": [2],
                    "result": "1i"
                },
                {
                    "action": "sign()",
                    "args": [0],
                    "result": "0i"
                },
                {
                    "action": "sign(x)",
                    "args": [0],
                    "result": "0i"
                },
                {
                    "action": "sign(x)",
                    "args": [-5],
                    "result": "-1i"
                }
            ]
        },
        {
            "test": "invariants",
            "src": "doc_examples/data_invariants.txt",
            "sig": "function main(x: String): String",
            "code": "",
            "typechk": [
                "NamedGreeting@{}.sayHello() === \"[type error]\""
            ],
            "infeasible": [
                {
                    "action": "GenericGreeting@{}.sayHello()",
                    "check": "res === \"hello world\""
                },
                {
                    "action": "GenericGreeting::instance.sayHello()",
                    "check": "res === \"hello world\""
                },
                {
                    "action": "NamedGreeting@{name=\"bob\"}.sayHello()",
                    "check": "res === \"hello bob\""
                }
            ],
            "witness": [
                {
                    "action": "NamedGreeting@{name=x}.sayHello()",
                    "check": "res === \"hello bob\""
                }
            ]
        },
        {
            "test": "adtpp",
            "src": "doc_examples/adt.txt",
            "sig": "function main(cv: LConst): Bool",
            "code": "",
            "typechk": [
            ],
            "infeasible": [
                {
                    "action": "AndOp@{2, cv, LConst@{1, false}}.evaluate[recursive]()",
                    "check": "!res"
                },
                {
                    "action": "OrOp@{2, cv, NotOp@{1, cv}}.evaluate[recursive]()",
                    "check": "res"
                }
            ],
            "witness": [
                {
                    "action": "NotOp@{2, cv}.evaluate[recursive]()",
                    "check": "res"
                },
                {
                    "action": "OrOp@{2, cv, LConst@{1, false}}.evaluate[recursive]()",
                    "check": "res"
                }
            ]
        },
        {
            "test": "uniontypes",
            "src": null,
            "sig": "function main(y: Bool | Int): String",
            "code": "function printType(x: Bool | Int | String | None): String { return match(x) {| Bool   => \"b\" | Int => \"i\" | String => \"s\" | _ => \"n\" |}; }",
            "typechk": [
                "printType(5I)"
            ],
            "infeasible": [
                {
                    "action": "printType(5i)",
                    "check": "res === \"i\""
                },
                {
                    "action": "printType(true)",
                    "check": "res === \"b\""
                },
                {
                    "action": "printType(none)",
                    "check": "res === \"n\""
                }
            ],
            "witness": [
                {
                    "action": "printType(y)",
                    "check": "res === \"i\""
                },
                {
                    "action": "printType(y)",
                    "check": "res !== \"i\""
                }
            ]
        },
        {
            "test": "validators",
            "src": "doc_examples/validators.txt",
            "sig": "function main(s: String): Bool",
            "code": "",
            "typechk": [
                "is3pt(\"12\")",
                "is3pt('98052'#ZipcodeUS)",
                "is3pt('3'#CSSpt)",
                "isIOCode(\"IO\")"
            ],
            "infeasible": [
                {
                    "action": "ZipcodeUS::accepts(\"98052-0000\")",
                    "check": "res"
                },
                {
                    "action": "ZipcodeUS::accepts(\"98052\")",
                    "check": "res"
                },
                {
                    "action": "is3pt('3pt'#CSSpt)",
                    "check": "res"
                },
                {
                    "action": "isIOCode('Input'#StatusCode)",
                    "check": "res"
                },
                {
                    "action": "StatusCode::parse(\"Input\").isErr()",
                    "check": "res"
                },
                {
                    "action": "isIOCode('Network'#StatusCode)",
                    "check": "!res"
                },
                {
                    "action": "isIOCode('IO'#StatusCode)",
                    "check": "res"
                },
                {
                    "action": "('IO'(StatusCode)).code == 1i",
                    "check": "res"
                }
            ],
            "witness": [
                {
                    "action": "ZipcodeUS::accepts(\"98052-\")",
                    "check": "res"
                },
                {
                    "action": "ZipcodeUS::accepts(s)",
                    "check": "res"
                },
                {
                    "action": "!ZipcodeUS::accepts(s)",
                    "check": "res"
                },
                {
                    "action": "is3pt(StringOf<CSSpt>::parse(s))",
                    "check": "res"
                },
                {
                    "action": "StatusCode::parse(s).isOk()",
                    "check": "res"
                },
                {
                    "action": "StatusCode::parse(s).result().code == 1i",
                    "check": "res"
                },
                {
                    "action": "StatusCode::parse(s).result().code == 1i",
                    "check": "!res"
                }
            ]
        }
    ]
}