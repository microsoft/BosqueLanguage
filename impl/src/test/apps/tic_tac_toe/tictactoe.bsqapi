//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace Main;

////
//TEMP
//const empty_board: Board = Board::createEmpty{};
//const no_win_2: Board = Main::empty_board.setCellMark(BoardPostion{1, 1}, PlayerMark::x).setCellMark(BoardPostion{0, 2}, PlayerMark::o);
//const no_win_4: Board = Main::no_win_2.setCellMark(BoardPostion{1, 2}, PlayerMark::x).setCellMark(BoardPostion{0, 1}, PlayerMark::o);
//const win_5: Board = Main::no_win_4.setCellMark(BoardPostion{1, 0}, PlayerMark::x);
//const blocked_5: Board = Main::no_win_4.setCellMark(BoardPostion{0, 0}, PlayerMark::x);

entrypoint function doit(): Bool {
    let le = Board::createEmpty{};
    _debug(le);

    let ll = le.setCellMark(BoardPostion{1, 1}, PlayerMark::x);
    _debug(ll);
    
    return true;
    //return !Main::no_win_2.hasWinner();
}
////

entrypoint function getInitialBoard(): Board {
    return Board::createEmpty{};
}

entrypoint function hasWinner(b: Board): Bool {
    let winner = b.checkAnyWinner();
    return winner === PlayerMark::x || winner === PlayerMark::o;
}

entrypoint function getWinner(b: Board): PlayerMark? {
    return b.checkAnyWinner();
}

entrypoint function isMoveLegal(b: Board, cell: BoardPostion): Bool {
    return b.isCellEmpty(cell);
}

entrypoint function makeExplicitMove(b: Board, cell: BoardPostion, mark: PlayerMark): Result<[Board, Bool], String> {
    if(!b.isCellEmpty(cell)) {
        return err("Location is Occupied");
    }
    else {
        let bb = b.setCellMark(cell, mark);
        let winner = b.checkAnyWinner();

        return ok([bb, winner === PlayerMark::x || winner === PlayerMark::o]);
    }
}
