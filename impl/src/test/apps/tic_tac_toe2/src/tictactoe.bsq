//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace Main;

enum PlayerMark {
    empty,
    x,
    o
}

typedef Cells = List<PlayerMark>;

entity BoardPostion provides APIType {
    //From top left corner -- 0 indexed
    //r0c0 r0c1 r0c2 
    //r1c0 r1c1 r1c2
    //r2c0 r2c1 r2c2

    field rowpos: Nat;
    field colpos: Nat;

    invariant $rowpos < 3n;
    invariant $colpos < 3n;

    const r0c0: BoardPostion = BoardPostion{0, 0};
    const r0c1: BoardPostion = BoardPostion{0, 1};
    const r0c2: BoardPostion = BoardPostion{0, 2};
    
    const r1c0: BoardPostion = BoardPostion{1, 0};
    const r1c1: BoardPostion = BoardPostion{1, 1};
    const r1c2: BoardPostion = BoardPostion{1, 2};

    const r2c0: BoardPostion = BoardPostion{2, 0};
    const r2c1: BoardPostion = BoardPostion{2, 1};
    const r2c2: BoardPostion = BoardPostion{2, 2};
}

entity Board provides APIType {
    //Board is a map from cells to marks (or not in map if cell is unoccupied)
    field cells: Cells;

    invariant test $cells.size() == 9n;

    factory function createEmpty(): { cells: Cells } {
        return 
        {
            cells=List<PlayerMark>{
                PlayerMark::empty, PlayerMark::empty, PlayerMark::empty,
                PlayerMark::empty, PlayerMark::empty, PlayerMark::empty,
                PlayerMark::empty, PlayerMark::empty, PlayerMark::empty
            }
        };
    }

    factory function create4(): { cells: Cells } {
        return 
        {
            cells=List<PlayerMark>{
                PlayerMark::x, PlayerMark::x, PlayerMark::empty,
                PlayerMark::o, PlayerMark::o, PlayerMark::empty,
                PlayerMark::empty, PlayerMark::empty, PlayerMark::empty
            }
        };
    }

    method isCellEmpty(c: BoardPostion): Bool {
        return this.cells.get((3n*c.rowpos) + c.colpos) === PlayerMark::empty;
    }

    method getCellMark(c: BoardPostion): PlayerMark {
        return this.cells.get((3n*c.rowpos) + c.colpos);
    }

    method setCellMark(c: BoardPostion, mark: PlayerMark): Board 
        requires this.isCellEmpty(c);
    {
        return this.{cells=$cells.set((3n*c.rowpos) + c.colpos, mark)};
    }

    private method check3(c1: BoardPostion, c2: BoardPostion, c3: BoardPostion, player: PlayerMark): Bool {
        return this.getCellMark(c1) === player && this.getCellMark(c2) === player && this.getCellMark(c3) === player;
    }

    method checkWinner(player: PlayerMark): Bool {
        //check rows across
        if(this.check3(BoardPostion::r0c0, BoardPostion::r0c1, BoardPostion::r0c2, player) 
            || this.check3(BoardPostion::r1c0, BoardPostion::r1c1, BoardPostion::r1c2, player) 
            || this.check3(BoardPostion::r2c0, BoardPostion::r2c1, BoardPostion::r2c2, player)) {
            return true;
        }

        //check columns down
        if(this.check3(BoardPostion::r0c0, BoardPostion::r1c0, BoardPostion::r2c0, player) 
            || this.check3(BoardPostion::r0c1, BoardPostion::r1c1, BoardPostion::r2c1, player) 
            || this.check3(BoardPostion::r0c2, BoardPostion::r1c2, BoardPostion::r2c2, player)) {
            return true;
        }

        //check diagonals
        if(this.check3(BoardPostion::r0c0, BoardPostion::r1c1, BoardPostion::r2c2, player) 
            || this.check3(BoardPostion::r0c2, BoardPostion::r1c1, BoardPostion::r2c0, player)) {
            return true;
        }

        return false;
    }

    method checkDraw(): Bool {
        return !this.cells.contains(PlayerMark::empty);
    }

    method checkAnyWinner(): PlayerMark? {
        if(this.checkWinner(PlayerMark::x)) {
            return PlayerMark::x;
        }
        elif(this.checkWinner(PlayerMark::o)) {
            return PlayerMark::o;
        }
        elif(this.checkDraw()) {
            return PlayerMark::empty;
        }
        else {
            return none;
        }
    }

    method hasWinner(): Bool {
        let winner = this.checkAnyWinner();
        return winner === PlayerMark::x || winner === PlayerMark::o;
    }
}
