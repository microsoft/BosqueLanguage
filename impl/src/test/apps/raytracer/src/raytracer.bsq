//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace Main;

entity RayTracer
{
    field screenWidth: Nat;
    field screenHeight: Nat;

    const maxDepth: Nat = 5n;

/*
    function RenderColors(scene: Scene): List<List<Color>> {
        for(int y = 0; y < screenHeight; y++) {
            int stride = y * screenWidth;
            Camera camera = scene.Camera;
			
            for(int x = 0; x < screenWidth; x++) {
                Color color = TraceRay(new Ray(camera.Pos, GetPoint(x, y, camera)), scene, 0);
                rgb[x + stride] = color.ToInt32();
            }
        }
    }
*/

    method renderPixel(scene: Scene, x: Nat, y: Nat): Color {
        return this.traceRay[recursive](Ray{scene.camera.pos, this.getPoint(x.toFloat(), y.toFloat(), scene.camera)}, scene, 0n);
    }

    function createDefaultScene(): Scene {
        let things =  List<SceneObject>{
            Sphere{Scene::matteShiny, 0n, Vector{-0.5f, 1.0f, 1.5f}, 0.5f},
            Sphere{Scene::shiny, 1n, Vector{0.0f, 1.0f, -0.25f}, 1.0f},
            Plane{Scene::checkerBoard, 2n, Vector{0.0f, 1.0f, 0.0f}, 0.0f}
        };

        let lights = List<Light>{
            Light{Vector{-2.0f, 2.5f, 0.0f}, Color{0.5f, 0.45f, 0.41f}},
            Light{Vector{2.0f, 4.5f, 2.0f}, Color{0.99f, 0.95f, 0.8f}}
        };

        let camera = Camera::create(Vector{2.75f, 2.0f, 3.75f}, Vector{-0.6f, 0.5f, 0.0f});

        return Scene{things, lights, camera};
	}

	method minIntersection(ray: Ray, scene: Scene): ISect? {
        let imin = scene.things.argMinOrNoneOf<ISect>(
            fn(thing) => thing.intersect(ray),
            pred(a, b) => a.dist < b.dist
        );

        _debug(imin);
		return imin;
	}

    method testRay(ray: Ray, scene: Scene): Float {
        let  isect = this.minIntersection(ray, scene);

        if(isect === none) {
            return 0.0f;
        }
        else {
            return isect.dist;
        }
    }

    recursive method traceRay(ray: Ray, scene: Scene, depth: Nat): Color {
        let isect = this.minIntersection(ray, scene);

        if(isect === none) {
            return Color::background;
        }
        else {
            return this.shade[recursive](isect, scene, depth);
        }
    }

    method getNaturalColor(thing: SceneObject, pos: Vector, norm: Vector, rd: Vector, scene: Scene): Color {
        let ret = scene.lights.reduce<Color>(Color{0.0f, 0.0f, 0.0f}, fn(acc, light) => {
            let ldis = light.pos - pos;
            let livec = ldis.norm();
            let neatIsect = this.testRay(Ray{pos, livec}, scene);
            let isInShadow = !((neatIsect > ldis.mag()) || (neatIsect == 0.0f));

            if(isInShadow) {
                return acc;
            }
            else {
                let illum = %dotprod%(livec, norm);
                let lcolor = illum > 0.0f ? (illum * light.color) : Color{0.0f, 0.0f, 0.0f};
                let specular = %dotprod%(livec, rd.norm());
                let scolor = specular > 0.0f ? (specular.pow(thing.surface.roughness) * light.color) : Color{0.0f, 0.0f, 0.0f};

                return acc + (thing.surface.diffuse * lcolor) + (thing.surface.specular * scolor);
            }
        });

        return ret;
    }

    recursive method getReflectionColor(thing: SceneObject, pos: Vector, norm: Vector, rd: Vector, scene: Scene, depth: Nat): Color {
        return thing.surface.reflect * this.traceRay[recursive](Ray{pos, rd}, scene, depth + 1n);
    }

    recursive method shade(isect: ISect, scene: Scene, depth: Nat): Color {
        let d = isect.ray.dir;
        let pos = (isect.dist * isect.ray.dir) + isect.ray.start;
        let normal = isect.thing.normal(pos);
        let reflectDir = d - ((2.0f * %dotprod%(normal, d)) * normal);
        let ret = Color::defaultColor + this.getNaturalColor(isect.thing, pos, normal, reflectDir, scene);

        if(depth >= RayTracer::maxDepth) {
            return ret + Color{0.5f, 0.5f, 0.5f};
        }
        else {
            return ret + this.getReflectionColor[recursive](isect.thing, pos + (0.001f * reflectDir), normal, reflectDir, scene, depth);
        }
    }

    method recenterX(x: Float): Float {
        return (x - (this.screenWidth.toFloat() / 2.0f)) / (2.0f * this.screenWidth.toFloat());
    }

    method recenterY(y: Float): Float {
		return -(y - (this.screenHeight.toFloat() / 2.0f)) / (2.0f * this.screenHeight.toFloat());
    }

    method getPoint(x: Float, y: Float, camera: Camera): Vector {
	    return (camera.forward + (this.recenterX(x) * camera.right) + (this.recenterY(y) * camera.up)).norm();
    }
}
