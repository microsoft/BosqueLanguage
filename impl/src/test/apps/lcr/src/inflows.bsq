namespace NSInflows;

import NSBasics;
import NSCurrency;
import NSCountry;
import NSCounterParty;
import NSFlows;
import NSMaturityBucket;
import NSRules;

entity Rule20a1 provides NSRules::Rule {
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let remainingDays = daysToMaturity(this.t, flow.maturityDate);

        return (flow.ruleCode === "I.A.3.1" || flow.ruleCode === "I.A.3.2" || flow.ruleCode === "I.A.3.3" || flow.ruleCode === "I.A.3.4" || flow.ruleCode === "I.A.3.5" || flow.ruleCode === "I.A.3.6" || flow.ruleCode === "I.A.3.7" || flow.ruleCode === "I.A.3.8")
            && remainingDays == 0i;
    }
}

entity Rule20a3dash6 provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        let aopts = (flow.ruleCode === "I.A.1" || flow.ruleCode === "I.A.2")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level1Assets
            && flow.isTreasuryControl;

        let sopts = (flow.ruleCode === "I.S.1" || flow.ruleCode === "I.S.2" || flow.ruleCode === "I.S.4")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level1Assets
            && flow.isTreasuryControl
            && flow.isUnencumbered;

        return aopts || sopts;
    }
}

entity Rule22b3L2a provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "S.I.19"
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2aAssets;
    }
}

entity Rule22b3L2b provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "S.I.19"
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2bAssets;
    }
}

entity Rule20b provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        let aopts = (flow.ruleCode === "I.A.1" || flow.ruleCode === "I.A.2")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2aAssets
            && flow.isTreasuryControl;

        let sopts = (flow.ruleCode === "I.S.1" || flow.ruleCode === "I.S.2" || flow.ruleCode === "I.S.4")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2aAssets
            && flow.isTreasuryControl
            && flow.isUnencumbered;

        return aopts || sopts;
    }
}

entity Rule20c provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        let aopts = (flow.ruleCode === "I.A.1" || flow.ruleCode === "I.A.2")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2bAssets
            && flow.isTreasuryControl;

        let sopts = (flow.ruleCode === "I.S.1" || flow.ruleCode === "I.S.2" || flow.ruleCode === "I.S.4")
            && flow.collateralClass === NSBasics::AssetCategoryCodes::level2bAssets
            && flow.isTreasuryControl
            && flow.isUnencumbered;

        return aopts || sopts;
    }
}

entity Rule33b provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "I.O.7";
    }
}

entity Rule33c provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        let rdays = daysToMaturity(this.t, flow.maturityDate);

        let uopts = (flow.ruleCode === "I.U.5" || flow.ruleCode === "I.U.6")
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && (0i < rdays && rdays <= 30i);

        let sopts = (flow.ruleCode === "I.S.1" || flow.ruleCode === "I.S.2" || flow.ruleCode === "I.S.4" || flow.ruleCode === "I.S.5" || flow.ruleCode === "I.S.6" || flow.ruleCode === "I.S.7")
            && cpty.counterpartyType === NSCounterParty::CounterpartyType::retail
            && (0i < rdays && rdays <= 30i);

        return uopts || sopts;
    }
}

entity Rule33d1 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    
    const acceptedCounterParty: List<NSCounterParty::CounterpartyType> = List<NSCounterParty::CounterpartyType>{
        NSCounterParty::CounterpartyType::centralBank,
        NSCounterParty::CounterpartyType::bank,
        NSCounterParty::CounterpartyType::supervisedNonBankFinancialEntity,
        NSCounterParty::CounterpartyType::debtIssuingSpecialPurposeEntity,
        NSCounterParty::CounterpartyType::otherFinancialEntity
    };

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        
        let uopts = (flow.ruleCode === "I.U.1" || flow.ruleCode === "I.U.2" || flow.ruleCode === "I.U.4");

        let uoptscp = (flow.ruleCode === "I.U.5" || flow.ruleCode === "I.U.6")
            && Rule33d1::acceptedCounterParty.contains(cpty.counterpartyType);

        return uopts || uoptscp;
    }
}

entity Rule33d2 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    
    const acceptedCounterParty: List<NSCounterParty::CounterpartyType> = List<NSCounterParty::CounterpartyType>{
        NSCounterParty::CounterpartyType::nonFinancialCorporate,
        NSCounterParty::CounterpartyType::sovereign,
        NSCounterParty::CounterpartyType::governmentSponsoredEntity,
        NSCounterParty::CounterpartyType::publicSectorEntity,
        NSCounterParty::CounterpartyType::multilateralDevelopmentBank,
        NSCounterParty::CounterpartyType::otherSupranational,
        NSCounterParty::CounterpartyType::other
    };

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        
        return (flow.ruleCode === "I.U.5" || flow.ruleCode === "I.U.6")
            && Rule33d2::acceptedCounterParty.contains(cpty.counterpartyType);
    }
}

entity Rule33e provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "I.O.6" || flow.ruleCode === "I.O.8";
    }
}

function inflowRules(counterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime): List<Rule> {
    return List<Rule>{ 
        Rule20a1{"20(a)(1)", 1.0f, t},
        Rule20a3dash6{"20(a)(3)-(6)", 1.0f},
        Rule22b3L2a{"22(b)(3)L1", -1.0f},
        Rule22b3L2a{"22(b)(3)L2a", -0.85f},
        Rule22b3L2b{"22(b)(3)L2b", -0.5f},
        Rule20b{"20(b)", 0.85f},
        Rule20c{"20(c)", 0.5f},
        Rule33b{"33(b)", 1.0f},
        Rule33c{"33(c)", 0.5f, counterparty, t},
        Rule33d1{"33(d)(1)", 1.0f, counterparty},
        Rule33d2{"33(d)(2)", 1.0f, counterparty},
        Rule33e{"33(e)", 1.0f}
    };
}

