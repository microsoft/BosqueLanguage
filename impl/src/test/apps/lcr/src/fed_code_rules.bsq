namespace Main;

/*

type alias RuleCode =
    List String


toString : RuleCode -> String
toString rulecode =
    rulecode |> String.join "."


type CentralBankSubProduct
    = FRB
    | SNB
    | BOE
    | ECB
    | BOJ
    | RBA
    | BOC
    | OCB
    | Other_Cash_Currency_And_Coin


calculate : Dict PartyID CentralBank -> List Cashflow -> List ( Cashflow, RuleCode )
calculate centralBanks cashflows =
    let
        firstPass : List ( Cashflow, RuleCode )
        firstPass =
            cashflows
                |> List.map (\cashflow -> ( cashflow, classify centralBanks cashflow ))
    in
    firstPass


classify : Dict PartyID CentralBank -> Cashflow -> RuleCode
classify centralBanks cashflow =
    let
        partyIsCentralBank : Maybe CentralBank
        partyIsCentralBank =
            Dict.get cashflow.partyId centralBanks
    in
    -- It is a central bank
    case partyIsCentralBank of
        Just centralBank ->
            rules_I_A cashflow.tenQLevel4 centralBank

        notCentralBank ->
            if String.toUpper cashflow.tenQLevel5 == "CASH AND DUE FROM BANKS" || String.toUpper cashflow.tenQLevel5 == "OVERNIGHT AND TERM DEPOSITS" || String.toUpper cashflow.tenQLevel5 == "CASH EQUIVALENTS" then
                rule_I_U cashflow.amountUSD cashflow.legalEntity.country cashflow.currency cashflow.counterparty.country

            else
                []



--rules_I_A : TenQLevel4 -> CentralBank -> Maybe RuleCode


rules_I_A : String -> CentralBank -> RuleCode
rules_I_A tenQLevel4 centralBank =
    List.append [ "I", "A" ]
        (if tenQLevel4 == segregatedCash then
            rule_I_A_4 centralBank

         else
            rule_I_A_3 centralBank
        )


rule_I_A_3 : CentralBank -> RuleCode
rule_I_A_3 centralBank =
    List.append [ "3" ]
        (case centralBankToSubProduct centralBank of
            FRB ->
                [ "1" ]

            SNB ->
                [ "2" ]

            BOE ->
                [ "3" ]

            ECB ->
                [ "4" ]

            BOJ ->
                [ "5" ]

            RBA ->
                [ "6" ]

            BOC ->
                [ "7" ]

            OCB ->
                [ "8" ]

            Other_Cash_Currency_And_Coin ->
                [ "9" ]
        )


rule_I_A_4 : CentralBank -> RuleCode
rule_I_A_4 centralBank =
    List.append [ "4" ]
        (case centralBankToSubProduct centralBank of
            FRB ->
                [ "1" ]

            SNB ->
                [ "2" ]

            BOE ->
                [ "3" ]

            ECB ->
                [ "4" ]

            BOJ ->
                [ "5" ]

            RBA ->
                [ "6" ]

            BOC ->
                [ "7" ]

            OCB ->
                [ "8" ]

            Other_Cash_Currency_And_Coin ->
                [ "9" ]
        )



--rule_I_U : AdjustedAmountUSD -> Country -> Currency -> Country -> RuleCode


rule_I_U : Float -> Country -> Currency -> Country -> RuleCode
rule_I_U adjustedAmountUSD legalEntityCountry cashflowCurrency counterpartyCountry =
    let
        tail : String
        tail =
            if netCashUSD adjustedAmountUSD >= 0 then
                if isOnshore legalEntityCountry cashflowCurrency counterpartyCountry then
                    "1"

                else
                    "2"

            else
                "4"
    in
    List.append [ "I", "U" ] [ tail ]


centralBankToSubProduct : CentralBank -> CentralBankSubProduct
centralBankToSubProduct cb =
    case cb of
        Federal_Reserve_Bank ->
            FRB

        Swiss_National_Bank ->
            SNB

        Bank_of_England ->
            BOE

        European_Central_Bank ->
            ECB

        Bank_of_Japan ->
            BOJ

        Reserve_Bank_of_Australia ->
            RBA

        Bank_of_Canada ->
            BOC

        -- TODO What maps to Other Cash Currency and Coin????
        _ ->
            OCB


segregatedCash : String
segregatedCash =
    "Seg Cash"


isCentralBank : Maybe CentralBank -> Bool
isCentralBank m =
    m |> Maybe.map (\x -> True) |> Maybe.withDefault False


isOnshore : Country -> Currency -> Country -> Bool
isOnshore legalEntityCountry cashflowCurrency counterpartyCountry =
    Just legalEntityCountry == Currency.country cashflowCurrency && legalEntityCountry == counterpartyCountry



-- Group across same Entity, Party ID, Currency, and Product Type


netCashUSD : AdjustedAmountUSD -> Float
netCashUSD adjustedAmountUSD =
    -- TODO the calculation
    adjustedAmountUSD
*/