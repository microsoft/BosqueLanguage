namespace NSOutflows;

import NSBasics;
import NSCurrency;
import NSCountry;
import NSCounterParty;
import NSFlows;
import NSMaturityBucket;
import NSRules;

entity Rule32a1 provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return (flow.ruleCode === "O.D.1" || flow.ruleCode === "O.D.2") && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32a2 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        let isod1_or_2 = (flow.ruleCode === "O.D.1" || flow.ruleCode === "O.D.2") && flow.insured !== InsuranceType::fdic;

        let isod3 = flow.ruleCode === "O.D.3" 
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness);
    
        return isod1_or_2 || isod3;
    }
}

entity Rule32a3 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.12" 
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness) 
            && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32a4 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.12" 
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness) 
            && flow.insured !== InsuranceType::fdic;
    }
}

entity Rule32a5 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return (flow.ruleCode === "O.D.13" || flow.ruleCode === "O.W.18")
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness);
    }
}

entity Rule32b provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return (flow.ruleCode === "O.W.1" || flow.ruleCode === "O.W.2" || flow.ruleCode === "O.W.4" || flow.ruleCode === "O.W.21");
    }
}

entity Rule32c provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "O.O.20";
    }
}

entity Rule32d provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "O.O.6";
    }
}

entity Rule32e provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "O.O.6";
    }
}

entity Rule32f provides NSRules::Rule {
    override method applies(flow: NSFlows::Flow): Bool {
        return flow.ruleCode === "O.O.6";
    }
}

entity Rule32g1 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        let remainingDays = daysToMaturity(t, flow.maturityDate);

        return flow.ruleCode === "O.D.7"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && (0i < remainingDays && remainingDays <= 30i);
    }
}

entity Rule32g2 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        let remainingDays = daysToMaturity(t, flow.maturityDate);

        return flow.ruleCode === "O.D.7"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && remainingDays <= 30i;
    }
}

entity Rule32g3 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        let remainingDays = daysToMaturity(t, flow.maturityDate);

        return flow.ruleCode === "O.D.7"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && remainingDays == 0i
            && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32g4 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;
    field t: DateTime;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);
        let remainingDays = daysToMaturity(t, flow.maturityDate);

        return flow.ruleCode === "O.D.7"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && remainingDays == 0i
            && flow.insured !== InsuranceType::fdic;
    }
}

entity Rule32g5 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.11"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32g6 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.11"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && flow.insured !== InsuranceType::fdic;
    }
}

entity Rule32g7 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.8"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32g8 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return flow.ruleCode === "O.D.9"
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && flow.insured === InsuranceType::fdic;
    }
}

entity Rule32g9 provides NSRules::Rule {
    field toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>;

    override method applies(flow: NSFlows::Flow): Bool {
        let cpty = this.toCounterparty.get(flow.counterpartyId);

        return (flow.ruleCode === "O.D.8" || flow.ruleCode === "O.D.9")
            && (cpty.counterpartyType === NSCounterParty::CounterpartyType::retail || cpty.counterpartyType === NSCounterParty::CounterpartyType::smallBusiness)
            && flow.insured !== InsuranceType::fdic;
    }
}


isRule32h3 : (Flow -> Counterparty) -> Flow -> Bool
isRule32h3 counterparty flow =
    let
        cpty : Counterparty
        cpty =
            counterparty flow
    in
    flow.ruleCode
        == [ "O", "D", "4" ]
        && List.member cpty.counterpartyType
            [ NonFinancialCorporate
            , Sovereign
            , CentralBank
            , GovernmentSponsoredEntity
            , PublicSectorEntity
            , MultilateralDevelopmentBank
            , OtherSupranational
            , Bank
            , SupervisedNonBankFinancialEntity
            , DebtIssuingSpecialPurposeEntity
            , OtherFinancialEntity
            , Other
            ]
        && flow.insured
        == FDIC


isRule32h4 : (Flow -> Counterparty) -> Flow -> Bool
isRule32h4 counterparty flow =
    let
        cpty : Counterparty
        cpty =
            counterparty flow
    in
    flow.ruleCode
        == [ "O", "D", "4" ]
        && List.member cpty.counterpartyType
            [ NonFinancialCorporate
            , Sovereign
            , CentralBank
            , GovernmentSponsoredEntity
            , PublicSectorEntity
            , MultilateralDevelopmentBank
            , OtherSupranational
            , Bank
            , SupervisedNonBankFinancialEntity
            , DebtIssuingSpecialPurposeEntity
            , OtherFinancialEntity
            , Other
            ]
        && flow.insured
        /= FDIC


isRule32l : Flow -> Bool
isRule32l flow =
    flow.ruleCode == [ "O", "O", "22" ]


isRule33f1iii : LocalDate -> Flow -> Bool
isRule33f1iii t flow =
    let
        days : Int
        days =
            daysToMaturity t flow.effectiveMaturityDate
    in
    List.member flow.ruleCode [ [ "I", "S", "1" ], [ "I", "S", "2" ], [ "I", "S", "5" ], [ "I", "S", "6" ], [ "I", "S", "7" ] ]
        && flow.assetType
        == Level1Assets
        && (0 < days && days <= 30)


isRule33f1iv : LocalDate -> Flow -> Bool
isRule33f1iv t flow =
    let
        days : Int
        days =
            daysToMaturity t flow.effectiveMaturityDate
    in
    List.member flow.ruleCode [ [ "I", "S", "1" ], [ "I", "S", "2" ], [ "I", "S", "5" ], [ "I", "S", "6" ], [ "I", "S", "7" ] ]
        && flow.assetType
        == Level2aAssets
        && (0 < days && days <= 30)




outflowRules : (Flow -> Counterparty) -> LocalDate -> List (Rule Flow)
outflowRules counterparty t =
    [ Rule "32(a)(1)" 0.03 isRule32a1
    , Rule "32(a)(2)" 0.1 (isRule32a2 counterparty)
    , Rule "32(a)(3)" 0.2 (isRule32a3 counterparty)
    , Rule "32(a)(4)" 0.4 (isRule32a4 counterparty)
    , Rule "32(a)(5)" 0.4 (isRule32a5 counterparty)
    , Rule "32(b)" 1.0 isRule32b
    , Rule "32(c)" 0.2 isRule32c
    , Rule "32(d)" 0.1 isRule32d
    , Rule "32(e)" 0.0 isRule32e
    , Rule "32(f)" 0.0 isRule32f
    , Rule "32(g)(1)" 0.0 (isRule32g1 counterparty t)
    , Rule "32(g)(2)" 0.0 (isRule32g2 counterparty t)
    , Rule "32(g)(3)" 0.0 (isRule32g3 counterparty t)
    , Rule "32(g)(4)" 0.0 (isRule32g4 counterparty t)
    , Rule "32(g)(5)" 0.0 (isRule32g5 counterparty)
    , Rule "32(g)(6)" 0.0 (isRule32g6 counterparty)
    , Rule "32(g)(7)" 0.0 (isRule32g7 counterparty)
    , Rule "32(g)(8)" 0.0 (isRule32g8 counterparty)
    , Rule "32(g)(9)" 0.0 (isRule32g9 counterparty)
    , Rule "32(h)(3)" 0.05 (isRule32h3 counterparty)
    , Rule "32(h)(4)" 0.25 (isRule32h4 counterparty)
    , Rule "32(l)" 0.0 isRule32l
    , Rule "33(f)(1)(iii)" 0.0 (isRule33f1iii t)
    , Rule "33(f)(1)(iv)" 0.15 (isRule33f1iv t)
    ]



-- Rules broken out for (eventual) unit testing

