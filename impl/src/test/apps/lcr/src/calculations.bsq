namespace NSCalculations;

import NSBasics;
import NSCountry;
import NSCurrency;
import NSCounterparty;
import NSFlows;
import NSInflows;
import NSOutflows;
import NSProduct;
import NSRules;

function lcr(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, product: Map<NSProduct::ProductId, NSProduct::Product>, t: DateTime, flowsForDate: List<[DateTime, NSFlows::Flow]>, reserveBalanceRequirement: NSBasics::Balance): NSBasics::Ratio {
    let relevantFlows = flowsForDate.filter(pred(fdp) => datesEqual(fdp.0, t)).map(fn(pdp) => fdp.1);
    let hqla = hqlaAmount(product, relevantFlows, reserveBalanceRequirement);

    let totalNetCashOutflow = totalNetCashOutflowAmount(toCounterparty, t, flowsForDate);
    return hqla / totalNetCashOutflow;
}

function hqlaAmount(product: Map<NSProduct::ProductId, NSProduct::Product>, t0Flows: List<NSFlows::Flow>, reserveBalanceRequirement: NSBasics::Balance): NSBasics::Balance {
    let level1LiquidAssetsThatAreEligibleHQLA = t0Flows
            .filter(pred(flow) => flow.assetType === NSBasics::AssetCategoryCodes::Level1Assets && isHQLA(product, flow))
            .map(fn(flow) => flow.amount)
            .sum();

    let level1LiquidAssetAmount = level1LiquidAssetsThatAreEligibleHQLA - reserveBalanceRequirement;

    let level2aLiquidAssetsThatAreEligibleHQLA = t0Flows
            .filter(pred(flow) => flow.assetType === NSBasics::AssetCategoryCodes::Level2aAssets && isHQLA(product, flow))
            .map(fn(flow) => flow.amount)
            .sum();

    let level2aLiquidAssetAmount = 0.85f * level2aLiquidAssetsThatAreEligibleHQLA;

    let level2bLiquidAssetsThatAreEligibleHQLA = t0Flows
            .filter(pred(flow) => flow.assetType === NSBasics::AssetCategoryCodes::Level2bAssets && isHQLA(product, flow))
            .map(fn(flow) => flow.amount)
            .sum();

    let level2bLiquidAssetAmount = 0.5f * level2bLiquidAssetsThatAreEligibleHQLA;

    let level2CapExcessAmount = Float::max(level2aLiquidAssetAmount + level2bLiquidAssetAmount - 0.6667f * level1LiquidAssetAmount, 0.0f);
    let level2bCapExcessAmount = Float::max(level2bLiquidAssetAmount - level2CapExcessAmount - 0.1765f * (level1LiquidAssetAmount + level2aLiquidAssetAmount), 0.0f);
    let unadjustedExcessHQLAAmount = level2CapExcessAmount + level2bCapExcessAmount;

    let adjustedLevel1LiquidAssetAmount = level1LiquidAssetAmount;
    let adjustedlevel2aLiquidAssetAmount = level2aLiquidAssetAmount * 0.85f;
    let adjustedlevel2bLiquidAssetAmount = level2bLiquidAssetAmount * 0.5f;
    let adjustedLevel2CapExcessAmount = Float::max(adjustedlevel2aLiquidAssetAmount + adjustedlevel2bLiquidAssetAmount - 0.6667f * adjustedLevel1LiquidAssetAmount, 0.0f);
    let adjustedlevel2bCapExcessAmount = Float::max(adjustedlevel2bLiquidAssetAmount - adjustedLevel2CapExcessAmount - 0.1765f * (adjustedLevel1LiquidAssetAmount + adjustedlevel2aLiquidAssetAmount), 0.0f);

    let adjustedExcessHQLAAmount = adjustedLevel2CapExcessAmount + adjustedlevel2bCapExcessAmount;
    
    return level1LiquidAssetAmount + level2aLiquidAssetAmount + level2bLiquidAssetAmount - max(unadjustedExcessHQLAAmount, adjustedExcessHQLAAmount);
}

function spanDates(dates: List<DateTime>, flowsForDate: List<[DateTime, NSFlows::Flow]>, flowFilter: pred(flow: NSFlows::Flow) -> Bool): List<NSBasics::Balance> {
    return dates
        .map(fn(t) => flowsForDate.filter(pred(fdp) => datesEqual(fdp.0, t)).map(fn(pdp) => fdp.1))
        .map(fn(flows) => aggregateDaily(flows, flowFilter));
}

function aggregateSpan(dates: List<DateTime>, flowsForDate: List<[DateTime, NSFlows::Flow]>, flowFilter: pred(flow: NSFlows::Flow) -> Bool): NSBasics::Balance {
    return spanDates(dates, flowsForDate, flowFilter).sum();
}

function aggregateDaily(flows: List<NSFlows::Flow>, flowFilter: pred(flow: NSFlows::Flow) -> Bool): NSBasics::Balance {
    return flows.filter(flowFilter).map(fn(flow) => flow.amount).sum();
}

function nonMaturityOutflowRules(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime): List<NSRules::Rule> {
    let rrules = List<String>{
        "32(a)(1)",
        "32(a)(2)",
        "32(a)(3)",
        "32(a)(4)",
        "32(a)(5)",
        "32(b)",
        "32(c)",
        "32(d)",
        "32(e)",
        "32(f)",
        "32(i)"
    };
    
    return NSRules::findAll(rrules, NSOutflows::outflowRules(toCounterparty, date));
}

function nonMaturityInflowRules(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime): List<NSRules::Rule> {
    let rrules = List<String>{
        "33(b)",
        "33(g)"
    };
    
    return NSRules::findAll(rrules, NSInflows::inflowRules(toCounterparty, date));
}

function maturityMismatchOutflowRules(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime): List<NSRules::Rule> {
    let rrules = List<String>{
        "32(g)(1)"
        "32(g)(2)",
        "32(g)(3)",
        "32(g)(4)",
        "32(g)(5)",
        "32(g)(6)",
        "32(g)(7)",
        "32(g)(8)",
        "32(g)(9)",
        "32(h)(1)",
        "32(h)(2)",
        "32(h)(5)",
        "32(j)",
        "32(k)",
        "32(l)"
    };

    return NSRules::findAll(rrules, NSOutflows::outflowRules(toCounterparty, date));
}

function maturityMismatchInflowRules(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime): List<NSRules::Rule> {
    let rrules = List<String>{
        "33(c)",
        "33(d)",
        "33(e)",
        "33(f)"
    };

    return NSRules::findAll(rrules, NSInflows::inflowRules(toCounterparty, date));
}

function totalNetCashOutflowAmount(toCounterparty: Map<NSCounterParty::CounterpartyId, NSCounterParty::Counterparty>, t: DateTime, flowsForDate: List<[DateTime, Flow]>): Balance {
    let dates = List<Int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
        .map(fn(i) => addDays(i, t));

    let nonMaturityOutflowAmount = aggregateSpan(NSRules::isAnyApplicable(nonMaturityOutflowRules(toCounterparty, t)));
    let nonMaturityInflowAmount = aggregateSpan(NSRules::isAnyApplicable((nonMaturityInflowRules(toCounterparty, t))));

    let mmorules = maturityMismatchOutflowRules(toCounterparty, t);
    let maturityOutflows = spanDates(dates, flowsForDate, flowFilter: pred(flow: NSFlows::Flow) => {
        return Rules::isAnyApplicable(flow, mmorules);
    });

    let maturityOutflowAmount = maturityOutflows.sum();

    
    let mmirules = maturityMismatchInflowRules(toCounterparty, t);
    let maturityInflows = spanDates(dates, flowsForDate, flowFilter: pred(flow: NSFlows::Flow) => {
        return Rules::isAnyApplicable(flow, mmorules);
    });

    let maturityInflowAmount = maturityInflows.sum();

    let aggregatedOutflowAmount = nonMaturityOutflowAmount + maturityOutflowAmount;
    let aggregatedInflowAmount = nonMaturityInflowAmount + maturityInflowAmount;

    let oaccum = accumulate(0.0f, maturityOutflows);
    let iaccum = accumulate(0.0f, maturityInflows);
    let netCumulativeMaturityOutflowAmountMaxOpt = oaccum.zip(iaccum).map(fn(acp: [Float, Float]) => acp.0 - acp.1).maxOrNone();
    let netCumulativeMaturityOutflowAmount = netCumulativeMaturityOutflowAmountMaxOpt !== none ? netCumulativeMaturityOutflowAmountMaxOpt : 0.0f;

    let netDay30CumulativeMaturityOutflowAmount = maturityOutflows.sum() - maturityInflows.sum();
    let maxNext30DaysOfCumulativeMaturityOutflowAmountFloor = Float::max(0.0f, netCumulativeMaturityOutflowAmount);
    let netDay30CumulativeMaturityOutflowAmountFloor = Float::max(0.0f, netDay30CumulativeMaturityOutflowAmount);

    let maturityMismatchAddOn = maxNext30DaysOfCumulativeMaturityOutflowAmountFloor - netDay30CumulativeMaturityOutflowAmountFloor;
    let cappedInflows = Float::min(0.75f * aggregatedOutflowAmount, aggregatedInflowAmount);
    
    return aggregatedOutflowAmount - cappedInflows + maturityMismatchAddOn;
}

function isHQLA(product: product: Map<NSProduct::ProductId, NSProduct::Product>, flow: NSFlows::Flow): Bool {
    return product.get(flow.productId).isHQLA;
}

function accumulate(starter: Float, list: List<Float>): List<Float> {
    let sum, acc = list.transduce(starter, fn(x, xs) => {
        return x + xs, x + xs;
    });
       
    return acc.reverse();
}

