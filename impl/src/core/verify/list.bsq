//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

__internal entity ISequence provides Object {
    __safe function s_size(l: List<T>): Nat # isequence_size
}

__internal entity ListOperators provides Object {
    ////////////////
    //Built Implemented Functions
    ////////////////

    //Core accessors
    __assume_safe s_safeAs<T, U>(v: T): U # list_safeas

    __safe function s_size<T>(l: List<T>): Nat # list_size
    __safe function s_empty<T>(l: List<T>): Bool # list_empty
    __assume_safe function s_safe_get<T>(l: List<T>, i: Nat): T # list_safe_get

    //assume non-empty
    recursive? function s_safeCheckPred_Core<T>(l: List<T>, count: Nat, p: recursive? pred(_: T) -> Bool): List<T> # list_safecheckpred
    recursive? function s_safeCheckFn_Core<T, U>(l: List<T>, count: Nat, f: recursive? fn(_: T) -> U): List<T> # list_safecheckfn

    //assume non-empty, safe, and exists at least one satisfying
    recursive? function s_computeISequence<T>(l: List<T>, count: Nat, p: recursive? pred(_: T) -> Bool): ISequence # list_computeisequence

    //TODO: need JSequence to enforce relations
    recursive? function s_join_Helper<T, U>(l: List<T>, ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<[T, U]> # list_join_helper
    
    //TODO: need SSequence to enforce relations
    recursive? function s_sort_Helper(l: List<T>, cmp: recursive? pred(_: T, _: T) -> Bool): List<T> # list_sort_helper

    //TODO: need USequence to enforce relations
    recursive? function s_unique_Helper(l: List<T>, eq: recursive? pred(_: T, _: T) -> Bool): List<T> # list_unique_helper

    ////
    //Constructors 
    __assume_safe function s_rangeOfInt(start: Int, end: Int): List<Int> # list_rangeofint
    __assume_safe function s_rangeOfNat(start: Nat, end: Nat): List<Nat> # list_rangeofnat
    __assume_safe function s_fill<T>(k: Nat, val: T): List<T> # list_fill

    __assume_safe function s_zipindex<T>(l1: List<T>, size: Nat): List<[Nat, T]> # list_zipindex

    __assume_safe function s_concat2_Constructor(l1: List<T>, l2: List<T>, count: Nat): List<T> # list_concat2
    __assume_safe function s_slice_Constructor(l: List<T>, start: Nat, end: Nat, count: Nat): List<T> # list_slice

    recursive? function s_filter_Constructor<T>(l: List<T>, isq: ISequence, count: Nat, p: recursive? pred(_: T) -> Bool): List<T> # list_filter_helper

    recursive? function s_map_Constructor<T, U>(l: List<T>, count: Nat, f: recursive? fn(_: T) -> U): List<U> # list_map

    ////
    //Destructors
    __safe recursive? function s_hasPredCheck_Core<T>(l: List<T>, count: Nat, p: recursive? pred(_: T) -> Bool): Bool # list_haspredcheck

    recursive? function s_findIndexOf_PredicateCore<T>(l: List<T>, count: Nat, p: recursive? pred(_: T) -> Bool): Nat # list_findindexof_predicatehelper
    recursive? function s_findIndexOfLast_PredicateCore<T>(l: List<T>, count: Nat, p: recursive? pred(_: T) -> Bool): Nat # list_findindexoflast_predicatehelper

    ////////////////
    //In code support operations
    ////////////////

    recursive? function s_safeCheckPred<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): List<T> {
        if(ListOperators::s_empty<T>(l)) {
            return List<T>@{};
        }
        else {
            //TODO: here special case for small model
            return ListOperators::s_safeCheckPred_Core<T>[recursive?](l, ListOperators::s_size<T>(l), p);
        }
    }

    recursive? function s_safeCheckFn<T, U>(l: List<T>, f: recursive? fn(_: T) -> U): List<T> {
        if(ListOperators::s_empty<T>(l)) {
            return List<T>@{};
        }
        else {
            //TODO: here special case for small model
            return ListOperators::s_safeCheckFn_Core<T, U>[recursive?](l, ListOperators::s_size<T>(l), f);
        }
    }

    recursive? function s_hasPredCheck<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(ListOperators::s_empty<T>(l)) {
            return false;
        }
        else {
            let sl = ListOperators::s_safeCheckPred<T>[recursive?](l, p);
        
            //TODO: here special case for small model
            return ListOperators::s_hasPredCheck_Core<T>(sl, List<T>::s_size(sl), p);
        }
    }

    function s_concat2_Helper<T>(l1: List<T>, l2: List<T>): List<T> {
        let l1empty = ListOperators::s_empty<T>(l1);
        let l2empty = ListOperators::s_empty<T>(l2);

        if(l1empty & l2empty) {
            return List<T>@{};
        }
        else {
            if(l1empty) {
                return l2;
            }
            elif(l2empty) {
                return l1;
            }
            else {
                //TODO: here special case for small model
                return ListOperators::s_concat2_Constructor<T>(l1, l2, ListOperators::s_size<T>(l1) + ListOperators::s_size<T>(l2));
            }
        }
    }

    function s_slice_Helper<T>(l: List<T>, start: Nat, end: Nat): List<T> {
        let count = end - start;

        if(count == 0) {
            return List<T>@{};
        }
        elif (count == ListOperators::s_size<T>(l)) {
            return l;
        }
        else {
            //TODO: here special case for small model
            return ListOperators::s_slice_Constructor<T>(l, start, end, count);  
        }
    }

    recursive? function s_findIndexOf_PredicateHelper<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat {
        if(ListOperators::s_empty<T>(l)) {
            return 0n;
        }
        else {
            let sl = ListOperators::s_safeCheckPred<T>[recursive?](l, p);
            let count = ListOperators::s_size<T>(sl);

            //TODO: here special case for small model
            if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, p)) {
                return ListOperators::s_findIndexOf_PredicateCore<T>[recursive?](sl, count, p);
            }
            else {
                return count;
            }
        }
    }

    recursive? function s_findIndexOfLast_PredicateHelper<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat {
        if(ListOperators::s_empty<T>(l)) {
            return 0n;
        }
        else {
            let sl = ListOperators::s_safeCheckPred<T>[recursive?](l, p);
            let count = ListOperators::s_size<T>(sl);

            //TODO: here special case for small model
            if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, p)) {
                return ListOperators::s_findIndexOfLast_PredicateCore<T>[recursive?](sl, count, p);
            }
            else {
                return count;
            }
        }
    }

    recursive? function s_countIf_Helper<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): Nat {
        if(ListOperators::s_empty<T>(l)) {
            return 0n;
        }
        else {
            let sl = ListOperators::s_safeCheckPred<T>[recursive?](l, p);
            let count = ListOperators::s_size<T>(sl);

            //TODO: here special case for small model
            if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, p)) {
                if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, pred(v: T) => !p(v))) {
                    let isq = ListOperators::s_computeISequence[recursive?](sl, count, p);
                    return ISequence::s_size(isq);
                }
                else {
                    return count;
                }
            }
            else {
                return 0n;
            }
        }
    }

    recursive? function s_filter_Helper<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): List<T> {
        if(ListOperators::s_empty(l)) {
            return List<T>@{};
        }
        else {
            let sl = ListOperators::s_safeCheckPred<T>[recursive?](l, p);
            let count = ListOperators::s_size<T>(sl);

            //TODO: here special case for small model
            if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, p)) {
                if(ListOperators::s_hasPredCheck_Core<T>[recursive?](sl, count, pred !p)) {
                    let isq = ListOperators::s_computeISequence<T>[recursive?](sl, count, p);
                    return ListOperators::s_filter_Constructor<T>[recursive?](sl, isq, count, p);
                }
                else {
                    return sl;
                }
            }
            else {
                return List<T>@{};
            }
        }
    }

    recursive? function s_map_Helper<T, U>(l: List<T>, f: recursive? fn(_: T) -> U): List<U> {
        if(ListOperators::s_empty<T>(l)) {
            return List<U>@{};
        }
        else {
            let sl = ListOperators::s_safeCheckFn<T, U>[recursive?](l, f);

            //TODO: here special case for small model
            return ListOperators::s_map_Constructor<T, U>[recursive?](sl, ListOperators::s_size<T>(sl), f);
        }
    }
}

__internal entity ListKeyOperators provides Object {
    ////////////////
    //Built Implemented Functions
    ////////////////

    //assume non-empty
    function s_hasCheck_Core<T KeyType>(l: List<T>, count: Nat, val: T): Bool # list_hascheck
    function s_hasCheckMapKV_Core<T KeyType, U>(l: List<[T, U]>, count: Nat, val: T): Bool # list_hascheckmapkv

    //assume non-empty
    function s_findIndexOf_KeyHelperCore<T KeyType>(l: List<T>, count: Nat, val: T): Nat # list_findindexof_keyhelper
    function s_findIndexOfMapKV_KeyHelperCore<T KeyType, U>(l: List<[T, U]>, count: Nat, val: T): Nat # list_findindexof_keyhelper

    ////////////////
    //In code support operations
    ////////////////

    function s_hasCheck<T KeyType>(l: List<T>, val: T): Bool {
        if(ListOperators::s_empty<T>(l)) {
            return false;
        }
        else {
            //TODO: here special case for small model
            return ListOperators::s_hasCheck_Core<T>(l, ListOperators::s_size<T>(l), val);
        }
    }

    function s_hasCheckMapKV<T KeyType, U>(l: List<[T, U]>, val: T): Bool {
        if(ListOperators<[T, U]>::s_empty(l)) {
            return false;
        }
        else {
            //TODO: here special case for small model
            return ListOperators<[T, U]>::s_hasCheckMapKV_Core(l, ListOperators<[T, U]>::s_size(l), val);
        }
    }

    function s_findIndexOf_KeyHelper<T KeyType>(l: List<T>, val: T): Nat {
        if(ListOperators::s_empty<T>(l)) {
            return 0n;
        }
        else {
            let count = ListOperators::s_size<T>(l);

            //TODO: here special case for small model
            if(ListOperators::s_hasCheck_Core<T>(l, count, val)) {
                return ListOperators::s_findIndexOf_KeyHelperCore<T>(l, count, val);
            }
            else {
                return count;
            }
        }
    }

    function s_findIndexOfMapKV_KeyHelper<T KeyType, U>(l: List<[T, U]>, val: T): Nat {
        if(ListOperators::s_empty<[T, U]>(l)) {
            return 0n;
        }
        else {
            let count = ListOperators::s_size<[T, U]>(l);

            //TODO: here special case for small model
            if(ListOperators::s_hasCheckMapKV_Core<T, U>(l, count, val)) {
                return ListOperators::s_findIndexOfMapKV_KeyHelperCore<T, U>(l, count, val);
            }
            else {
                return count;
            }
        }
    }
}

__internal entity ListArithOperators provides Object {
    ////////////////
    //Built Implemented Functions
    ////////////////

    //assume non-empty
    function s_minIdx_Core<T unique Some>(l: List<[Nat, T]>): Nat # list_minidx
    function s_maxIdx_Core<T unique Some>(l: List<[Nat, T]>): Nat # list_maxidx

#if UF_APPROX
    function s_sum_Core<T unique Some>(l: List<T>): T # list_sum
#endif

    ////////////////
    //In code support operations
    ////////////////

    function s_minIdx_Helper<T unique Some>(l: List<T>): Nat {
        let zl = l.index();
        
        //TODO: here special case for small model
        return ListOperators::s_minIdx_Core<T>(zl);
    }
    
    function s_maxIdx_Helper<T unique Some>(l: List<T>): Nat {
        let zl = l.index();
        
        //TODO: here special case for small model
        return ListOperators::s_maxIdx_Core<T>(zl);
    }

    recursive? function s_argminIdx_Helper<T, U unique Some>(l: List<T>, f: recursive? fn(_: T) -> U): Nat {
        let zl = l.map(f).index();
        
        //TODO: here special case for small model
        return ListOperators::s_minIdx_Core<U>(zl);
    }
    
    recursive? function s_argmaxIdx_Helper<T, U unique Some>(l: List<T>, f: recursive? fn(_: T) -> U): Nat {
        let zl = l.map(f).index();
        
        //TODO: here special case for small model
        return ListOperators::s_maxIdx_Core<U>(sl);
    }

#if UF_APPROX
    function s_sum_Helper<T unique Some>(l: List<T>): T {
        if(ListOperators::s_empty<T>(l)) {
            return T::zero;
        }
        else {
            let count = ListOperators::s_size<T>(l);
            
            if(count == 1n) {
                return ListOperators::s_safe_get<T>(l, 0n);
            }
            else {
                //TODO: here special case for small model
                return ListOperators::s_sum_Core<T>(l);
            }
        }
    }
#else
    recursive function s_sum_Core<T unique Some>(l: List<T>, acc: T, cpos: Nat, count: Nat): T {
        if(cpos == count) {
            return acc;
        }
        else {
            let nacc = acc + ListOperators::s_safe_get<T>(l, cpos);
            return ListOperators::s_sum_Core<T>[recursive](l, nacc, cpos + 1n, count);
        }
    }

    function s_sum_Helper<T unique Some>(l: List<T>): T {
        if(ListOperators::s_empty<T>(l)) {
            return T::zero;
        }
        else {
            let count = ListOperators::s_size<T>(l);
            
            if(count == 1n) {
                return ListOperators::s_safe_get<T>(l, 0n);
            }
            else {
                //TODO: here special case for small model
                return ListOperators::s_sum_Core<T>[recursive](l, T::zero, 0n, count);
            }
        }
    }
#endif
}

__internal entity List<T> provides Object, Expandoable<T>, APIType when T APIType {
    function ints(start: Int, end: Int): List<Int>
        requires release start <= end;
    {
        if(start == end) {
            return List<Int>@{};
        }
        else {
            return ListOperators::s_rangeInt(start, end);
        }
    }

    function nats(start: Nat, end: Nat): List<Nat>
        requires release start <= end;
    {
        if(start == end) {
            return List<Nat>@{};
        }
        else {
            return ListOperators::s_rangeNat(start, end);
        }
    }

    method index(): List<[Nat, T]> {
        if(ListOperators::s_empty<T>(this)) {
            return List<[Nat, T]>@{};
        }
        else {
            return ListOperators::s_zipindex<T>(this, ListOperators::s_size<T>(this));
        }
    }

    method zip<U=?>(l: List<U>): List<[T, U]> 
        requires release ListOperators::s_size<T>(this) == ListOperators::s_size<U>(l);
    {
        if(ListOperators::s_empty<T>(this)) {
            return List<[T, U]>@{};
        }
        else {
            return ListOperators::s_zip<T, U>(this, l, ListOperators::s_size<T>(this));
        }
    }

    private function s_sliceRangeInBounds(l: List<T>, start: Nat, end: Nat): Bool {
        return start <= end & end <= ListOperators::s_size<T>(l); 
    }

    ////
    //Public interface
    ////

    function fill(k: Nat, val: T): List<T> {
        if(k == 0n) {
            return List<T>@{};
        }
        else {
            return List<T>::s_fill(k, val);
        }
    }

    function concat(...ll: List<List<T>>): List<T> {
        xxxx;
        return List<T>::s_concat2_Helper(l1, l2);
    }

    method size(): Nat {
        return ListOperators::s_size<T>(this);
    }

    method empty(): Bool {
        return ListOperators::s_empty<T>(this);
    }

    method front(): T 
        requires release !ListOperators::s_empty<T>(this);
    {
        return List<T>::s_unsafe_get(this, 0n);
    }

    method frontOrNone(): T? {
        if(ListOperators::s_empty<T>(this)) {
            return none;
        }
        else {
            return ListOperators::s_safe_get<T>(this, 0n);
        }
    }

    method frontOption(): Option<T> {
        if(ListOperators::s_empty<T>(this)) {
            return nothing;
        }
        else {
            return ListOperators::s_safe_get<T>(this, 0n);
        }
    }

    method frontTry(out? res: T): Bool {
        if(!ListOperators::s_empty<T>(this)) {
            res = ListOperators::s_safe_get<T>(this, 0n);
            return true;
        }
        else {
            return false;
        }
    }

    method back(): T 
        requires release !List<T>::s_empty(this);
    {
        return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
    }

    method backOrNone(): T? {
        if(List<T>::s_empty(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
        }
    }

    method backOption(): Option<T> {
        if(List<T>::s_empty(this)){
            return nothing;
        }
        else {
            return List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
        }
    }

    method backTry(out? res: T): Bool {
        if(!List<T>::s_empty(this)) {
            res = List<T>::s_unsafe_get(this, List<T>::s_size(this) - 1n);
            return true;
        }
        else {
            return false;
        }
    }

    method get(i: Nat): T 
        requires release i < List<T>::s_size(this);
    {
        return List<T>::s_unsafe_get(this, i);
    }

    method getOrNone(i: Nat): T? {
        if(i < List<T>::s_size(this)) {
            return List<T>::s_unsafe_get(this, i);
        }
        else {
            return none;
        }
    }

    method getOption(i: Nat): Option<T> {
        if(i < List<T>::s_size(this)) {
            return List<T>::s_unsafe_get(this, i);
        }
        else {
            return nothing;
        }
    }

    method getTry(i: Nat, out? res: T): Bool {
        if(i < List<T>::s_size(this)) {
            res = List<T>::s_unsafe_get(this, i);
            return true;
        }
        else {
            return false;
        }
    }

    //method {when T grounded KeyType} toSet(): Set<T> {
    //    return List<T>::s_toset(this);
    //}

    recursive? method single(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        check lastidx == idx;
        check idx < List<T>::s_size(this);

        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method singleOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == List<T>::s_size(this))) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method singleOption(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == List<T>::s_size(this))) {
            return nothing;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method singleTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        let lastidx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);

        if((idx != lastidx) | (idx == List<T>::s_size(this))) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method allOf(p: recursive? pred(_: T) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, pred(v: T) => !p(v));
    }

    recursive? method allOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return !List<T>::s_hasPredCheck_Idx[recursive?](this, pred(v: T, i: Nat) => !p(v, i));
    }

    recursive? method noneOf(p: recursive? pred(_: T) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method noneOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return !List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method someOf(p: recursive? pred(_: T) -> Bool): Bool {
        return List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method someOf(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return List<T>::s_hasPredCheck[recursive?](this, p);
    }

    recursive? method countIf(p: recursive? pred(_: T) -> Bool): Nat {
        return List<T>::s_countIf_Helper[recursive?](this, p);
    }

    recursive? method countIf(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        return List<T>::s_countIf_Helper_Idx[recursive?](this, p);
    }

    method {when T KeyType} contains(v: T): Bool {
        return List<T>::s_hasCheck(this, v);
    }

    method {when T KeyType} count(v: T): Int {
        return List<T>::s_count_KeyHelper(this, v);
    }

    //
    //min, max, argmin, argmax, sum, product
    //
    method min(): T 
        requires release !this.empty();
    {
        let midx = List<T>::s_minIdx_Helper(this);
        return List<T>::s_unsafe_get(this, midx);
    }

    method max(): T
        requires release !this.empty();
    {
        let midx = List<T>::s_maxIdx_Helper(this);
        return List<T>::s_unsafe_get(this, midx);
    }

    method minOrNone(): T? {
        if(this.empty()) {
            return none;
        }
        else {
            let midx = List<T>::s_minIdx_Helper(this);
            return List<T>::s_unsafe_get(this, midx);
        }
    }

    method maxOrNone(): T? {
        if(this.empty()) {
            return none;
        }
        else {
            let midx = List<T>::s_maxIdx_Helper(this);
            return List<T>::s_unsafe_get(this, midx);
        }
    }

    method minOption(): T? {
        if(this.empty()) {
            return nothing;
        }
        else {
            let midx = List<T>::s_minIdx_Helper(this);
            return List<T>::s_unsafe_get(this, midx);
        }
    }

    method maxOrOption(): T? {
        if(this.empty()) {
            return nothing;
        }
        else {
            let midx = List<T>::s_maxIdx_Helper(this);
            return List<T>::s_unsafe_get(this, midx);
        }
    }

    method minTry(out? res: T): Bool {
        if(this.empty()) {
            return false;
        }
        else {
            let midx = List<T>::s_minIdx_Helper(this);
            res = List<T>::s_unsafe_get(this, midx);
            return true;
        }
    }

    method maxTry(out? res: T): Bool {
        if(this.empty()) {
            return false;
        }
        else {
            let midx = List<T>::s_maxIdx_Helper(this);
            res = List<T>::s_unsafe_get(this, midx);
            return true;
        }
    }

    method sum(): T {
        return List<T>::s_sum_Helper(this);
    }

    recursive? method find(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method find(p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): T? {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOption(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findOption(p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findTry(out? res: T, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findLast(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findLast(p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return List<T>::s_unsafe_get(this, idx);
    }

    recursive? method findLastOrNone(p: recursive? pred(_: T) -> Bool): T? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): T? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOption(p: recursive? pred(_: T) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return d;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastOption(d: T, p: recursive? pred(_: T, _: Nat) -> Bool): T {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return List<T>::s_unsafe_get(this, idx);
        }
    }

    recursive? method findLastTry(out? res: T, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findLastTry(out? res: T, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = List<T>::s_unsafe_get(this, idx);
            return true;
        }
    }

    recursive? method findIndexOf(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return idx;
    }

    recursive? method findIndexOf(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return idx;
    }

    recursive? method findIndexOfOrNone(p: recursive? pred(_: T) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOption(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfOption(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfTry(out? res: Nat, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfTry(out? res: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfLast(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return idx;
    }

    recursive? method findIndexOfLast(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        check idx != List<T>::s_size(this);
        return idx;
    }

    recursive? method findIndexOfLastOrNone(p: recursive? pred(_: T) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOrNone(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOption(p: recursive? pred(_: T) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastOption(p: recursive? pred(_: T, _: Nat) -> Bool): Nat {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    recursive? method findIndexOfLastTry(out? res: Nat, p: recursive? pred(_: T) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method findIndexOfLastTry(out? res: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let idx = List<T>::s_findIndexOfLast_PredicateHelper_Idx[recursive?](this, p);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    method {when T KeyType} indexOf(v: T): Nat {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        check idx != List<T>::s_size(this);
        return idx;
    }

    method {when T KeyType} indexOfOrNone(v: T): Nat? {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    method {when T KeyType} indexOfOption(v: T): Nat {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfTry(out? res: T, v: T): Bool {
        let idx = List<T>::s_findIndexOf_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    method {when T grounded KeyType} indexOfLast(v: T): Nat {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        check idx != List<T>::s_size(this);
        return idx;
    }

    method {when T grounded KeyType} indexOfLastOrNone(v: T): Nat? {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return none;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfLastOption(v: T): Nat {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return nothing;
        }
        else {
            return idx;
        }
    }

    method {when T grounded KeyType} indexOfLastTry(out? res: T, v: T): Bool {
        let idx = List<T>::s_findIndexOfLast_KeyHelper(this, v);
        if(idx == List<T>::s_size(this)) {
            return false;
        }
        else {
            res = idx;
            return true;
        }
    }

    recursive? method filter(p: recursive? pred(_: T) -> Bool): List<T> {
        return List<T>::s_filter_Helper[recursive?](this, p);
    }

    recursive? method filter(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        return List<T>::s_filter_Helper_Idx[recursive?](this, p);
    }

    method filterType<U>(): List<U> {
        return this.filter(pred(v: T) => v.is<U>()).map<U>(fn(v: T): U => v.as<U>());
    }

    method castType<U>(): List<U> {
        return this.map<U>(fn(v: T): U => v.as<U>());
    }

    method slice(start?: Nat=0n, end?: Nat=List<T>::s_size(this)): List<T> 
        requires release List<T>::s_sliceRangeInBounds(this, start, end);
    {
        return List<T>::s_slice_Helper(this, s, e);
    }

    method removeFirst(k: Nat): List<T> 
        requires release k <= List<T>::s_size(this);
    {
        return List<T>::s_slice_Helper(this, k, List<T>::s_size(this));
    }

    method removeLast(k: Nat): List<T> 
        requires release k <= List<T>::s_size(this);
    {
        return List<T>::s_slice_Helper(this, 0n, List<T>::s_size(this) - k);
    }

    recursive? method takeWhile(p: recursive? pred(_: T) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, 0n, lpos);
    }

    recursive? method takeWhile(p: recursive? pred(_: T, _: Nat) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, 0n, lpos);
    }

    recursive? method discardWhile(p: recursive? pred(_: T) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardWhile(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, pred !p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method takeUntil(p: recursive? pred(_: T) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method takeUntil(p: recursive? pred(_: T, _: Nat) -> Bool): List<T> {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardUntil(p: recursive? pred(_: T) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    recursive? method discardUntil(p: recursive? pred(_: T, _: Nat) -> Bool): List<T>  {
        let lpos = List<T>::s_findIndexOf_PredicateHelper_Idx[recursive?](this, p);
        return List<T>::s_slice_Helper(this, lpos, end - lpos);
    }

    //method {when T KeyType} unique(): List<T> {
    //    return List<T>::s_unique(this);
    //}

    //recursive? method uniqueOf(cmp: recursive? fn(_: T, _: T) -> Bool): List<T> {
    //    return List<T>::s_unique(this);
    //}

    //method reverse(): List<T> {
    //    return List<T>::s_reverse(this);
    //}

    recursive? method map<U=?>(f: recursive? fn(_: T) -> U): List<U>  {
        return List<T>::s_map_Helper<U>[recursive?](this, f);
    }

    recursive? method map<U=?>(f: recursive? fn(_: T, _: Nat) -> U): List<U>  {
        return List<T>::s_map_Helper_Idx<U>[recursive?](this, f);
    }

    
xxxx;
    method {when T KeyType} project<U=?>(m: Map<T, U>): List<U> {
        return List<T>::s_projectWMap<U>[recursive](this, List<T>::s_size(this), List<U>@{}, 0, m); 
    }

    method {when T KeyType} projectOrNone<U=?>(m: Map<T, U>): List<U?> {
        return List<T>::s_tryProjectWMap<U>[recursive](this, List<T>::s_size(this), List<U?>@{}, 0, m);
    }

    method {when T KeyType} defaultProjectWithMap<U=?>(default: U, m: Map<T, U>): List<U> {
        return List<T>::s_defaultProjectWMap<U>[recursive](this, List<T>::s_size(this), List<U>@{}, 0, m, default);
    }

    method zipIndex(): List<#[Int, T]> {
        return List<T>::s_zipIndex[recursive](this, List<T>::s_size(this), List<#[Int, T]>@{}, 0);
    }

    recursive? method join<U=?>(ol: List<U>, p: recursive? fn(_: T, _: U) -> Bool): List<#[T, U]> {
        return List<T>::s_join<U>[recursive](this, List<T>::s_size(this), ol, List<T>::s_size(ol), List<#[T, U]>@{}, 0, p);
    }

    recursive? method joinGroup<U=?>(ol: List<U>, p: recursive? fn(_: T, _: U) -> Bool): List<#[T, List<U>]> {
        return List<T>::s_joinGroup<U>[recursive](this, List<T>::s_size(this), ol, List<T>::s_size(ol), List<#[T, List<U>]>@{}, 0, p);
    }
xxxx;




    recursive? method join<U=?>(ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, U]> {
        return List<T>::s_join_Helper<U>[recursive?](this, ol, p);
    }

    recursive? method joinGroup<U=?>(ol: List<U>, p: recursive? pred(_: T, _: U) -> Bool): List<#[T, List<U>]> {
        return List<T>::s_joinGroup_Helper<U>[recursive?](this, ol, p);
    }

    method append(l: List<T>): List<T> {
        return List<T>::s_concat2_Helper(this, l);
    }

    method prepend(l: List<T>): List<T> {
        return List<T>::s_concat2_Helper(l, this);
    }

    //recursive? method partition<K=? where KeyType>(pf: recursive? fn(_: T) -> K): Map<K, List<T>> {
    //    const plist = this.map<K>[recursive?](pf);
    //    return List<T>::s_partition<K>(this, plist);
    //}

    recursive? method sort(cmp: recursive? pred(_: T, _: T) -> Bool): List<T> {
        return List<T>::s_sort_Helper[recursive?](this, cmp);
    }

    //
    //Convert to Map<K, V> operations
    //
}
