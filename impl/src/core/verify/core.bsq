//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

//<summary>Special type which all values are instances of.</summary>
__universal concept Any {
    method is<T>(): Bool # special_method
    method as<T>(): T # special_method

    method asOrNone<T>(): T? {
        return this.is<T>() ? this.as<T>() : none;
    }

    method asOption<T>(): Option<T> {
        return this.is<T>() ? something(this.as<T>()) : nothing;
    }

    method asResult<T>(): Result<T, None> {
        return this.is<T>() ? ok(this.as<T>()) : err(none);
    }

    method asTry<T>(out? v: T): Bool {
        if(!this.is<T>()) {
            return false;
        }
        else {
            v = this.as<T>();
            return true;
        }
    }

    method isSome(): Bool # special_method
    method isNone(): Bool # special_method
}

//<summary>Special type for representing all non-none values.</summary>
__universal concept Some provides Any {
}

//<summary>Special type for indicating a value can be used as a key in a collection.</summary>
__universal concept KeyType provides Any {
    function equal<T grounded KeyType>(a: T, b: T): Bool # special_method
    function less<T grounded KeyType>(a: T, b: T): Bool # special_method
}

//<summary>Type for indicating that a datatype is a Validator.</summary>
__universal private concept Validator provides Any {
}

//<summary>Type for indicating that a datatype is parsable.</summary>
__universal concept Parsable provides Any {
}

//<summary>Type for indicating that a datatype can be exported as part of a stable API.</summary>
__universal concept APIType provides Any {
    //ONLY FOR USE IN MOCKING
    function generate<T APIType>(): T # apitype_generate
}

//<summary>Type for indicating that a datatype overrides the algebraic operators +, -, *, / along with the needed consts.</summary>
__universal concept Algebraic provides Any {
}

//<summary>Type for indicating that a datatype overrides the algebraic operators ==, !=, <, >, <=, >=.</summary>
__universal concept Orderable provides Any {
}

//<summary>Type for representing the none value.</summary>
__internal entity None provides KeyType, APIType {
}

//<summary>Primitive boolean value.</summary>
__internal entity Bool provides Some, KeyType, APIType {
}

abstract prefix operator +(a: Some): Some;
abstract prefix operator -(a: Some): Some;
abstract infix operator *(a: Some, b: Some): Some;
abstract infix operator /(a: Some, b: Some): Some;
abstract infix operator +(a: Some, b: Some): Some;
abstract infix operator -(a: Some, b: Some): Some;
abstract infix operator ==(a: Some, b: Some): Bool;
abstract infix operator !=(a: Some, b: Some): Bool;
abstract infix operator <(a: Some, b: Some): Bool;
abstract infix operator >(a: Some, b: Some): Bool;
abstract infix operator <=(a: Some, b: Some): Bool;
abstract infix operator >=(a: Some, b: Some): Bool;

//<summary>Primitive integer value.</summary>
__internal __typedeclable entity Int provides Some, Algebraic, Orderable, KeyType, APIType {
    const zero: Int = 0i;
    const one: Int = 1i;
    const negativeone: Int = -1i;
}
__safe __primitive inline prefix operator +(a: Int): Int = default;
__primitive inline prefix operator -(a: Int): Int = default;
__primitive inline infix operator *(a: Int, b: Int): Int = default;
__primitive inline infix operator /(a: Int, b: Int): Int = default;
__primitive inline infix operator +(a: Int, b: Int): Int = default;
__primitive inline infix operator -(a: Int, b: Int): Int = default;
__safe __primitive inline infix operator ==(a: Int, b: Int): Bool = default;
__safe __primitive inline infix operator !=(a: Int, b: Int): Bool = default;
__safe __primitive inline infix operator <(a: Int, b: Int): Bool = default;
__safe __primitive inline infix operator >(a: Int, b: Int): Bool = default;
__safe __primitive inline infix operator <=(a: Int, b: Int): Bool = default;
__safe __primitive inline infix operator >=(a: Int, b: Int): Bool = default;

//<summary>Primitive natural number value.</summary>
__internal __typedeclable entity Nat provides Some, Algebraic, Orderable, KeyType, APIType {
    const zero: Nat = 0n;
    const one: Nat = 1n;
}
__safe __primitive inline prefix operator +(a: Nat): Nat = default;
__primitive inline infix operator *(a: Nat, b: Nat): Nat = default;
__primitive inline infix operator /(a: Nat, b: Nat): Nat = default;
__primitive inline infix operator +(a: Nat, b: Nat): Nat = default;
__primitive inline infix operator -(a: Nat, b: Nat): Nat = default;
__safe __primitive inline infix operator ==(a: Nat, b: Nat): Bool = default;
__safe __primitive inline infix operator !=(a: Nat, b: Nat): Bool = default;
__safe __primitive inline infix operator <(a: Nat, b: Nat): Bool = default;
__safe __primitive inline infix operator >(a: Nat, b: Nat): Bool = default;
__safe __primitive inline infix operator <=(a: Nat, b: Nat): Bool = default;
__safe __primitive inline infix operator >=(a: Nat, b: Nat): Bool = default;

//<summary>Primitive big-integer value.</summary>
__internal __typedeclable entity BigInt provides Some, Algebraic, Orderable, KeyType, APIType {
    const zero: BigInt = 0I;
    const one: BigInt = 1I;
    const negativeone: BigInt = -1I;
}
__safe __primitive inline prefix operator +(a: BigInt): BigInt = default;
__safe __primitive inline prefix operator -(a: BigInt): BigInt = default;
__safe __primitive inline infix operator *(a: BigInt, b: BigInt): BigInt = default;
__safe __primitive inline infix operator /(a: BigInt, b: BigInt): BigInt = default;
__safe __primitive inline infix operator +(a: BigInt, b: BigInt): BigInt = default;
__safe __primitive inline infix operator -(a: BigInt, b: BigInt): BigInt = default;
__safe __primitive inline infix operator ==(a: BigInt, b: BigInt): Bool = default;
__safe __primitive inline infix operator !=(a: BigInt, b: BigInt): Bool = default;
__safe __primitive inline infix operator <(a: BigInt, b: BigInt): Bool = default;
__safe __primitive inline infix operator >(a: BigInt, b: BigInt): Bool = default;
__safe __primitive inline infix operator <=(a: BigInt, b: BigInt): Bool = default;
__safe __primitive inline infix operator >=(a: BigInt, b: BigInt): Bool = default;

//<summary>Primitive big-integer value.</summary>
__internal __typedeclable entity BigNat provides Some, Algebraic, Orderable, KeyType, APIType {
    const zero: BigNat = 0N;
    const one: BigNat = 1N;
}
__safe __primitive inline prefix operator +(a: BigNat): BigNat = default;
__safe __primitive inline infix operator *(a: BigNat, b: BigNat): BigNat = default;
__safe __primitive inline infix operator /(a: BigNat, b: BigNat): BigNat = default;
__safe __primitive inline infix operator +(a: BigNat, b: BigNat): BigNat = default;
__safe __primitive inline infix operator -(a: BigNat, b: BigNat): BigNat = default;
__safe __primitive inline infix operator ==(a: BigNat, b: BigNat): Bool = default;
__safe __primitive inline infix operator !=(a: BigNat, b: BigNat): Bool = default;
__safe __primitive inline infix operator <(a: BigNat, b: BigNat): Bool = default;
__safe __primitive inline infix operator >(a: BigNat, b: BigNat): Bool = default;
__safe __primitive inline infix operator <=(a: BigNat, b: BigNat): Bool = default;
__safe __primitive inline infix operator >=(a: BigNat, b: BigNat): Bool = default;

//<summary>Primitive rational value.</summary>
__internal __typedeclable entity Rational provides Some, Algebraic, Orderable, APIType {
}
__safe __primitive inline prefix operator +(a: Rational): Rational? = default;
__safe __primitive inline prefix operator -(a: Rational): Rational? = default;
__safe __primitive inline infix operator *(a: Rational, b: Rational): Rational? = default;
__safe __primitive inline infix operator /(a: Rational, b: Rational): Rational? = default;
__safe __primitive inline infix operator +(a: Rational, b: Rational): Rational? = default;
__safe __primitive inline infix operator -(a: Rational, b: Rational): Rational? = default;
__safe __primitive inline infix operator ==(a: Rational, b: Rational): Bool = default;
__safe __primitive inline infix operator !=(a: Rational, b: Rational): Bool = default;
__safe __primitive inline infix operator <(a: Rational, b: Rational): Bool = default;
__safe __primitive inline infix operator >(a: Rational, b: Rational): Bool = default;
__safe __primitive inline infix operator <=(a: Rational, b: Rational): Bool = default;
__safe __primitive inline infix operator >=(a: Rational, b: Rational): Bool = default;

//<summary>Primitive float value defaults to 64bit.</summary>
__internal __typedeclable entity Float provides Some, Algebraic, Orderable, APIType {
    const zero: Float = 0.0f;
    const one: Float = 1.0f;
    const negativeone: Float = -1.0f;
}
__safe __primitive inline prefix operator +(a: Float): Float = default;
__safe __primitive inline prefix operator -(a: Float): Float = default;
__safe __primitive inline infix operator *(a: Float, b: Float): Float = default;
__safe __primitive inline infix operator /(a: Float, b: Float): Float = default;
__safe __primitive inline infix operator +(a: Float, b: Float): Float = default;
__safe __primitive inline infix operator -(a: Float, b: Float): Float = default;
__safe __primitive inline infix operator <(a: Float, b: Float): Bool = default;
__safe __primitive inline infix operator >(a: Float, b: Float): Bool = default;
__safe __primitive inline infix operator <=(a: Float, b: Float): Bool = default;
__safe __primitive inline infix operator >=(a: Float, b: Float): Bool = default;

//<summary>Primitive float decimal value.</summary>
__internal __typedeclable entity Decimal provides Some, Algebraic, Orderable, APIType {
    const zero: Decimal = 0.0d;
    const one: Decmial = 1.0d;
    const negativeone: Decmial = -1.0d;
}
__safe __primitive inline prefix operator +(a: Decimal): Decimal = default;
__safe __primitive inline prefix operator -(a: Decimal): Decimal = default;
__safe __primitive inline infix operator *(a: Decimal, b: Decimal): Decimal = default;
__safe __primitive inline infix operator /(a: Decimal, b: Decimal): Decimal = default;
__safe __primitive inline infix operator +(a: Decimal, b: Decimal): Decimal = default;
__safe __primitive inline infix operator -(a: Decimal, b: Decimal): Decimal = default;
__safe __primitive inline infix operator <(a: Decimal, b: Decimal): Bool = default;
__safe __primitive inline infix operator >(a: Decimal, b: Decimal): Bool = default;
__safe __primitive inline infix operator <=(a: Decimal, b: Decimal): Bool = default;
__safe __primitive inline infix operator >=(a: Decimal, b: Decimal): Bool = default;

//<summary>Primitive string position value.</summary>
__internal StringPos provides Some {
}
__primitive inline infix operator <(a: StringPos, b: StringPos): Bool = default;
__primitive inline infix operator >(a: StringPos, b: StringPos): Bool = default;
__primitive inline infix operator <=(a: StringPos, b: StringPos): Bool = default;
__primitive inline infix operator >=(a: StringPos, b: StringPos): Bool = default;

//<summary>Primitive string value.</summary>
__internal entity String provides Some, KeyType, APIType {
    __safe private function s_empty(s: String): Bool # string_empty

    __safe private function s_iteratorMin(s: String): StringPos # string_iterator_min
    __safe private function s_iteratorMax(s: String): StringPos # string_iterator_max
    __safe private function s_iteratorBegin(s: String): StringPos # string_iterator_begin
    __safe private function s_iteratorEnd(s: String): StringPos # string_iterator_end

    __assume_safe private function s_concat2(s1: String, s2: String): String # string_append
    __assume_safe private function s_slice(s: String, start: StringPos, end: StringPos): String # string_slice

    function concat(s1: String, s2: String): String {
        return String::s_concat2(s1, s2);
    }

    method empty(): Bool {
        return String::s_empty(this);
    }

    method append(s: String): String {
        return String::s_concat2(this, s);
    }

    method prepend(s: String): String {
        return String::s_concat2(s, this);
    }

    method slice(start?: StringPos=this.iteratorBegin(), end?: StringPos=this.iteratorMax()): String 
        requires release this.iteratorMin() < start & start <= end & end <= this.iteratorMax();
    {
        return String::s_slice(this, start, end);
    }

    method iteratorMin(): StringPos {
        return String::s_iteratorMin(this);
    }

    method iteratorMax(): StringPos {
        return String::s_iteratorMax(this);
    }

    method iteratorBegin(): StringPos {
        return String::s_iteratorBegin(this);
    }

    method iteratorEnd(): StringPos {
        return String::s_iteratorEnd(this);
    }
}

//<summary>Primitive safe string value.</summary>
__internal __constructable entity StringOf<T unique Validator> provides Some, KeyType, APIType {
    method value(): String # special_extract
    function from(str: String): StringOf<T> # special_inject
}

//<summary>Primitive DataString value.</summary>
__internal __constructable entity DataString<T unique Parsable> provides Some, KeyType, APIType {
    method value(): String # special_extract
    function from(str: String): # special_inject
}

enum BufferFormat {
    text,
    bosque,
    json
}

enum BufferEncoding {
    utf8,
    binary
}

enum BufferCompression {
    off,
    time,
    space
}

//<summary>An efficient buffer encoding for data.</summary>
entity BufferOf<T APIType> provides Some, APIType {
    private field format: BufferFormat;
    private field encoding: BufferEncoding;
    private field compression: BufferCompression;
    private field buf: ByteBuffer;
}

//<summary>An efficient buffer encoding for data.</summary>
entity DataBuffer<T unique Parsable> provides Some, APIType {
    private field format: BufferFormat;
    private field encoding: BufferEncoding;
    private field compression: BufferCompression;
    private field buf: ByteBuffer;
}

//<summary>An efficient byte buffer for data.</summary>
__internal entity ByteBuffer provides Some, APIType {
}

//<summary>Primitive ISOTime value.</summary>
__internal __typedeclable entity ISOTime provides Some, Orderable APIType {
}

//<summary>Primitive LogicalTime value.</summary>
__internal __typedeclable entity LogicalTime provides Some, Orderable, KeyType, APIType {
}

//<summary>Primitive UUID value.</summary>
__internal __typedeclable entity UUID provides Some, KeyType, APIType {
}

//<summary>Primitive hash value suitable for content addressable operations or crypto secure digests.</summary>
__internal __typedeclable entity ContentHash provides Some, KeyType, APIType {
}

//<summary>Primitive regex value.</summary>
__internal entity Regex provides Some {
}

struct entity RegexMatch provides Some {
    field index: Nat;
    field length: Nat;

    invariant $index >= 0n & $length >= 0n;
}

//<summary>Static methods for Tuples.</summary>
__universal concept Tuple provides Some {
    function append(arg: Any): Tuple # special_method
}

//<summary>Static methods for Records.</summary>
__universal concept Record provides Some {
    function join(arg: Any): Record # special_method
}

//<summary>Generic type for all Option<T> to inherit from.</summary>
__universal concept IOption provides Some {
    method isNothing(): Bool # special_nothing
    method isSomething(): Bool # special_something

    method asNothing(): Nothing {
        return this.as<Nothing>();
    }
}

//<summary>Generic type for all Option<T> to inherit from.</summary>
__universal private concept ISomething provides IOption {
}

//<summary>Type for representing the nothing option value.</summary>
__internal entity Nothing provides IOption, APIType {
}

//<summary>Type for representing the nothing option value.</summary>
__internal __constructable entity Something<T> provides Option<T>, APIType when T APIType {
    method value(): T # special_extract
    function from(v: T): # special_inject
}

//<summary>Type for flagging T projection from Option -- kludge that has no other purpose.</summary>
__universal concept IOptionT provides Some {
}

concept Option<T> provides ISomething, APIType when T APIType {
    method asSomething(): Something<T> {
        return this.as<Something<T>>();
    }

    method asSomethingTry(out? v: Something<T>): Bool {
        if(this.isNothing()) {
            return false;
        }
        else {
            v = this.asSomething();
            return true;
        }
    }

    method data(): T {
        return this.asSomething().value();
    }

    method dataTry(out? v: T): Bool {
        if(this.isNothing()) {
            return false;
        }
        else {
            v = this.asSomething().value();
            return true;
        }
    }

    method convert<V=?>(): Option<V> {
        if(this === nothing) {
            return nothing;
        }
        else {
            return Something@{this.data().as<V>()};
        }
    }
}

//<summary>Result type.</summary>
concept Result<T, E=None> provides Some {
    __internal __constructable entity Ok provides Some, Result<T, E> {
        method value(): T # special_extract
        function from(v: T): # special_inject
    }

    __internal __constructable entity Err provides Result<T, E> {
        method value(): E # special_extract
        function from(v: E): # special_inject
    }

    method isOk(): Bool {
        return this.is<Ok>();
    }

    method isErr(): Bool {
        return this.is<Err>();
    }

    method result(): T {
        return this.as<Ok>().value();
    }

    method error(): E {
        return this.as<Err>().value();
    }

    method convert<U=?, V=?>(): Result<U, V> {
        if(this.is<Ok>()) {
            return Result<U, V>::Ok@{this.result().as<U>()};
        }
        else {
            return Result<U, V>::Err@{this.error().as<V>()};
        }
    }
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
__universal concept Object provides Some {
}

//<summary>All collections provide this concept so we can expand them with spread operators.</summary>
concept Expandoable<T> provides Object {
    method expand<U>(): List<U> # special_method
}
