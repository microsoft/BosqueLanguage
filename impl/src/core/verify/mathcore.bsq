//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace NSCore;

__internal entity NumericOps provides Some {
    function s_natToInt(n: Nat): Int # number_nattoint
    __safe function s_natToBigNat(n: Nat): BigNat # number_nattobignat

    function s_intToNat(i: Int): Nat # number_inttonat
    __safe function s_intToBigInt(i: Int): BigInt # number_inttobigint

    function s_bigNatToNat(n: BigNat): Nat # number_bignattonat
    __safe function s_bigNatToBigInt(n: BigNat): BigInt # number_bignattobigint
    __safe function s_bigNatToFloat(n: BigNat): Float # number_bignattofloat
    __safe function s_bigNatToDecimal(n: BigNat): Decimal # number_bignattodecimal
    __safe function s_bigNatToRational(n: BigNat): Rational # number_bignattorational

    function s_bigIntToInt(i: BigInt): Int # number_biginttoint
    function s_bigIntToBigNat(i: BigInt): BigNat # number_biginttobignat
    __safe function s_bigIntToFloat(i: BigInt): Float # number_biginttofloat
    __safe function s_bigIntToDecimal(i: BigInt): Decimal # number_biginttodecimal
    __safe function s_bigIntToRational(i: BigInt): Rational # number_biginttorational

    __safe function s_floatToBigInt(f: Float): BigInt # number_floattobigint
    __safe function s_floatToDecimal(f: Float): Decimal # number_floattodecimal
    __safe function s_floatToRational(f: Float): Rational # number_floattorational

    __safe function s_decimalToBigInt(d: Decimal): BigInt # number_decimaltobigint
    __safe function s_decimalToFloat(d: Decimal): Float # number_decimaltofloat
    __safe function s_decimalToRational(d: Decimal): Rational # number_decimaltorational

    __safe function s_rationalToBigInt(r: Rational): BigInt # number_rationaltobigint
    __safe function s_rationalToFloat(r: Rational): Float # number_rationaltofloat
    __safe function s_rationalToDeciaml(r: Rational): Decimal # number_rationaltodecimal

    __safe function s_floatFloor(f: Float): BigInt # float_floor
    __safe function s_floatCeil(f: Float): BigInt # float_ceil
    __safe function s_floatTruncate(f: Float): BigInt # float_truncate

    __safe function s_decimalFloor(d: Decimal): BigInt # decimal_floor
    __safe function s_decimalCeil(d: Decimal): BigInt # decimal_ceil
    __safe function s_decimalTruncate(f: Decimal): BigInt # decimal_truncate
}