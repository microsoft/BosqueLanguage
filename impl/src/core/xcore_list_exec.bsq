//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace NSCore;

#if EXEC_LIBS
__internal entity ListOps provides Some {
    __assume_safe function s_safeAs<T, U>(v: T): U # list_safeas

    function s_asListTree<T>(l: ListRepr<T>): ListTree<T> {
        return ListOps::s_safeAs<ListRepr<T>, ListTree<T>>(l);
    }

    function s_empty(l: ListRepr<T>): Nat {
        return l === none;
    }

    function s_size<T>(l: ListRepr<T>): Nat {
        if(l === none) {
            return 0;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.mask.count();
        }
        else {
            return l.count;
        }
    }

    function s_safe_get<T>(l: ListRepr<T>, i: Nat): T {
        if(l.is<PartialVector<T>>()) {
            return PartialVector<T>::s_safe_get(l, i);
        }
        else {
            return ListOps::s_asListTree<T>(l).safe_get[recursive](i);
        }
    }

    recursive? function s_has_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_pred[recursive?](p).some_true();
        }
        else {
            return l.has_pred[recursive](p);
        }
    }

    recursive? function s_has_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_pred_idx[recursive?](0, p).some_true();
        }
        else {
            return l.has_pred_idx[recursive](0, p);
        }
    }

    recursive? function s_find_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_pred[recursive?](p).min();
        }
        else {
            return l.find_pred[recursive](0, p);
        }
    }

    recursive? function s_find_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_pred_idx[recursive?](0, p).min();
        }
        else {
            return l.find_pred_idx[recursive](0, p);
        }
    }

    recursive? function s_find_last_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_last_pred[recursive?](p).max();
        }
        else {
            return l.find_last_pred[recursive](0, p);
        }
    }

    recursive? function s_find_last_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            return l.find_last_pred_idx[recursive?](0, p).max();
        }
        else {
            return l.find_last_pred_idx[recursive](0, p);
        }
    }

    recursive? function s_filter_pred<T>(p: recursive? pred(_: T) -> Bool): ListRepr<T> {
         if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            let fm = l.apply_pred[recursive?](p);
            if(fm.empty()) {
                return none;
            }
            else {
                return PartialVector<T>::s_select(l, fm);
            }
        }
        else {
            return l.filter_pred_idx[recursive](0, p);
        }
    }

    recursive? function s_filter_pred_idx<T>(p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<PartialVector<T>>()) {
            let fm = l.apply_pred_idx[recursive?](0, p);
            if(fm.empty()) {
                return none;
            }
            else {
                return PartialVector<T>::s_select(l, fm);
            }
        }
        else {
            return l.filter_pred_idx[recursive](0, p);
        }
    }

    recursive? function s_map<T, U>(l: ListRepr<T>, p: recursive? pred(_: T) -> U): ListRepr<U> {
    }

    recursive? function s_map_idx<T, U>(l: ListRepr<T>, p: recursive? pred(_: T, _: U) -> Bool): ListRepr<U> {
    }
}

entity ListTree<T> provides Some {
    field count: Nat;
    field left: ListTree<T> | PartialVector<T>;
    field right ListTree<T> | PartialVector<T>;

    function append(l: ListTree<T> | PartialVector<T>, r: ListTree<T> | PartialVector<T>): ListTree<T> {
        let ls: Nat;
        if(l.is<PartialVector<T>>()) {
            ls = l.count();
        }
        else {
            ls = l.count;
        }

        let rs: Nat;
        if(r.is<PartialVector<T>>()) {
            rs = r.count();
        }
        else {
            rs = r.count;
        }

        return ListTree<T>{ls + rs, l, r};
    }

    method slice(start: Nat, end: Nat): ListTree<T> {
        if(/\(start === 0, end === this.count)) {
            return this;
        }

        xxxx;
    }

    recursive method safe_get(i: Nat): T {
        let l = this.left;
        if(l.is<PartialVector<T>>()) {
            return PartialVector<T>::s_safe_get(l, i);
        }
        else {
            if(i < l.count) {
                return l.safe_get[recursive](i);
            }
            else {
                let r = this.right;
                let ir = i - l.count;
                if(r.is<PartialVector<T>>()) {
                    return PartialVector<T>::s_safe_get(r, ir);
                }
                else {
                    return r.safe_get[recursive](ir);
                }
            }
        }
    }

    recursive method has_pred(p: recursive? pred(_: T) -> Bool): Bool {
        let l = this.left;
        let r = this.right;

        if(l.is<PartialVector<T>>() && l.find_pred[recursive?](p).some_true()) {
            return true;
        }

        if(r.is<PartialVector<T>>() && r.find_pred[recursive?](p).some_true()) {
            return true;
        }

        if(l.is<ListTree<T>>() && l.has_pred[recursive](p)) {
            return true;
        }

        if(r.is<ListTree<T>>() && r.has_pred[recursive](p)) {
            return true;
        }

        return false;
    }

    recursive method has_pred_idx(idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        if(l.is<PartialVector<T>>()) {
            if(l.find_pred_idx[recursive?](idx, p).some_true()) {
                return true;
            }
            lcount = l.count();
        }
        else {
            if(l.has_pred_idx[recursive](idx, p)) {
                return true;
            }
            lcount = l.count;
        }

        let nidx = idx + lcount; 
        if(r.is<PartialVector<T>>()) {
            return r.find_pred_idx[recursive?](nidx, p).some_true();
        }
        else {
            return r.has_pred[recursive](nidx, p);
        }
    }

    recursive method find_pred(idx: Nat, p: recursive? pred(_: T) -> Bool): Nat? {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        if(l.is<PartialVector<T>>()) {
            let lm = l.find_pred[recursive?](p);
            if(lm.some_true()) {
                return idx + lm.min();
            }
            lcount = l.count();
        }
        else {
            let lres = l.find_pred[recursive](idx, p)
            if(lres !== none) {
                return lres;
            }
            lcount = l.count;
        }

        let nidx = idx + lcount; 
        if(r.is<PartialVector<T>>()) {
            let rm = r.find_pred[recursive?](p);
            if(rm.some_true()) {
                return nidx + rm.min();
            }
            else {
                return none;
            }
        }
        else {
            return r.find_pred[recursive](nidx, p);
        }
    }

    recursive method find_pred_idx(idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        if(l.is<PartialVector<T>>()) {
            let lm = l.find_pred_idx[recursive?](idx, p);
            if(lm.some_true()) {
                return idx + lm.min();
            }
            lcount = l.count();
        }
        else {
            let lres = l.find_pred_idx[recursive](idx, p)
            if(lres !== none) {
                return lres;
            }
            lcount = l.count;
        }

        let nidx = idx + lcount; 
        if(r.is<PartialVector<T>>()) {
            let rm = r.find_pred_idx[recursive?](nidx, p);
            if(rm.some_true()) {
                return nidx + rm.min();
            }
            else {
                return none;
            }
        }
        else {
            return r.find_pred_idx[recursive](nidx, p);
        }
    }

    recursive method find_last_pred(idx: Nat, p: recursive? pred(_: T) -> Bool): Nat? {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        if(l.is<PartialVector<T>>()) {
            lcount = l.count();
        }
        else {
            lcount = l.count;
        }

        let nidx = idx + lcount;
        if(r.is<PartialVector<T>>()) {
            let rm = r.find_last_pred[recursive?](p);
            if(rm.some_true()) {
                return nidx + rm.max();
            }
        }
        else {
            let rres = r.find_last_pred[recursive](nidx, p)
            if(rres !== none) {
                return rres;
            }
        }

        if(l.is<PartialVector<T>>()) {
            let lm = l.find_last_pred_idx[recursive?](idx, p);
           if(lm.some_true()) {
                return idx + lm.max();
            }
            else {
                return none;
            }
        }
        else {
            return l.find_last_pred[recursive](idx, p)
        }
    }

    recursive method find_last_pred_idx(idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        if(l.is<PartialVector<T>>()) {
            lcount = l.count();
        }
        else {
            lcount = l.count;
        }

        let nidx = idx + lcount;
        if(r.is<PartialVector<T>>()) {
            let rm = r.find_last_pred_idx[recursive?](nidx, p);
            if(rm.some_true()) {
                return nidx + rm.max();
            }
        }
        else {
            let rres = r.find_last_pred_idx[recursive](nidx, p)
            if(rres !== none) {
                return rres;
            }
        }

        if(l.is<PartialVector<T>>()) {
            let lm = l.find_last_pred_idx[recursive?](idx, p);
            if(lm.some_true()) {
                return idx + lm.max();
            }
            else {
                return none;
            }
        }
        else {
            return l.find_last_pred_idx[recursive](idx, p)
        }
    }

    recursive method filter_pred(p: recursive? pred(_: T) -> Bool): ListRepr<T> {
    }

    recursive method filter_pred_idx(p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        let l = this.left;
        let r = this.right;

        var lcount: Nat;
        var nl: ListRepr<T>;
        if(l.is<PartialVector<T>>()) {
            lcount = l.count();
            let lm = l.apply_pred_idx[recursive?](idx, p);
            if(lm.empty()) {
                nl = none;
            }
            else {
                nl = PartialVector<T>::s_select(l, lm);
            }
        }
        else {
            lcount = l.count;
            nl = l.filter_pred_idx[recursive](idx, p)
        }

        let nidx = idx + lcount; 
        var nr: ListRepr<T>;
        if(r.is<PartialVector<T>>()) {
            let rm = r.apply_pred_idx[recursive?](nidx, p);
            if(rm.empty()) {
                nr = none;
            }
            else {
                nr = PartialVector<T>::s_select(r, rm);
            }
        }
        else {
            nr = r.filter_pred_idx[recursive](nidx, p)
        }

        if(/\(nl === none, nr === none)) {
            return none;
        }
        elif(nl === none) {
            return nr;
        }
        elif(nr === none) {
            return nl;
        }
        elif(/\(nl.is<PartialVector<T>>(), nr.is<PartialVector<T>>())) {
            let nsize = nl.mask.count() + nr.mask.count();
            if(nsize <= 4) {
                return PartialVector<T>::s_append(nl, nr);
            }
            else {
                return ListTree<T>::append(nl, nr);
            }
        }
        else {
            return ListTree<T>::append(nl, nr);
        }
    }

    recursive method map<U>(p: recursive? pred(_: T) -> U): ListRepr<U> {
    }

    recursive method map_idx<U>(p: recursive? pred(_: T, _: Nat) -> U): ListRepr<U> {
    }
}

typedef ListRepr<T> = None | PartialVector<T> | ListTree<T>;
 

#endif
