//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive types used in the Bosque language
namespace Core;

internal entity NumericOps provides Some {
    __assume_safe function s_natToInt(n: Nat): Int number_nattoint
    __safe function s_natToBigNat(n: Nat): BigNat = number_nattobignat;

    __assume_safe function s_intToNat(i: Int): Nat = number_inttonat;
    __safe function s_intToBigInt(i: Int): BigInt = number_inttobigint;

    __assume_safe function s_bigNatToNat(n: BigNat): Nat = number_bignattonat;
    __safe function s_bigNatToBigInt(n: BigNat): BigInt = number_bignattobigint;
    __safe function s_bigNatToFloat(n: BigNat): Float = number_bignattofloat;
    __safe function s_bigNatToDecimal(n: BigNat): Decimal = number_bignattodecimal;
    __safe function s_bigNatToRational(n: BigNat): Rational = number_bignattorational;

    __assume_safe function s_bigIntToInt(i: BigInt): Int = number_biginttoint;
    __assume_safe function s_bigIntToBigNat(i: BigInt): BigNat = number_biginttobignat;
    __safe function s_bigIntToFloat(i: BigInt): Float = number_biginttofloat;
    __safe function s_bigIntToDecimal(i: BigInt): Decimal = number_biginttodecimal;
    __safe function s_bigIntToRational(i: BigInt): Rational = number_biginttorational;

    __safe function s_floatToBigInt(f: Float): BigInt = number_floattobigint;
    __safe function s_floatToDecimal(f: Float): Decimal = number_floattodecimal;
    __safe function s_floatToRational(f: Float): Rational = number_floattorational;

    __safe function s_decimalToBigInt(d: Decimal): BigInt = number_decimaltobigint;
    __safe function s_decimalToFloat(d: Decimal): Float = number_decimaltofloat;
    __safe function s_decimalToRational(d: Decimal): Rational = number_decimaltorational;

    __safe function s_rationalToBigInt(r: Rational): BigInt = number_rationaltobigint;
    __safe function s_rationalToFloat(r: Rational): Float = number_rationaltofloat;
    __safe function s_rationalToDeciaml(r: Rational): Decimal = number_rationaltodecimal;

    __safe function s_floatFloor(f: Float): Float = float_floor;
    __safe function s_floatCeil(f: Float): Float = float_ceil;
    __safe function s_floatTruncate(f: Float): Float = float_truncate;

    __safe function s_decimalFloor(d: Decimal): Decimal = decimal_floor;
    __safe function s_decimalCeil(d: Decimal): Decimal = decimal_ceil;
    __safe function s_decimalTruncate(f: Decimal): Decimal = decimal_truncate;

    //
    //TODO: there are some failure cases here we may want to include checks for (like x = 0, y = -2)
    //
    function s_floatPower(x: Float, y: Float): Float = float_power;
    function s_decimalPower(x: Decimal, y: Decimal): Decimal = decimal_power;

    __assume_safe function s_floatSqrt(x: Float): Float = float_sqrt;
    __assume_safe function s_decimalSqrt(x: Decimal): Decimal = decimal_sqrt;
}
