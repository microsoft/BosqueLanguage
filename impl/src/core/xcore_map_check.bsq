//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

#if CHECK_LIBS
internal function __map_literal_cons0<K grounded KeyType, V>(): MapRepr<K, V> {
    return none;
}

internal function __map_literal_cons1<K grounded KeyType, V>(e1: [K, V]): MapRepr<K, V> {
    return Vector1<[K, V]>{e1};
}

internal function __map_literal_cons2<K grounded KeyType, V>(e1: [K, V], e2: [K, V]): MapRepr<K, V> {
    if(KeyType::equal<K>(e1.0, e2.0)) {
        return none;
    }
    else {
        if(KeyType::less<K>(e2.0, e1.0)) {
            return Vector2<[K, V]>{e2, e1};
        }
        else {
            return Vector2<[K, V]>{e1, e2};
        }
    }
}

internal function __map_literal_cons3<K grounded KeyType, V>(e1: [K, V], e2: [K, V], e3: [K, V]): MapRepr<K, V> {
    if(\/(KeyType::equal<K>(e1.0, e2.0), KeyType::equal<K>(e1.0, e3.0), KeyType::equal<K>(e2.0, e3.0))) {
        return none;
    }
    else {
        if(/\(KeyType::less<K>(e3.0, e1.0), KeyType::less<K>(e3.0, e2.0))) {
            if(KeyType::less<K>(e2.0, e1.0)) {
                return Vector3<[K, V]>{e3, e2, e1};
            }
            else {
                return Vector3<[K, V]>{e3, e1, e2};
            }
        }
        elif(KeyType::less<K>(e2.0, e1.0)) {
            if(KeyType::less<K>(e3.0, e1.0)) {
                return Vector3<[K, V]>{e2, e3, e1};
            }
            else {
                return Vector3<[K, V]>{e2, e1, e3};
            }
        }
        else {
            if(KeyType::less<K>(e3.0, e2.0)) {
                return Vector3<[K, V]>{e1, e3, e2};
            }
            else {
                return Vector3<[K, V]>{e1, e2, e3};
            }
        }
    }
}

internal function __map_literal_cons_add<K grounded KeyType, V>(e: [K, V], mm: RecMapEntry<K, V>): RecMapEntry<K, V> {
    return mm.add[recursive](e.0, e.1);
}

internal function __map_literal_cons_add_done<K grounded KeyType, V>(count: Nat, mm: RecMapEntry<K, V>): MapRepr<K, V> {
    return RecMap<K, V>{count, mm};
}

internal function __map_literal_cons_append<K grounded KeyType, V>(m1: MapRepr<K, V>, m2: MapRepr<K, V>): MapRepr<K, V> {
    return MapOps::s_union<K, V>(m1, m2);
}

internal entity MapOps provides Some {
    __assume_safe function s_safeAs<T, U>(v: T): U map_safeas

    function s_empty<K grounded KeyType, V>(m: MapRepr<T>): Bool {
        return m === none;
    }

    function s_size<K grounded KeyType, V>(m: MapRepr<T>): Nat {
        if(m === none) {
            return 0n;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            return 1n;
        }
        elif(m.is<Vector2<[K, V]>>()) {
            return 2n;
        }
        elif(m.is<Vector3<[K, V]>>()) {
            return 3n;
        }
        else {
            return m.count;
        }
    }

    function s_has<K grounded KeyType, V>(m: MapRepr<K, V>, k: K): Bool {
        if(m === none) {
            return false;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            return KeyType::equal<K>(m.v0.0, k);
        }
        elif(m.is<Vector2<[K, V]>>()) {
            return \/(KeyType::equal<K>(m.v0.0, k), KeyType::equal<K>(m.v1.0, k));
        }
        elif(m.is<Vector3<T>>()) {
            return \/(KeyType::equal<K>(m.v0.0, k), KeyType::equal<K>(m.v1.0, k), KeyType::equal<K>(m.v2.0, k));
        }
        else {
            return m.has(k);
        }
    }

    function s_find<K grounded KeyType, V>(m: MapRepr<K, V>, k: K): [K, V]? {
        if(m === none) {
            return none;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return m.v0;
            }
            else {
                return none;
            }
        }
        elif(m.is<Vector2<[K, V]>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return m.v0;
            }
            elif(KeyType::equal<K>(m.v1.0, k)) {
                return m.v1;
            }
            else {
                return none;
            }
        }
        elif(m.is<Vector3<T>>()) {
             if(KeyType::equal<K>(m.v0.0, k)) {
                return m.v0;
            }
            elif(KeyType::equal<K>(m.v1.0, k)) {
                return m.v1;
            }
            elif(KeyType::equal<K>(m.v2.0, k)) {
                return m.v2;
            }
            else {
                return none;
            }
        }
        else {
            return m.find(k);
        }
    }

    function s_union<K grounded KeyType, V>(m1: MapRepr<K, V>, m2: MapRepr<K, V>): Map<K, V> {
        if(/\(m1 === none, m2 === none)) {
            return none;
        }
        elif(m1 === none) {
            return m2;
        }
        elif(m2 === none) {
            return m1;
        }
        elif(/\(m1.is<Vector1<[K, V]>>(), m2.is<Vector1<[K, V]>>())) {
            let mm1 = ListOps::s_safeAs<MapRepr<K, V>, Vector1<[K, V]>>(m1);
            let mm2 = ListOps::s_safeAs<MapRepr<K, V>, Vector1<[K, V]>>(m2);

            let kl0 = mm1.v0.0;
            let kr0 = mm2.v0.0;
            check !KeyType::equal<T>(kl0, kr0);

            if(KeyType::less<K>(kl0, kr0)) {
                return Vector2<[K, V]>{mm1.v0, mm2.v0};
            }
            else {
                return Vector2<[K, V]>{mm1.v0, mm2.v0};
            }
        }
        elif(/\(m1.is<Vector1<[K, V]>>(), m2.is<Vector2<[K, V]>>())) {
            let mm1 = ListOps::s_safeAs<MapRepr<K, V>, Vector1<[K, V]>>(m1);
            let mm2 = ListOps::s_safeAs<MapRepr<K, V>, Vector2<[K, V]>>(m2);

            let kl0 = mm1.v0.0;
            let kr0 = mm2.v0.0;
            let kr1 = mm2.v1.0;
            check /\(!KeyType::equal<T>(kl0, kr0), !KeyType::equal<T>(kl0, kr1));

            if(KeyType::less<K>(kl0, kr0)) {
                return Vector3<[K, V]>{mm1.v0, mm2.v0, mm2.v1};
            }
            elif(KeyType::less<K>(kl0, kr1)) {
                return Vector3<[K, V]>{mm2.v0, mm1.v0, mm2.v1};
            }
            else {
                return Vector3<[K, V]>{mm2.v0, mm2.v1, mm1.v0};
            }
        }
        elif(/\(m1.is<Vector2<[K, V]>>(), m2.is<Vector1<[K, V]>>())) {
            let mm1 = ListOps::s_safeAs<MapRepr<K, V>, Vector2<[K, V]>>(m1);
            let mm2 = ListOps::s_safeAs<MapRepr<K, V>, Vector1<[K, V]>>(m2);

            let kl0 = mm1.v0.0;
            let kl1 = mm1.v1.0;
            let kr0 = mm2.v0.0;
            check /\(!KeyType::equal<T>(kr0, kl0), !KeyType::equal<T>(kr0, kr1));

            if(KeyType::less<K>(kr0, kl0)) {
                return Vector3<[K, V]>{mm2.v0, mm1.v0, mm1.v1};
            }
            elif(KeyType::less<K>(kr0, kl1)) {
                return Vector3<[K, V]>{mm1.v0, mm2.v0, mm1.v1};
            }
            else {
                return Vector3<[K, V]>{mm1.v0, mm1.v1, mm2.v0};
            }
        }
        else {
            let ll, llc = RecMapEntry<T>::s_ensure_list(m1);
            let rr, rrc = RecMapEntry<T>::s_ensure_list(m2);

            return RecMap<K, V>{llc + rrc, RecMapEntry<K, V>::union(ll, rr)}; 
        }
    }

    recursive? function s_submap<K grounded KeyType, V>(m: MapRepr<K, V>, p: recursive? pred(k: K, v: V) -> Bool): MapRepr<K, V> {
        if(m === none) {
            return none;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            let v0 = m.v0;
            let p0 = p[recursive?](v0.0, v0.1);

            if(p0) {
                return m;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<[K, V]>>()) {
            let v0 = m.v0;
            let p0 = p[recursive?](v0.0, v0.1);
            let v1 = m.v1;
            let p1 = p[recursive?](v1.0, v1.1);

            if(/\(p0, p1)) {
                return m;
            }
            elif(p0) {
                return Vector1<[K, V]>{v0};
            }
            elif(p1) {
                return Vector1<[K, V]>{v1};
            }
            else {
                return none;
            }
        }
        elif(m.is<Vector3<[K, V]>>()) {
            let v0 = m.v0;
            let p0 = p[recursive?](v0.0, v0.1);
            let v1 = m.v1;
            let p1 = p[recursive?](v1.0, v1.1);
            let v2 = m.v2;
            let p2 = p[recursive?](v2.0, v2.1);

            if(/\(p0, p1, p2)) {
                return m;
            }
            elif(/\(p0, p1)) {
                return Vector2<[K, V]>{v0, v1};
            }
            elif(/\(p0, p2)) {
                return Vector2<[K, V]>{v0, v2};
            }
            elif(/\(p1, p2)) {
                return Vector2<[K, V]>{v1, v2};
            }
            elif(p0) {
                return Vector1<[K, V]>{v0};
            }
            elif(p1) {
                return Vector1<[K, V]>{v1};
            }
            elif(p2) {
                return Vector1<[K, V]>{v2};
            }
            else {
                return none;
            }
        }
        else {
            return m.submap[recursive?](p);
        }
    }

    recursive? function s_remap<K grounded KeyType, V, U>(m: MapRepr<K, V>, f: recursive? fn(k: K, v: V) -> U): MapRepr<K, U> {
        if(m === none) {
            return none;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            let v0 = m.v0;
            return Vector1<[K, U]>{[v0.0, f[recursive?](v0.0, v0.1)]};
        }
        elif(m.is<Vector2<[K, V]>>()) {
            let v0 = m.v0;
            let v1 = m.v1;
            return Vector2<[K, U]>{[v0.0, f[recursive?](v0.0, v0.1)], [v1.0, f[recursive?](v1.0, v1.1)]};
        }
        elif(m.is<Vector3<[K, V]>>()) {
            let v0 = m.v0;
            let v1 = m.v1;
            let v2 = m.v2;
            return Vector3<[K, U]>{[v0.0, f[recursive?](v0.0, v0.1)], [v1.0, f[recursive?](v1.0, v1.1)], [v2.0, f[recursive?](v2.0, v2.1)]};
        }
        else {
            return m.remap<U>[recursive?](f);
        }
    }

    function s_add<K grounded KeyType, V>(m: MapRepr<K, V>, k: K, v: V): MapRepr<K, V> {
        if(m === none) {
            return Vector1<[K, V]>{[k, v]};
        }
        elif(m.is<Vector1<[K, V]>>()) {
            check !KeyType::equal<K>(m.v0.0, k);
            if(KeyType::less<K>(k, m.v0.0)) {
                return Vector2<[K, V]>>{[k, v], m.v0};
            }
            else {
                return Vector2<[K, V]>>{m.v0, [k, v]};
            }
        }
        elif(m.is<Vector2<[K, V]>>()) {
            check !(\/(KeyType::equal<K>(m.v0.0, k), KeyType::equal<K>(m.v1.0, k)));
            if(KeyType::less<K>(k, m.v0.0)) {
                return Vector3<[K, V]>>{[k, v], m.v0, m.v1};
            }
            elif(KeyType::less<K>(k, m.v1.0)) {
                return Vector3<[K, V]>>{m.v0, [k, v], m.v1};
            }
            else {
                return Vector2<[K, V]>>{m.v0, m.v1, [k, v]};
            }
        }
        elif(m.is<Vector3<[K, V]>>()) {
            let ll4 = RecMapEntry<K, V>{m.v0, RecMapEntry<K, V>{m.v1, RecMapEntry<K, V>{m.v2, none}}}.add(k, v);
            return RecMap<K, V>{4n, ll4};
        }
        else {
            return m.add(k, v);
        }
    }

    function s_set<K grounded KeyType, V>(m: MapRepr<K, V>, k: K, v: V): MapRepr<K, V> {
        if(m.is<Vector1<[K, V]>>()) {
            check KeyType::equal<K>(m.v0.0, k);
            return Vector1<[K, V]>{[k, v]};
        }
        elif(m.is<Vector2<[K, V]>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return Vector2<[K, V]>>{[k, v], m.v1};
            }
            else {
                check KeyType::equal<K>(m.v1.0, k);
                return Vector2<[K, V]>>{m.v0, [k, v]};
            }
        }
        elif(m.is<Vector3<T>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return Vector3<[K, V]>>{[k, v], m.v1, m.v2};
            }
            elif(KeyType::equal<K>(m.v1.0, k)) {
                return Vector3<[K, V]>>{m.v0, [k, v], m.v2};
            }
            else {
                check KeyType::equal<K>(m.v2.0, k);
                return Vector3<[K, V]>>{m.v0, m.v1, [k, v]};
            }
        }
        else {
            return MapOps::s_safeAs<MapRepr<K, V>, RecMap<K, V>>(m).set(k, v);
        }
    }

    function s_remove<K grounded KeyType, V>(m: MapRepr<K, V>, k: K): MapRepr<K, V> {
        if(m.is<Vector1<[K, V]>>()) {
            check KeyType::equal<K>(m.v0.0, k);
            return none;
        }
        elif(m.is<Vector2<[K, V]>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return Vector1<[K, V]>>{m.v1};
            }
            else {
                check KeyType::equal<K>(m.v1.0, k);
                return Vector1<[K, V]>>{m.v0};
            }
        }
        elif(m.is<Vector3<T>>()) {
            if(KeyType::equal<K>(m.v0.0, k)) {
                return Vector2<[K, V]>>{m.v1, m.v2};
            }
            elif(KeyType::equal<K>(m.v1.0, k)) {
                return Vector2<[K, V]>>{m.v0, m.v2};
            }
            else {
                check KeyType::equal<K>(m.v2.0, k);
                return Vector2<[K, V]>>{m.v0, m.v1};
            }
        }
        else {
            return MapOps::s_safeAs<MapRepr<K, V>, RecMap<K, V>>(m).remove(k);
        }
    }

    function s_check_ordered<K grounded KeyType, V>(m: MapRepr<K, V>): Bool {
        if(m === none) {
            return true;
        }
        elif(m.is<Vector1<[K, V]>>()) {
            return true;
        }
        elif(m.is<Vector2<[K, V]>>()) {
            return KeyType::less<K>(m.v0.0, m.v1.0);
        }
        elif(m.is<Vector3<[K, V]>>()) {
            return /\(KeyType::less<K>(m.v0.0, m.v1.0), KeyType::less<K>(m.v1.0, m.v2.0));
        }
        else {
            return m.checkOrdered();
        }
    }
}

entity RecMap<K grounded KeyType, V> provides Some {
    field count: Nat;
    field ll: RecMapEntry<K, V>;

    method has(k: K): Bool {
        return this.t.has[recursive](k);
    }

    method find(k: K): [K, V]? {
        return this.t.find[recursive](k);
    }

    function union(m1: BTree<K, V>, m2: BTree<K, V>): RecMap<K, V> {
        let um = RecMapEntry<K, V>::union[recursive](m1.ll, m2.ll);
        return RecMap<K, V>{m1.count + m2.count, um};
    }

    recursive? method submap(p: recursive? pred(k: K, v: V) -> Bool): RecMap<K, V>? {
        let uu, us = this.ll.submap[recursive](p);
        if(uu === none) {
            return none;
        }
        else {
            return RecMap<K, V>{us, uu};
        }
    }

    recursive? method remap<U>(f: recursive? fn(k: K, v: V) -> U): RecMap<K, U> {
        let um = this.ll.remap<U>[recursive](f);
        return RecMap<K, V>{this.count, um};
    }

    method add(k: K, v: V): RecMap<K, V> {
        return RecMap<K, V>{this.count + 1, this.ll.add[recursive](k, v)};
    }

    method set(m: MapRepr<K, V>, k: K, v: V): RecMap<K, V> {
        return RecMap<K, V>{this.count, this.ll.set[recursive](k, v)};
    }

    method remove(k: K): RecMapEntry<K, V>? {
        let rl = this.ll.set[recursive](k);
        let rrl = MapOps::s_safeAs<RecMapEntry<K, V>?, RecMapEntry<K, V>>(rl);

        if(this.count == 4) {
            let h0 = rrl.head;
            let tl0 = MapOps::s_safeAs<RecMapEntry<K, V>?, RecMapEntry<K, V>>(rrl.tail);
            let h1 = tl0.head;
            let tl1 = MapOps::s_safeAs<RecMapEntry<K, V>?, RecMapEntry<K, V>>(tl0.tail);
            let h2 = tl1.head;

            return Vector3<[K, V]>>{h0, h1, h2}; 
        }
        else {
            return RecMap<K, V>{this.count - 1n, rrl};
        }
    }

    method checkOrdered(): Bool {
        let ttl = this.ll.tail;
        if(ttl === none) {
            return true;
        }
        else {
             return ttl.checkOrdered[recursive](this.ll.head.0);
        }
    }
}

entity RecMapEntry<K grounded KeyType, V> provides Some {
    field head: [K, V];
    field tail RecMapEntry<K, V>?;

    function s_vector1_to_list(m: Vector1<[K, V]>): RecMapEntry<K, V> {
        return RecMapEntry<K, V>{m.v0, none};
    }

    function s_vector2_to_list(m: Vector2<[K, V]>): RecMapEntry<K, V> {
        return RecMapEntry<K, V>{m.v0, RecMapEntry<K, V>{m.v1, none}};
    }

    function s_vector3_to_list(m: Vector3<[K, V]>): RecMapEntry<K, V> {
        return RecMapEntry<K, V>{m.v0, RecMapEntry<K, V>{m.v1, RecMapEntry<K, V>{m.v2, none}}};
    }

    function s_ensure_list(m: Vector1<[K, V]> | Vector2<[K, V]> | Vector3<[K, V]> | RecMap<K, V>): RecMapEntry<K, V>, Nat {
        if(m.is<RecMap<K, V>>()) {
            return m.ll, m.count;
        }
        else {
            if(m.is<Vector1<[K, V]>>()) {
                return RecMapEntry<T>::s_vector1_to_list(m), 1n;
            }
            elif(m.is<Vector2<[K, V]>>()) {
                return RecMapEntry<T>::s_vector2_to_list(m), 2n;
            }
            else {
                return RecMapEntry<T>::s_vector3_to_list(m), 3n;
            }
        }
    }

    recursive method has(k: K): Bool {
        let hh = this.head;
        if(KeyType::equal<K>(hh.0, k)) {
            return true;
        }
        else {
            let tl = this.tail;
            if(tl === none) {
                return false;
            }
            else {
                return tl.has[recursive](k);
            }
        }
    }

    method find(k: K): [K, V]? {
        let hh = this.head;
        if(KeyType::equal<K>(hh, k)) {
            return hh;
        }
        else {
            let tl = this.tail;
            if(tl === none) {
                return none;
            }
            else {
                return tl.find[recursive](k);
            }
        }
    }

    recursive function union(m1: RecMapEntry<K, V>, m2: RecMapEntry<K, V>): RecMapEntry<K, V> {
        let m1tl = m1.tail;
        let m1hh = m1.head;
        let m2tl = m2.tail;
        let m2hh = m2.head;

        if(KeyType::less<T>(m1hh.0, m2hh.0)) {
            if(m1tl === none) {
                return RecMapEntry<T>{m1hh, m2};
            }
            else {
                let um = RecMapEntry<K, V>::union(m1tl, m2);
                return RecMapEntry<T>{m1hh, um};
            }
        }
        else {
            if(m2tl === none) {
                return RecMapEntry<T>{m2hh, m1};
            }
            else {
                let um = RecMapEntry<K, V>::union(m1, m2tl);
                return RecMapEntry<T>{m2hh, um};
            }
        }
    }

    recursive method submap(p: recursive? pred(k: K, v: V) -> Bool): RecMapEntry<K, V>?, Nat {
        let tl = this.tail;
        let hh = this.head;

        let ph = p[recursive?](hh.0, hh.1);
        if(tl === none) {
            if(ph) {
                return RecMapEntry<T>{hh, none}, 1n;
            }
            else {
                return none, 0n;
            }
        }
        else {
            let ntl, nts = tl.submap[recursive](p);
            if(ph) {
                return RecMapEntry<T>{hh, ntl}, nts + 1n;
            }
            else {
                return ntl, nts;
            }
        }
    }

    recursive method remap<U>(f: recursive? fn(k: K, v: V) -> U): RecMapEntry<K, U> {
        let tl = this.tail;
        let hh = this.head;

        let nh = f[recursive?](hh.0, hh.1);
        if(tl === none) {
            return RecMapEntry<K, U>{nh, none};
        }
        else {
            let ntl = tl.remap<U>[recursive](f);
            return RecMapEntry<K, U>{nh, ntl};
        }
    }

    recursive method add(k: K, v: V): RecMapEntry<K, V> {
        let kk = this.head.0;
        check !KeyType::equal<K>(k, kk);
        
        if(KeyType::less<K>(k, kk)) {
            let tl = this.ll.tail;
            if(tl === none) {
                ntl = RecMapEntry<K, V>{[k, v], none};
            }
            else {
                ntl = tl.add[recursive](k, v);
            }

            return RecMapEntry<K, V>{this.head, ntl};
        }
        else {
            return RecMapEntry<K, V>{[k, v], this.tail};
        }
    }

    recursive method set(m: MapRepr<K, V>, k: K, v: V): RecMapEntry<K, V> {
        let kk = this.head.0;
        if(KeyType::equal<K>(k, kk)) {
            return RecMapEntry<K, V>{[k, v], this.tail};
        }
        else {
            let tl = this.tail;
            check tl !== none;

            let ntl = tl.set[recursive](k, v);
            return RecMapEntry<K, V>{this.head, ntl};
        }
    }

    recursive method remove(k: K): RecMapEntry<K, V>? {
        let kk = this.head.0;
        if(KeyType::equal<K>(k, kk)) {
            return this.tail;
        }
        else {
            let tl = this.tail;
            check tl !== none;

            let ntl = tl.remove[recursive](k);
            return RecMapEntry<K, V>{this.head, ntl};
        }
    }

    recursive method checkOrdered(k: K): Bool {
        let hk = this.head.0;
        if(!KeyType::less<K>(k, hk)) {
            return false;
        }
        else {
            let tl = this.tail;
            if(tail === none) {
                return true;
            }
            else {
                return tl.checkOrdered(hk);
            }
       }
    }
}

internal typedef MapRepr<K grounded KeyType, V> = None | Vector1<[K, V]> | Vector2<[K, V]> | Vector3<[K, V]> | RecMap<[K, V]>;

#endif
