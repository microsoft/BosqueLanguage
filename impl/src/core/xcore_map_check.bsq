//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

#if CHECK_LIBS
internal entity MapOps provides Some {
    internal function s_blockingfailure<T>(): T = s_blockingfailure;

    __safe internal function s_map_empty<K grounded KeyType, V>(m: Map<K, V>): Bool = s_map_empty; 
    __safe internal function s_map_count<K grounded KeyType, V>(m: Map<K, V>): Nat = s_map_count; 

    __safe internal function s_map_has<K grounded KeyType, V>(m: Map<K, V>, k: K): Bool = s_map_has; 
    __safe internal function s_map_get<K grounded KeyType, V>(m: Map<K, V>, k: K): [K, V] = s_map_get; 
    
    __safe internal function s_map_disjoint<K grounded KeyType, V>(m1: Map<K, V>, m2: Map<K, V>): Bool = s_map_disjoint;
    __safe internal function s_map_union<K grounded KeyType, V>(m1: Map<K, V>, m2: Map<K, V>): Map<K, V> = s_map_union; 

    __safe internal function s_map_add<K grounded KeyType, V>(m: Map<K, V>, k: K, vtup: [K, V]): Map<K, V> = s_large_map_add; 
    __safe internal function s_map_set<K grounded KeyType, V>(m: Map<K, V>, k: K, vtup: [K, V]): Map<K, V> = s_large_map_set;
    __safe internal function s_map_remove<K grounded KeyType, V>(m: Map<K, V>, k: K): Map<K, V> = s_large_map_remove;  
}
#endif
