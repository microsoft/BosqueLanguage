//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

#if CHECK_LIBS
internal entity ListOps provides Some {
    internal function s_blockingfailure<T>(): T = s_blockingfailure; 

    function s_empty<T>(l: ListRepr<T>): Bool {
        return l === none;
    }

    function s_size<T>(l: ListRepr<T>): Nat {
        if(l === none) {
            return 0n;
        }
        elif(l.is<Vector1<T>>()) {
            return 1n;
        }
        elif(l.is<Vector2<T>>()) {
            return 2n;
        }
        elif(l.is<Vector3<T>>()) {
            return 3n;
        }
        else {
            return l.count();
        }
    }

    function s_range<T unique Int | Nat>(start: T, end: T, one: T, count: Nat): ListRepr<T> {
        if(start == end) {
            return none;
        }
        else {
            if(count == 1n) {
                return Vector1<T>{start};
            }
            elif(count == 2n) {
                return Vector2<T>{start, end};
            }
            elif(count == 3n) {
                return Vector3<T>{start, start + one, end};
            }
            else {
                return LargeList<T>::range(start, one, count);
            }
        }
    }

    function s_fill<T>(count: Nat, v: T): ListRepr<T> {
        if(count == 0n) {
            return none;
        }
        elif(count == 1n) {
            return Vector1<T>{v};
        }
        elif(count == 2n) {
            return Vector2<T>{v, v};
        }
        elif(count == 3n) {
            return Vector3<T>{v, v, v};
        }
        else {
            return LargeList<T>::fill(count, v);
        }
    }

    function s_zip_index<T>(l: ListRepr<T>): ListRepr<[Nat, T]> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return Vector1<T>{[0, ll.v0]};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<T>{[0, ll.v0], [1, ll.v1]};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<T>{[0, ll.v0], [1, ll.v1], [2, ll.v2]};
        }
        else {
            return l.zip_index();
        }
    }

    function s_zip<T, U>(l1: ListRepr<T>, l2: ListRepr<U>): ListRepr<[T, U]> {
        if(\/(l1 === none, l2 === none)) {
            return none;
        }
        elif(/\(l1.is<Vector1<T>>(), l2.is<Vector1<U>>())) {
            let ll1 = s_safeAs<ListRepr<T>, Vector1<T>>(l1);
            let ll2 = s_safeAs<ListRepr<U>, Vector1<U>>(l2);

            return Vector1<[T, U]>{[l11.v0, l12.v0]};
        }
        elif(/\(l1.is<Vector2<T>>(), l2.is<Vector2<U>>())) {
            let ll1 = s_safeAs<ListRepr<T>, Vector2<T>>(l1);
            let ll2 = s_safeAs<ListRepr<U>, Vector2<U>>(l2);

            return Vector2<[T, U]>{[l1.v0, l2.v0], [l1.v1, l2.v1]};
        }
        elif(/\(l1.is<Vector3<T>>(), l2.is<Vector3<U>>())) {
            let ll1 = s_safeAs<ListRepr<T>, Vector3<T>>(l1);
            let ll2 = s_safeAs<ListRepr<U>, Vector3<U>>(l2);

            return Vector3<[T, U]>{[l1.v0, l2.v0], [l1.v1, l2.v1], [l1.v2, l2.v2]};
        }
        else {
            let ll1 = s_safeAs<ListRepr<T>, LargeList<T>>(l1);
            let ll2 = s_safeAs<ListRepr<U>, LargeList<U>>(l2);

            return ll1.zip<U>(ll2);
        }
    }

    function s_append<T>(l: ListRepr<T>, r: ListRepr<T>): ListRepr<T> {
        if(/\(l === none, r === none)) {
            return none;
        }
        elif(l === none) {
            return r;
        }
        elif(r === none) {
            return l;
        }
        elif(/\(l.is<Vector1<T>>(), r.is<Vector1<T>>())) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let rr = s_safeAs<ListRepr<T>, Vector1<T>>(r);

            return Vector2<T>{ll.v0, rr.v0};
        }
        elif(/\(l.is<Vector1<T>>(), r.is<Vector2<T>>())) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let rr = s_safeAs<ListRepr<T>, Vector2<T>>(r);

            return Vector3<T>{ll.v0, rr.v0, rr.v1};
        }
        elif(/\(l.is<Vector2<T>>(), r.is<Vector1<T>>())) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            let rr = s_safeAs<ListRepr<T>, Vector1<T>>(r);

            return Vector3<T>{ll.v0, ll.v1, rr.v0};
        }
        else {
            return LargeList<T>::s_append(ll, rr); 
        }
    }

    function s_concat(ll: ListRepr<List<T>>): ListRepr<T> {
        if(ll === none) {
            return none;
        }
        elif(ll.is<Vector1<T>>()) {
            return ll.v0.value();
        }
        elif(ll.is<Vector2<T>>()) {
            return ListOps::s_append<T>(ll.v0.value(), ll.v1.value());
        }
        elif(ll.is<Vector3<T>>()) {
            return ListOps::s_append<T>(ListOps::s_append<T>(ll.v0.value(), ll.v1.value()), ll.v2.value());
        }
        else {
            return ListOps::s_reduce<List<T>, ListRepr<T>>(ll, none, fn(rl: ListRepr<T>, v: List<T>): ListRepr<T> => ListOps::s_append<T>(rl, v.value));
        }
    }

    function s_slice_start<T>(l: ListRepr<T>, start: Nat): ListRepr<T> {
        if(start == 0n) {
            return l;
        }

        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return none;
        }
        elif(l.is<Vector2<T>>()) {
            if(start == 2) {
                return none;
            }
            else {
                return Vector1<T>{l.v1};
            }
        }
        elif(l.is<Vector3<T>>()) {
            if(start == 3) {
                return none;
            }
            elif(start == 2) {
                return Vector1<T>{l.v2};
            }
            else {
                return Vector2<T>{l.v1, l.v2};
            }
        }
        else {
            if(start == l.count()) {
                return none;
            }
            else {
                return LargeList<T>::s_slice_start(l, start);
            }
        }
    }

    function s_slice_end<T>(l: ListRepr<T>, end: Nat): ListRepr<T> {
        if(end == 0n) {
            return none;
        }

        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(end == 2) {
                return l;
            }
            else {
                return Vector1<T>{ll.v0};
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(end == 3) {
                return l;
            }
            elif(end == 2) {
                return Vector2<T>{ll.v0, ll.v1};
            }
            else {
                return Vector1<T>{ll.v0};
            }
        }
        else {
            if(end == l.count()) {
                return l;
            }
            else {
                return LargeList<T>::s_slice_end(l, end);
            }
        }
    }

    function s_safe_get<T>(l: ListRepr<T>, i: Nat): T {
        assert(l !== none);

        if(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return ll.v0;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(i == 0n) {
                return ll.v0;
            }
            else {
                return ll.v1;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(i == 0n) {
                return ll.v0;
            }
            elif(i == 1n) {
                return ll.v1;
            }
            else {
                return ll.v2;
            }
        }
        else {
            return l.safe_get(i);
        }
    }

    recursive? function s_has_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return p[recursive?](ll.v0);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return \/(p[recursive?](ll.v0), p[recursive?](ll.v1));
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return \/(p[recursive?](ll.v0), p[recursive?](ll.v1), p[recursive?](ll.v2));
        }
        else {
            return l.has_pred[recursive?](p);
        }
    }

    recursive? function s_has_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return p[recursive?](ll.v0, 0n);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return \/(p[recursive?](ll.v0, 0n), p[recursive?](ll.v1, 1n));
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return \/(p[recursive?](ll.v0, 0n), p[recursive?](ll.v1, 1n), p[recursive?](ll.v2, 2n));
        }
        else {
            return l.has_pred_idx[recursive?](p);
        }
    }

    recursive? function s_find_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            if(p[recursive?](ll.v0)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(p[recursive?](ll.v0)) {
                return 0n;
            }
            elif(p[recursive?](ll.v1)) {
                return 1n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(p[recursive?](ll.v0)) {
                return 0n;
            }
            elif(p[recursive?](ll.v1)) {
                return 1n;
            }
            elif(p[recursive?](ll.v2)) {
                return 2n;
            }
            else {
                return none;
            }
        }
        else {
            return l.find_pred[recursive?](p);
        }
    }

    recursive? function s_find_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            if(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            elif(p[recursive?](ll.v1, 1n)) {
                return 1n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            elif(p[recursive?](ll.v1, 1n)) {
                return 1n;
            }
            elif(p[recursive?](ll.v2, 2n)) {
                return 2n;
            }
            else {
                return none;
            }
        }
        else {
            return l.find_pred_idx[recursive?](p);
        }
    }

    recursive? function s_find_last_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            if(p[recursive?](ll.v0)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(p[recursive?](ll.v1)) {
                return 1n;
            }
            elif(p[recursive?](ll.v0)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(p[recursive?](ll.v2)) {
                return 2n;
            }
            elif(p[recursive?](ll.v1)) {
                return 1n;
            }
            elif(p[recursive?](ll.v0)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        else {
            return l.find_last_pred[recursive?](p);
        }
    }

    recursive? function s_find_last_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            if(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(p[recursive?](ll.v1, 1n)) {
                return 1n;
            }
            elif(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(p[recursive?](ll.v2, 2n)) {
                return 2n;
            }
            elif(p[recursive?](ll.v1, 1n)) {
                return 1n;
            }
            elif(p[recursive?](ll.v0, 0n)) {
                return 0n;
            }
            else {
                return none;
            }
        }
        else {
            return l.find_last_pred_idx[recursive?](p);
        }
    }

    recursive? function s_filter_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0);

            if(p0) {
                return l;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0);
            let v1 = ll.v1;
            let p1 = p[recursive?](v1);

            if(/\(p0, p1)) {
                return l;
            }
            elif(p0) {
                return Vector1<T>{v0};
            }
            elif(p1) {
                return Vector1<T>{v1};
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0);
            let v1 = ll.v1;
            let p1 = p[recursive?](v1);
            let v2 = ll.v2;
            let p2 = p[recursive?](v2);

            if(/\(p0, p1, p2)) {
                return l;
            }
            elif(/\(p0, p1)) {
                return Vector2<T>{v0, v1};
            }
            elif(/\(p0, p2)) {
                return Vector2<T>{v0, v2};
            }
            elif(/\(p1, p2)) {
                return Vector2<T>{v1, v2};
            }
            elif(p0) {
                return Vector1<T>{v0};
            }
            elif(p1) {
                return Vector1<T>{v1};
            }
            elif(p2) {
                return Vector1<T>{v2};
            }
            else {
                return none;
            }
        }
        else {
            return l.filter_pred[recursive?](p);
        }
    }

    recursive? function s_filter_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0, 0n);

            if(p0) {
                return l;
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0, 0n);
            let v1 = ll.v1;
            let p1 = p[recursive?](v1, 1n);

            if(/\(p0, p1)) {
                return l;
            }
            elif(p0) {
                return Vector1<T>{v0};
            }
            elif(p1) {
                return Vector1<T>{v1};
            }
            else {
                return none;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);

            let v0 = ll.v0;
            let p0 = p[recursive?](v0, 0n);
            let v1 = ll.v1;
            let p1 = p[recursive?](v1, 1n);
            let v2 = ll.v2;
            let p2 = p[recursive?](v2, 2n);

            if(/\(p0, p1, p2)) {
                return l;
            }
            elif(/\(p0, p1)) {
                return Vector2<T>{v0, v1};
            }
            elif(/\(p0, p2)) {
                return Vector2<T>{v0, v2};
            }
            elif(/\(p1, p2)) {
                return Vector2<T>{v1, v2};
            }
            elif(p0) {
                return Vector1<T>{v0};
            }
            elif(p1) {
                return Vector1<T>{v1};
            }
            elif(p2) {
                return Vector1<T>{v2};
            }
            else {
                return none;
            }
        }
        else {
            return l.filter_pred_idx[recursive](p);
        }
    }

    recursive? function s_map<T, U>(l: ListRepr<T>, f: recursive? fn(_: T) -> U): ListRepr<U> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return Vector1<U>{f[recursive?](ll.v0)};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<U>{f[recursive?](ll.v0), f[recursive?](ll.v1)};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<U>{f[recursive?](ll.v0), f[recursive?](ll.v1), f[recursive?](ll.v2)};
        }
        else {
            return l.map[recursive?](f);
        }
    }

    recursive? function s_map_idx<T, U>(l: ListRepr<T>, f: recursive? fn(_: T, _: Nat) -> U): ListRepr<U> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return Vector1<U>{f[recursive?](ll.v0, 0n)};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<U>{f[recursive?](ll.v0, 0n), f[recursive?](ll.v1, 1n)};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<U>{f[recursive?](ll.v0, 0n), f[recursive?](ll.v1, 1n), f[recursive?](ll.v2, 2n)};
        }
        else {
            return l.map_idx[recursive?](f);
        }
    }

    recursive? function s_min_arg<T, U unique Orderable>(l: ListRepr<T>, f: recursive? fn(v: T) -> U): Nat {
        if(l === none) {
            return 0n;
        }
        elif(l.is<Vector1<T>>()) {
            return 0n;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(f[recursive?](ll.v1) < f[recursive?](ll.v0)) {
                return 1n;
            }
            else {
                return 0n;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let lt21 = f[recursive?](ll.v2) < f[recursive?](ll.v1);
            let lt20 = f[recursive?](ll.v2) < f[recursive?](ll.v0);
            let lt10 = f[recursive?](ll.v1) < f[recursive?](ll.v0);
            if(/\(lt21, lt20)) {
                return 2n;
            }
            elif(lt10) {
                return 1n;
            }
            else {
                return 0n;
            }
        }
        else {
            return l.min_arg[recursive?](f);
        }
    }

    recursive? function s_max_arg<T, U unique Orderable>(l: ListRepr<T>, f: recursive? fn(v: T) -> U): Nat {
        if(l === none) {
            return 0n;
        }
        elif(l.is<Vector1<T>>()) {
            return 0n;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(f[recursive?](l.v1) > f[recursive?](ll.v0)) {
                return 1n;
            }
            else {
                return 0n;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let gt21 = f[recursive?](ll.v2) > f[recursive?](ll.v1);
            let gt20 = f[recursive?](ll.v2) > f[recursive?](ll.v0);
            let gt10 = f[recursive?](ll.v1) > f[recursive?](ll.v0);
            if(/\(gt21, gt20)) {
                return 2n;
            }
            elif(gt10) {
                return 1n;
            }
            else {
                return 0n;
            }
        }
        else {
            return l.max_arg[recursive?](f);
        }
    }

    function s_sum<T unique Algebraic>(l: ListRepr<T>): T {
        if(l === none) {
            return T::zero;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return ll.v0;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return ll.v0 + ll.v1;
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return ll.v0 + ll.v1 + ll.v2;
        }
        else {
            return l.sum();
        }
    }

    recursive? function s_sort<T>(l: ListRepr<T>, cmp: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(!cmp[recursive?](ll.v1, ll.v0)) {
                return l;
            }
            else {
                return List<T>{ll.v1, ll.v0};
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let l10 = cmp[recursive?](ll.v1, ll.v0);
            let l20 = cmp[recursive?](ll.v2, ll.v0);
            let l21 = cmp[recursive?](ll.v2, ll.v1);

            if(/\(l20, l21)) {
                if(l10) {
                    return Vector3<T>{ll.v2, ll.v1, ll.v0};
                }
                else {
                    return Vector3<T>{ll.v2, ll.v0, ll.v1};
                }
            }
            elif(/\(l10, !l21)) {
                if(l20) {
                    return Vector3<T>{ll.v1, ll.v2, ll.v0};
                }
                else {
                    return Vector3<T>{ll.v1, ll.v0, ll.v2};
                }
            }
            else {
                if(l21) {
                    return Vector3<T>{ll.v0, ll.v2, ll.v1};
                }
                else {
                    return Vector3<T>{ll.v0, ll.v1, ll.v2};
                }
            }
        }
        else {
            return l.sort[recursive?](eq);
        }
    }

    recursive? function s_unique_from_sorted<T>(l: ListRepr<T>, eq: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(eq[recursive?](ll.v0, ll.v1)) {
                return Vector1<T>{ll.v0};
            }
            else {
                return l;
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let eq01 = eq[recursive?](ll.v0, ll.v1);
            let eq02 = eq[recursive?](ll.v0, ll.v2);
            let eq12 = eq[recursive?](ll.v1, ll.v2);
            

            if(/\(eq01, eq02)) {
                return Vector1<T>{ll.v0};
            }
            elif(eq01) {
                return Vector2<T>{ll.v0, ll.v2};
            }
            elif(eq02) {
                return Vector2<T>{ll.v0, ll.v1};
            }
            elif(eq12) {
                return Vector2<T>{ll.v0, ll.v1};
            }
            else {
                return l;
            }
        }
        else {
            return l.unique_from_sorted[recursive?](eq);
        }
    }
    
    function s_reverse(l: ListRepr<T>): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<T>{ll.v1, ll.v0};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<T>{ll.v2, ll.v1, ll.v0};
        }
        else {
            return l.reverse[recursive]();
        }
    }

    function s_set<T>(l: ListRepr<T>, i: Nat, v: T): ListRepr<T> {
        if(l.is<Vector1<T>>()) {
            return Vector1<T>{v};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(i == 0n) {
                return Vector2<T>{v, ll.v1};
            }
            else {
                return Vector2<T>{ll.v0, v};
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(i == 0n) {
                return Vector3<T>{v, ll.v1, ll.v2};
            }
            elif(i == 1n) {
                return Vector3<T>{ll.v0, v, ll.v2};
            }
            else {
                return Vector3<T>{ll.v0, ll.v1, v};
            }
        }
        else {
            let ll = s_safeAs<ListRepr<T>, LargeList<T>>(l);
            return ll.set(i, v);
        }
    }

    function s_remove<T>(l: ListRepr<T>, i: Nat): ListRepr<T> {
        if(l.is<Vector1<T>>()) {
            return none;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            if(i == 0n) {
                return Vector1<T>{ll.v1};
            }
            else {
                return Vector1<T>{ll.v0};
            }
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            if(i == 0n) {
                return Vector2<T>{ll.v1, ll.v2};
            }
            elif(i == 1n) {
                return Vector2<T>{ll.v0, ll.v2};
            }
            else {
                return Vector2<T>{ll.v0, ll.v1};
            }
        }
        else {
            let ll = s_safeAs<ListRepr<T>, LargeList<T>>(l);
            return ll.remove(i);
        }
    }

    recursive? function s_reduce<T, U>(l: ListRepr<T>, init: U, op: recursive? fn(_: U, _: T) -> U): U {
        if(l === none) {
            return init;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return op[recursive?](init, ll.v0);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return op[recursive?](op[recursive?](init, ll.v0), ll.v1);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return op[recursive?](op[recursive?](op[recursive?](init, ll.v0), ll.v1), ll.v2);
        }
        else {
            return l.reduce<U>[recursive?](init, op);
        }
    }

    recursive? function s_reduce_idx<T, U>(l: ListRepr<T>, init: U, op: recursive? fn(_: U, _: T, _: Nat) -> U): U {
        if(l === none) {
            return init;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return op[recursive?](init, ll.v0, 0n);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return op[recursive?](op[recursive?](init, ll.v0, 0n), ll.v1, 1n);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return op[recursive?](op[recursive?](op[recursive?](init, ll.v0, 0n), ll.v1, 1n), ll.v2, 2n);
        }
        else {
            return l.reduce_idx<U>[recursive?](init, op);
        }
    }

    recursive? function s_transduce<T, E, U>(l: ListRepr<T>, env: E, op: recursive? fn(_: T, _: T) -> (|E, U|)): (|E, ListRepr<U>|) {
        if(l === none) {
            return (|env, none|);
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            return (|e0, Vector1<U>{v0}|);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            let e1, v1 = op[recursive?](e0, ll.v1);
            return (|e1, Vector2<U>{v0, v1}|);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            let e1, v1 = op[recursive?](e0, ll.v1);
            let e2, v2 = op[recursive?](e1, ll.v2);
            return (|e2, Vector2<U>{v0, v1, v2}|);
        }
        else {
            return l.transduce<E, U>[recursive?](env, op);
        }
    }

    recursive? function s_transduce_idx<T, E, U>(l: ListRepr<T>, env: E, op: recursive? fn(_: E, _: T, _: Nat) -> (|E, U|)): (|E, ListRepr<U>|) {
        if(l === none) {
            return (|env, none|);
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            return (|e0, Vector1<U>{v0}|);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            let e1, v1 = op[recursive?](e0, ll.v1, 1n);
            return (|e1, Vector2<U>{v0, v1}|);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            let e1, v1 = op[recursive?](e0, ll.v1, 1n);
            let e2, v2 = op[recursive?](e1, ll.v2, 2n);
            return (|e2, Vector2<U>{v0, v1, v2}|);
        }
        else {
            return l.transduce_idx<E, U>[recursive?](env, op);
        }
    }
}

internal entity LargeList<T> provides Some {
    //TODO: what repr do we want here
    //  field v1: Vector3<T>;
    //  field v2: Vector1<T> | Vector2<T> | Vector3<T>;
    //Or something else

    method count(): Nat {
        return ListOps::s_blockingfailure<Nat>();
    }

    function {when T unique Int | Nat} range(start: T, one: T, count: Nat): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    function fill(count: Nat, v: T): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    method zip_index(idx: Nat): LargeList<[Nat, T]> {
        return ListOps::s_blockingfailure<LargeList<[Nat, T]>>();
    }

    method zip<U>(ol: LargeList<U>): LargeList<[T, U]> {
        return ListOps::s_blockingfailure<LargeList<[T, U]>>();
    }

    function s_append(l: ListRepr<T>, r: ListRepr<T>): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    function s_slice_start(l: LargeList<T>, idx: Nat): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }

    function s_slice_end(l: LargeList<T>, idx: Nat): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }

    method safe_get(i: Nat): T {
        return ListOps::s_blockingfailure<T>();
    }

    recursive? method has_pred(p: recursive? pred(_: T) -> Bool): Bool {
        return ListOps::s_blockingfailure<Bool>();
    }

    recursive? method has_pred_idx(p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return ListOps::s_blockingfailure<Bool>();
    }

    recursive? method find_pred(p: recursive? pred(_: T) -> Bool): Nat? {
        return ListOps::s_blockingfailure<Bool>();
    }

    recursive? method find_pred_idx(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        return ListOps::s_blockingfailure<Nat?>();
    }

    recursive? method find_last_pred(p: recursive? pred(_: T) -> Bool): Nat? {
        return ListOps::s_blockingfailure<Nat?>();
    }

    recursive? method find_last_pred_idx(p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        return ListOps::s_blockingfailure<Nat>();
    }

    recursive? method filter_pred(p: recursive? pred(_: T) -> Bool): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }

    recursive? method filter_pred_idx(p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }

    recursive? method map<U>(f: recursive? fn(_: T) -> U): LargeList<U> {
        return ListOps::s_blockingfailure<LargeList<U>>();
    }

    recursive? method map_idx<U>(idx: Nat, f: recursive? fn(_: T, _: Nat) -> U): LargeList<U> {
        return ListOps::s_blockingfailure<LargeList<U>>();
    }

    recursive? method min_arg<U unique Orderable>(idx: Nat, f: recursive? fn(v: T) -> U): Nat, U {
        let ri = ListOps::s_blockingfailure<Nat>();
        let ru = ListOps::s_blockingfailure<U>();

        return ri, ru;
    }

    recursive? method max_arg<U unique Orderable>(idx: Nat, f: recursive? fn(v: T) -> U): Nat, U {
        let ri = ListOps::s_blockingfailure<Nat>();
        let ru = ListOps::s_blockingfailure<U>();

        return ri, ru;
    }

    method {when T unique Algebraic} sum(): T {
        return ListOps::s_blockingfailure<T>();
    }

    recursive? method sort(cmp: recursive? pred(_: T, _: T) -> Bool): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    recursive? method unique_from_sorted(prev: T, eq: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }
    
    method reverse(rl: LargeList<T>): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    method set(i: Nat, v: T): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    method remove(i: Nat): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }

    recursive? method reduce<U>(uu: U, op: recursive? fn(_: U, _: T) -> U): U {
        return ListOps::s_blockingfailure<U>();
    }

    recursive? function reduce_idx<U>(init: U, op: recursive? fn(_: U, _: T, _: Nat) -> U): U {
        return ListOps::s_blockingfailure<U>();
    }

    recursive? function transduce<E, U>(env: E, op: recursive? fn(_: E, _: T) -> (|E, U|)): (|E, LargeList<U>|) {
        let re = ListOps::s_blockingfailure<E>();
        let rlu = ListOps::s_blockingfailure<LargeList<U>>();

        return (|re, rlu|);
    }

    recursive? function s_transduce_idx<E, U>(env: E, op: recursive? fn(_: E, _: T, _: Nat) -> (|E, U|)): (|E, LargeList<U>|) {
        let re = ListOps::s_blockingfailure<E>();
        let rlu = ListOps::s_blockingfailure<LargeList<U>>();

        return (|re, rlu|);
    }
}

internal typedef ListRepr<T> = None | Vector1<T> | Vector2<T> | Vector3<T> | LargeList<T>;

#endif
