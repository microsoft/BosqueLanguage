//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

#if CHECK_LIBS
internal entity ListOps provides Some {
    internal function s_blockingfailure<T>(): T = s_blockingfailure; 

    __safe internal function s_list_empty<T>(l: List<T>): Nat = s_list_empty; 
    __safe internal function s_list_size<T>(l: List<T>): Nat = s_list_size; 

    __safe internal function s_list_append<T>(l: List<T>, r: List<T>): List<T> = s_list_append;

    __safe internal function s_list_slice_front<T>(l: List<T>, idx: Nat): List<T> = s_list_slice_front; 
    __safe internal function s_list_slice_end<T>(l: List<T>, idx: Nat): List<T> = s_list_slice_end; 

    __safe internal function s_list_get<T>(l: List<T>, idx: Nat): T = s_list_get; 
    __safe internal function s_list_get_back<T>(l: List<T>): T = s_list_get_back; 
    __safe internal function s_list_get_front<T>(l: List<T>): T = s_list_get_front; 

    __safe internal function s_list_set<T>(l: List<T>, idx: Nat, v: T): List<T> = s_list_set; 
    __safe internal function s_list_push_back<T>(l: List<T>, v: T): List<T> = s_list_push_back; 
    __safe internal function s_list_push_front<T>(l: List<T>, v: T): List<T> = s_list_push_front; 

    __safe internal function s_list_remove<T>(l: List<T>, idx: Nat): List<T> = s_list_remove; 
    __safe internal function s_list_pop_back<T>(l: List<T>): List<T> = s_list_pop_back; 
    __safe internal function s_list_pop_front<T>(l: List<T>): List<T> = s_list_pop_front; 

    __conditional_safe internal recursive? function s_list_map_pred<T>(l: List<T>, p: recursive? pred(_: T) -> Bool): List<Bool> = s_list_map_pred;
    __conditional_safe internal recursive? function s_list_map_pred_idx<T>(l: List<T>, p: recursive? pred(_: T, _: Nat) -> Bool): List<Bool> = s_list_map_pred_idx;
    __conditional_safe internal recursive? function s_list_map_fn<T, U>(l: List<T>, f: recursive? fn(_: T) -> U): List<U> = s_list_map_fn;
    __conditional_safe internal recursive? function s_list_map_fn_idx<T, U>(l: List<T>, p: recursive? pred(_: T, _: Nat) -> U): List<U> = s_list_map_fn_idx;

    __safe internal function s_list_has<T>(l: List<T>, v: T): Bool = s_list_has; 
    __safe internal function s_list_indexof<T>(l: List<T>, v: T): Int = s_list_indexof; 
    __safe internal function s_list_last_indexof<T>(l: List<T>, v: T): Int = s_list_last_indexof; 

    __safe internal function s_list_has_true(l: List<Bool>): Bool = s_list_has_true; 
    __safe internal function s_list_has_false(l: List<Bool>): Bool = s_list_has_false; 
    __safe internal function s_list_single_true(l: List<Bool>): Bool = s_list_single_true; 
    __safe internal function s_list_single_indexof_true(l: List<Bool>): Int = s_list_single_indexof; 

    __safe internal function s_list_indexof_true(l: List<T>): Int = s_list_indexof_true; 
    __safe internal function s_list_last_indexof_true(l: List<T>): Int = s_list_last_indexof_true; 

    __safe internal function s_list_true_count(l: List<Bool>): Nat = s_list_true_count; 
    __safe internal function s_list_false_count(l: List<Bool>): Nat = s_list_false_count; 

    function s_append<T>(l: ListRepr<T>, r: ListRepr<T>): ListRepr<T> {
        if(/\(l === none, r === none)) {
            return none;
        }
        elif(l === none) {
            return r;
        }
        elif(r === none) {
            return l;
        }
        elif(\/(l.is<LargeList<T>>(), r.is<LargeList<T>>())) {
            return LargeList<T>::s_append(l, r);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            let rr = s_safeAs<ListRepr<T>, ListVector<T>>(r);
            return ListOps::s_append_vector_helper<T>(ll, rr);
        }
    }

    function s_concat(ll: ListRepr<List<T>>): ListRepr<T> {
        if(ll === none) {
            return none;
        }
        elif(ll.is<Vector1<T>>()) {
            return ll.v0.value();
        }
        elif(ll.is<Vector2<T>>()) {
            let lls = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return ListOps::s_append<T>(lls.v0.value(), lls.v1.value());
        }
        elif(ll.is<Vector3<T>>()) {
            let lls = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return ListOps::s_append<T>(ListOps::s_append<T>(lls.v0.value(), lls.v1.value()), lls.v2.value());
        }
        else {
            return ListOps::s_reduce<List<T>, ListRepr<T>>(ll, none, fn(rl: ListRepr<T>, v: List<T>): ListRepr<T> => ListOps::s_append<T>(rl, v.value));
        }
    }

    function s_slice_start<T>(l: ListRepr<T>, start: Nat): ListRepr<T> {
        if(start == 0n) {
            return l;
        }

        if(l === none) {
            return none;
        }
        elif(l.is<LargeList<T>>()) {
            return LargeList<T>::slice_start(l, start);
        }
        else {
            return ListOps::s_slice_start_vector_helper<T>(l, start);
        }
    }

    function s_slice_end<T>(l: ListRepr<T>, end: Nat): ListRepr<T> {
        if(end == 0n) {
            return none;
        }

        if(l === none) {
            return none;
        }
        elif(l.is<LargeList<T>>()) {
            return LargeList<T>::slice_end(l, end);
        }
        else {
            return ListOps::s_slice_end_vector_helper<T>(l, end);
        }
    }

    function s_safe_get<T>(l: ListRepr<T>, i: Nat): T {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::safe_get(l, i);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_safe_get_vector_helper<T>(ll, i);
        }
    }

    function s_safe_back<T>(l: ListRepr<T>): T {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::safe_back(l);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_get_back_vector_helper<T>(ll);
        }
    }

    function s_safe_front<T>(l: ListRepr<T>): T {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::safe_front(l);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_get_front_vector_helper<T>(ll);
        }
    }

    recursive? function s_has_pred_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T) -> Bool): Bool {
        return p[recursive?](l.v0);
    }
    recursive? function s_has_pred_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(p[recursive?](l.v0)) {
            return true;
        }
        elif(p[recursive?](l.v1)) {
            return true;
        }
        else {
            return false;
        }
    }
    recursive? function s_has_pred_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(p[recursive?](l.v0)) {
            return true;
        }
        elif(p[recursive?](l.v1)) {
            return true;
        }
        elif(p[recursive?](l.v2)) {
            return true;
        }
        else {
            return false;
        }
    }
    recursive? function s_has_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_has_pred_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_has_pred_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_has_pred_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::has_pred[recursive?](l, p);
        }
    }

    recursive? function s_has_pred_idx_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        return p[recursive?](l.v0, 0n);
    }
    recursive? function s_has_pred_idx_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        if(p[recursive?](l.v0, 0n)) {
            return true;
        }
        elif(p[recursive?](l.v1, 1n)) {
            return true;
        }
        else {
            return false;
        }
    }
    recursive? function s_has_pred_idx_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        if(p[recursive?](l.v0, 0n)) {
            return true;
        }
        elif(p[recursive?](l.v1, 1n)) {
            return true;
        }
        elif(p[recursive?](l.v2, 2n)) {
            return true;
        }
        else {
            return false;
        }
    }
    recursive? function s_has_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        if(l === none) {
            return false;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_has_pred_idx_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_has_pred_idx_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_has_pred_idx_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::has_pred_idx[recursive?](l, p);
        }
    }

    recursive? function s_find_pred_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v0)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v0)) {
            return 0n;
        }
        elif(p[recursive?](l.v1)) {
            return 1n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v0)) {
            return 0n;
        }
        elif(p[recursive?](l.v1)) {
            return 1n;
        }
        elif(p[recursive?](l.v2)) {
            return 2n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_find_pred_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_find_pred_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_find_pred_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::find_pred[recursive?](l, p);
        }
    }

    recursive? function s_find_pred_idx_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred_idx_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        elif(p[recursive?](l.v1, 1n)) {
            return 1n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred_idx_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        elif(p[recursive?](l.v1, 1n)) {
            return 1n;
        }
        elif(p[recursive?](l.v2, 2n)) {
            return 2n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_find_pred_idx_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_find_pred_idx_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_find_pred_idx_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::find_pred_idx[recursive?](l, p);
        }
    }

    recursive? function s_find_last_pred_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v0)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v1)) {
            return 1n;
        }
        elif(p[recursive?](l.v0)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(p[recursive?](l.v2)) {
            return 2n;
        }
        elif(p[recursive?](l.v1)) {
            return 1n;
        }
        elif(p[recursive?](l.v0)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_find_last_pred_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_find_last_pred_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_find_last_pred_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::find_last_pred[recursive?](l, p);
        }
    }

    recursive? function s_find_last_pred_idx_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred_idx_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v1, 1n)) {
            return 1n;
        }
        elif(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred_idx_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(p[recursive?](l.v2, 2n)) {
            return 2n;
        }
        elif(p[recursive?](l.v1, 1n)) {
            return 1n;
        }
        elif(p[recursive?](l.v0, 0n)) {
            return 0n;
        }
        else {
            return none;
        }
    }
    recursive? function s_find_last_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_find_last_pred_idx_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_find_last_pred_idx_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_find_last_pred_idx_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::find_last_pred_idx[recursive?](l, p);
        }
    }

    recursive? function s_filter_pred_vector_1<T>(l: Vector1<T>, p: recursive? pred(_: T) -> Bool): ListVector<T> | None {
        if(p[recursive?](l.v0)) {
            return l;
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred_vector_2<T>(l: Vector2<T>, p: recursive? pred(_: T) -> Bool): ListVector<T> | None {
        let v0 = l.v0;
        let p0 = p[recursive?](v0);
        let v1 = l.v1;
        let p1 = p[recursive?](v1);

        if(/\(p0, p1)) {
            return l;
        }
        elif(p0) {
            return Vector1<T>{v0};
        }
        elif(p1) {
            return Vector1<T>{v1};
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred_vector_3<T>(l: Vector3<T>, p: recursive? pred(_: T) -> Bool): ListVector<T> | None {
        let v0 = l.v0;
        let p0 = p[recursive?](v0);
        let v1 = l.v1;
        let p1 = p[recursive?](v1);
        let v2 = l.v2;
        let p2 = p[recursive?](v2);

        if(/\(p0, p1, p2)) {
            return l;
        }
        elif(/\(p0, p1)) {
            return Vector2<T>{v0, v1};
        }
        elif(/\(p0, p2)) {
            return Vector2<T>{v0, v2};
        }
        elif(/\(p1, p2)) {
            return Vector2<T>{v1, v2};
        }
        elif(p0) {
            return Vector1<T>{v0};
        }
        elif(p1) {
            return Vector1<T>{v1};
        }
        elif(p2) {
            return Vector1<T>{v2};
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred<T>(l: ListRepr<T>, p: recursive? pred(_: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_filter_pred_vector_1<T>[recursive?](l, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_filter_pred_vector_2<T>[recursive?](l, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_filter_pred_vector_3<T>[recursive?](l, p);
        }
        else {
            return LargeList<T>::filter_pred[recursive?](l, p);
        }
    }

    recursive? function s_filter_pred_idx_vector_1<T>(l: Vector1<T>, idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): ListVector<T> | None {
        if(p[recursive?](l.v0, idx)) {
            return l;
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred_idx_vector_2<T>(l: Vector2<T>, idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): ListVector<T> | None {
        let v0 = l.v0;
        let p0 = p[recursive?](v0, idx);
        let v1 = l.v1;
        let p1 = p[recursive?](v1, idx + 1n);

        if(/\(p0, p1)) {
            return l;
        }
        elif(p0) {
            return Vector1<T>{v0};
        }
        elif(p1) {
            return Vector1<T>{v1};
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred_idx_vector_3<T>(l: Vector3<T>, idx: Nat, p: recursive? pred(_: T, _: Nat) -> Bool): ListVector<T> | None {
        let v0 = l.v0;
        let p0 = p[recursive?](v0, idx);
        let v1 = l.v1;
        let p1 = p[recursive?](v1, idx + 1n);
        let v2 = l.v2;
        let p2 = p[recursive?](v2, idx + 2n);

        if(/\(p0, p1, p2)) {
            return l;
        }
        elif(/\(p0, p1)) {
            return Vector2<T>{v0, v1};
        }
        elif(/\(p0, p2)) {
            return Vector2<T>{v0, v2};
        }
        elif(/\(p1, p2)) {
            return Vector2<T>{v1, v2};
        }
        elif(p0) {
            return Vector1<T>{v0};
        }
        elif(p1) {
            return Vector1<T>{v1};
        }
        elif(p2) {
            return Vector1<T>{v2};
        }
        else {
            return none;
        }
    }
    recursive? function s_filter_pred_idx<T>(l: ListRepr<T>, p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return ListOps::s_filter_pred_idx_vector_1<T>[recursive?](l, 0n, p);
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_filter_pred_idx_vector_2<T>[recursive?](l, 0n, p);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_filter_pred_idx_vector_3<T>[recursive?](l, 0n, p);
        }
        else {
            return LargeList<T>::filter_pred_idx[recursive?](l, p);
        }
    }

    recursive? function s_map<T, U>(l: ListRepr<T>, f: recursive? fn(_: T) -> U): ListRepr<U> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return Vector1<U>{f[recursive?](ll.v0)};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<U>{f[recursive?](ll.v0), f[recursive?](ll.v1)};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<U>{f[recursive?](ll.v0), f[recursive?](ll.v1), f[recursive?](ll.v2)};
        }
        else {
            return LargeList<T>::map<U>[recursive?](l, f);
        }
    }

    recursive? function s_map_idx<T, U>(l: ListRepr<T>, f: recursive? fn(_: T, _: Nat) -> U): ListRepr<U> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return Vector1<U>{f[recursive?](ll.v0, 0n)};
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<U>{f[recursive?](ll.v0, 0n), f[recursive?](ll.v1, 1n)};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<U>{f[recursive?](ll.v0, 0n), f[recursive?](ll.v1, 1n), f[recursive?](ll.v2, 2n)};
        }
        else {
            return LargeList<T>::map_idx<U>[recursive?](l, f);
        }
    }

    recursive? function s_min_arg_vector_2<T, U unique Orderable>(l: Vector2<T>, idx: Nat, f: recursive? fn(v: T) -> U): (|Nat, U|) {
        if(f[recursive?](l.v1) < f[recursive?](l.v0)) {
            return (|idx + 1n, l.v1|);
        }
        else {
            return (|idx, l.v0|);
        }
    }
    recursive? function s_min_arg_vector_3<T, U unique Orderable>(l: Vector3<T>, idx: Nat, f: recursive? fn(v: T) -> U): (|Nat, U|) {
        let lt21 = f[recursive?](l.v2) < f[recursive?](l.v1);
        let lt20 = f[recursive?](l.v2) < f[recursive?](l.v0);
        let lt10 = f[recursive?](l.v1) < f[recursive?](l.v0);
        if(/\(lt21, lt20)) {
            return (|idx + 2n, l.v2|);
        }
        elif(lt10) {
            return (|idx + 1n, l.v1|);
        }
        else {
            return (|idx, l.v0|);
        }
    }
    recursive? function s_min_arg<T, U unique Orderable>(l: ListVector<T> | LargeList<T>, f: recursive? fn(v: T) -> U): Nat {
        if(l.is<Vector1<T>>()) {
            return 0n;
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_min_arg_vector_2<T>[recursive?](l, 0n, f).0;
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_min_arg_vector_3<T>[recursive?](l, 0n, f).0;
        }
        else {
            return LargeList<T>::min_arg[recursive?](l, f);
        }
    }

    recursive? function s_max_arg_vector_2<T, U unique Orderable>(l: Vector2<T>, idx: Nat, f: recursive? fn(v: T) -> U): (|Nat, U|) {
        if(f[recursive?](l.v1) > f[recursive?](l.v0)) {
            return (|idx + 1n, l.v1|);
        }
        else {
            return (|idx, l.v0|);
        }
    }
    recursive? function s_max_arg_vector_3<T, U unique Orderable>(l: Vector3<T>, idx: Nat, f: recursive? fn(v: T) -> U): (|Nat, U|) {
        let gt21 = f[recursive?](l.v2) > f[recursive?](l.v1);
        let gt20 = f[recursive?](l.v2) > f[recursive?](l.v0);
        let gt10 = f[recursive?](l.v1) > f[recursive?](l.v0);
        if(/\(gt21, gt20)) {
            return (|idx + 2n, l.v2|);
        }
        elif(gt10) {
            return (|idx + 1n, l.v1|);
        }
        else {
            return (|idx, l.v0|);;
        }
    }
    recursive? function s_max_arg<T, U unique Orderable>(l: ListVector<T> | LargeList<T>, f: recursive? fn(v: T) -> U): Nat {
        if(l.is<Vector1<T>>()) {
            return 0n;
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_max_arg_vector_2<T>[recursive?](l, 0n, f).0;
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_max_arg_vector_3<T>[recursive?](l, 0n, f).0;
        }
        else {
            return LargeList<T>::max_arg[recursive?](l, f);
        }
    }

    function s_sum<T unique Algebraic>(l: ListRepr<T>): T {
        if(l === none) {
            return T::zero;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return ll.v0;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return ll.v0 + ll.v1;
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return ll.v0 + ll.v1 + ll.v2;
        }
        else {
            return LargeList<T>::sum(l);
        }
    }

    recursive? function s_sort_vector_2<T>(l: Vector2<T>, cmp: recursive? pred(_: T, _: T) -> Bool): Vector2<T> {
        if(!cmp[recursive?](l.v1, l.v0)) {
            return l;
        }
        else {
            return List<T>{ll.v1, ll.v0};
        }
    }
    recursive? function s_sort_vector_3<T>(l: Vector3<T>, cmp: recursive? pred(_: T, _: T) -> Bool): Vector3<T> {
        let l10 = cmp[recursive?](l.v1, l.v0);
        let l20 = cmp[recursive?](l.v2, l.v0);
        let l21 = cmp[recursive?](l.v2, l.v1);

        if(/\(l20, l21)) {
            if(l10) {
                return Vector3<T>{ll.v2, ll.v1, ll.v0};
            }
            else {
                return Vector3<T>{ll.v2, ll.v0, ll.v1};
            }
        }
        elif(/\(l10, !l21)) {
            if(l20) {
                return Vector3<T>{ll.v1, ll.v2, ll.v0};
            }
            else {
                return Vector3<T>{ll.v1, ll.v0, ll.v2};
            }
        }
        else {
            if(l21) {
                return Vector3<T>{ll.v0, ll.v2, ll.v1};
            }
            else {
                return Vector3<T>{ll.v0, ll.v1, ll.v2};
            }
        }
    }

    recursive? function s_sort<T>(l: ListRepr<T>, cmp: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_sort_vector_2<T>[recursive?](l, cmp);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_sort_vector_3<T>[recursive?](l, cmp);
        }
        else {
            return LargeList<T>::sort[recursive?](l, cmp);
        }
    }

    recursive? function s_unique_from_sorted_2<T>(l: Vector2<T>, eq: recursive? pred(_: T, _: T) -> Bool): Vector1<T> | Vector2<T> {
        if(eq[recursive?](l.v0, l.v1)) {
            return Vector1<T>{l.v0};
        }
        else {
            return l;
        }
    }
    recursive? function s_unique_from_sorted_3<T>(l: Vector3<T>, eq: recursive? pred(_: T, _: T) -> Bool): Vector1<T> | Vector2<T> | Vector3<T> {
        let eq01 = eq[recursive?](l.v0, l.v1);
        let eq02 = eq[recursive?](l.v0, l.v2);
        let eq12 = eq[recursive?](l.v1, l.v2);
            

        if(/\(eq01, eq02)) {
            return Vector1<T>{ll.v0};
        }
        elif(eq01) {
            return Vector2<T>{ll.v0, ll.v2};
        }
        elif(eq02) {
            return Vector2<T>{ll.v0, ll.v1};
        }
        elif(eq12) {
            return Vector2<T>{ll.v0, ll.v1};
        }
        else {
            return l;
        }
    }
    recursive? function s_unique_from_sorted<T>(l: ListRepr<T>, eq: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            return ListOps::s_unique_from_sorted_2<T>[recursive?](l, eq);
        }
        elif(l.is<Vector3<T>>()) {
            return ListOps::s_unique_from_sorted_3<T>[recursive?](l, eq);
        }
        else {
            return LargeList<T>::unique_from_sorted[recursive?](l, eq);
        }
    }
    
    function s_reverse(l: ListRepr<T>): ListRepr<T> {
        if(l === none) {
            return none;
        }
        elif(l.is<Vector1<T>>()) {
            return l;
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return Vector2<T>{ll.v1, ll.v0};
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return Vector3<T>{ll.v2, ll.v1, ll.v0};
        }
        else {
            return LargeList<T>::reverse[recursive](l);
        }
    }

    function s_set<T>(l: ListRepr<T>, i: Nat, v: T): ListRepr<T> {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::set(l, i, v);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_safe_set_vector_helper<T>(ll, i, v);
        }
    }

    function s_push_back<T>(l: ListRepr<T>, v: T): ListRepr<T> {
        if(l === none) {
            return Vector1<T>{v};
        }
        elif(l.is<LargeList<T>>()) {
            return LargeList<T>::push_back(l, v);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_push_back_helper<T>(ll, v);
        }
    }

    function s_push_front<T>(l: ListRepr<T>, v: T): ListRepr<T> {
        if(l === none) {
            return Vector1<T>{v};
        }
        elif(l.is<LargeList<T>>()) {
            return LargeList<T>::push_front(l, v);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_push_front_helper<T>(ll, v);
        }
    }

    function s_remove<T>(l: ListRepr<T>, i: Nat): ListRepr<T> {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::remove(l, i);
        }
        else {
            let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
            return ListOps::s_safe_remove_vector_helper<T>(ll, i);
        }
    }

    function s_safe_pop_back<T>(l: ListRepr<T>): ListRepr<T> {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::pop_back(l);
        }
        else {
            if(l.is<Vector1<T>>()) {
                return none;
            }
            else {
                let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
                return ListOps::s_pop_back_vector<T>(ll).1;
            }
        }
    }

    function s_safe_pop_front<T>(l: ListRepr<T>): ListRepr<T> {
        if(l.is<LargeList<T>>()) {
            return LargeList<T>::pop_front(l);
        }
        else {
            if(l.is<Vector1<T>>()) {
                return none;
            }
            else {
                let ll = s_safeAs<ListRepr<T>, ListVector<T>>(l);
                return ListOps::s_pop_front_vector<T>(ll).1;
            }
        }
    }

    recursive? function s_reduce<T, U>(l: ListRepr<T>, init: U, op: recursive? fn(_: U, _: T) -> U): U {
        if(l === none) {
            return init;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return op[recursive?](init, ll.v0);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return op[recursive?](op[recursive?](init, ll.v0), ll.v1);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return op[recursive?](op[recursive?](op[recursive?](init, ll.v0), ll.v1), ll.v2);
        }
        else {
            return LargeList<T>::reduce<U>[recursive?](l, init, op);
        }
    }

    recursive? function s_reduce_idx<T, U>(l: ListRepr<T>, init: U, op: recursive? fn(_: U, _: T, _: Nat) -> U): U {
        if(l === none) {
            return init;
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            return op[recursive?](init, ll.v0, 0n);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            return op[recursive?](op[recursive?](init, ll.v0, 0n), ll.v1, 1n);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            return op[recursive?](op[recursive?](op[recursive?](init, ll.v0, 0n), ll.v1, 1n), ll.v2, 2n);
        }
        else {
            return LargeList<T>::reduce_idx<U>[recursive?](l, init, op);
        }
    }

    recursive? function s_transduce<T, E, U>(l: ListRepr<T>, env: E, op: recursive? fn(_: T, _: T) -> (|E, U|)): (|E, ListRepr<U>|) {
        if(l === none) {
            return (|env, none|);
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            return (|e0, Vector1<U>{v0}|);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            let e1, v1 = op[recursive?](e0, ll.v1);
            return (|e1, Vector2<U>{v0, v1}|);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0);
            let e1, v1 = op[recursive?](e0, ll.v1);
            let e2, v2 = op[recursive?](e1, ll.v2);
            return (|e2, Vector3<U>{v0, v1, v2}|);
        }
        else {
            return LargeList<T>::transduce<E, U>[recursive?](l, env, op);
        }
    }

    recursive? function s_transduce_idx<T, E, U>(l: ListRepr<T>, env: E, op: recursive? fn(_: E, _: T, _: Nat) -> (|E, U|)): (|E, ListRepr<U>|) {
        if(l === none) {
            return (|env, none|);
        }
        elif(l.is<Vector1<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector1<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            return (|e0, Vector1<U>{v0}|);
        }
        elif(l.is<Vector2<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector2<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            let e1, v1 = op[recursive?](e0, ll.v1, 1n);
            return (|e1, Vector2<U>{v0, v1}|);
        }
        elif(l.is<Vector3<T>>()) {
            let ll = s_safeAs<ListRepr<T>, Vector3<T>>(l);
            let e0, v0 = op[recursive?](env, ll.v0, 0n);
            let e1, v1 = op[recursive?](e0, ll.v1, 1n);
            let e2, v2 = op[recursive?](e1, ll.v2, 2n);
            return (|e2, Vector3<U>{v0, v1, v2}|);
        }
        else {
            return LargeList<T>::transduce_idx<E, U>[recursive?](l, env, op);
        }
    }
}

__internal entity LargeList<T> provides Some {
   
    
    

    function s_vector_to_large_list(vl: ListVector<T>): LargeList<T> {
        if(vl.is<Vector1<T>>()) {
            return LargeList<T>::s_vector1_to_large_list(vl);
        }
        elif(vl.is<Vector2<T>>()) {
            return LargeList<T>::s_vector2_to_large_list(vl);
        }
        else {
            return LargeList<T>::s_vector3_to_large_list(vl);
        }
    }

    function s_large_list_to_vector(l: LargeList<T>, count: Nat): ListVector<T> {
        if(count === 1) {
            return LargeList<T>::s_large_list_to_vector1(l);
        }
        elif(count === 2) {
            return LargeList<T>::s_large_list_to_vector2(l);
        }
        else {
            return LargeList<T>::s_large_list_to_vector3(l);
        }
    }

    function count(l: LargeList<T>): Nat {
        return LargeList<T>::s_large_list_count(l);
    }

    function {when T unique Int | Nat} range(start: T, one: T, count: Nat): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    function fill(count: Nat, v: T): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    function zip_index(l: LargeList<T>): LargeList<[Nat, T]> {
        return ListOps::s_blockingfailure<LargeList<[Nat, T]>>();
    }

    function zip<U>(l: LargeList<T>, ol: LargeList<U>): LargeList<[T, U]> {
        return ListOps::s_blockingfailure<LargeList<[T, U]>>();
    }

    function s_append(l: ListRepr<T>, r: ListRepr<T>): LargeList<T> {
        if(/\(l.is<LargeList<T>>(), r.is<LargeList<T>>())) {
            let ll = s_safeAs<ListRepr<T>, LargeList<T>>(l);
            let rr = s_safeAs<ListRepr<T>, LargeList<T>>(r);
            return LargeList<T>::s_large_list_append(ll, rr);
        }
        elif(l.is<LargeList<T>>()) {
            let ll = s_safeAs<ListRepr<T>, LargeList<T>>(l);
            let rr = LargeList<T>::s_vector_to_large_list(s_safeAs<ListRepr<T>, ListVector<T>>(r));
            return LargeList<T>::s_large_list_append(ll, rr);
        }
        elif(r.is<LargeList<T>>()) {
            let ll = LargeList<T>::s_vector_to_large_list(s_safeAs<ListRepr<T>, ListVector<T>>(l));
            let rr = s_safeAs<ListRepr<T>, LargeList<T>>(r);
            return LargeList<T>::s_large_list_append(ll, rr);
        }
        else {
            let ll = LargeList<T>::s_vector_to_large_list(s_safeAs<ListRepr<T>, ListVector<T>>(l));
            let rr = LargeList<T>::s_vector_to_large_list(s_safeAs<ListRepr<T>, ListVector<T>>(r));
            return LargeList<T>::s_large_list_append(ll, rr);
        }
    }

    function slice_start(l: LargeList<T>, idx: Nat): ListRepr<T> {
        if(idx === LargeList<T>::s_large_list_count(l)) {
            return none;
        }
        else {
            let ll = LargeList<T>::s_large_list_slice_front(l, idx);
            let llc = LargeList<T>::s_large_list_count(ll);
            if(llc > 3n) {
                return ll;
            }
            else {
                return LargeList<T>::s_large_list_to_vector(ll, llc);
            }
        }
    }

    function slice_end(l: LargeList<T>, idx: Nat): ListRepr<T> {
        if(idx === 0n) {
            return none;
        }
        else {
            let ll = LargeList<T>::s_large_list_slice_end(l, idx);
            let llc = LargeList<T>::s_large_list_count(ll);
            if(llc > 3n) {
                return ll;
            }
            else {
                return LargeList<T>::s_large_list_to_vector(ll, llc);
            }
        }
    }

    function safe_get(l: LargeList<T>, i: Nat): T {
        return LargeList<T>::s_large_list_get(l, i);
    }

    function safe_back(l: LargeList<T>): T {
        return LargeList<T>::s_large_list_get_back(l);
    }

    function safe_front(l: LargeList<T>): T {
        return LargeList<T>::s_large_list_get_front(l);
    }

    recursive? function has_pred(l: LargeList<T>, p: recursive? pred(_: T) -> Bool): Bool {
        let mask = LargeList<T>::s_large_list_map_pred[recursive?](l, p);
        return LargeList<Bool>::s_large_list_has(mask, true);
    }

    recursive? function has_pred_idx(l: LargeList<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Bool {
        let mask = LargeList<T>::s_large_list_map_pred_idx[recursive?](l, p);
        return LargeList<Bool>::s_large_list_has(mask, true);
    }

    recursive? function find_pred(l: LargeList<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        let mask = LargeList<T>::s_large_list_map_pred[recursive?](l, p);
        let idx = LargeList<Bool>::s_large_list_indexof(mask, true);
        if(idx == -1i) {
            return none;
        }
        else {
            return NumericOps::s_intToNat(idx);
        }
    }

    recursive? function find_pred_idx(l: LargeList<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let mask = LargeList<T>::s_large_list_map_pred_idx[recursive?](l, p);
        let idx = LargeList<Bool>::s_large_list_indexof(mask, true);
        if(idx == -1i) {
            return none;
        }
        else {
            return NumericOps::s_intToNat(idx);
        }
    }

    recursive? function find_last_pred(l: LargeList<T>, p: recursive? pred(_: T) -> Bool): Nat? {
        let mask = LargeList<T>::s_large_list_map_pred[recursive?](l, p);
        let idx = LargeList<Bool>::s_large_list_last_indexof(mask, true);
        if(idx == -1i) {
            return none;
        }
        else {
            return NumericOps::s_intToNat(idx);
        }
    }

    recursive? function find_last_pred_idx(l: LargeList<T>, p: recursive? pred(_: T, _: Nat) -> Bool): Nat? {
        let mask = LargeList<T>::s_large_list_map_pred_idx[recursive?](l, p);
        let idx = LargeList<Bool>::s_large_list_last_indexof(mask, true);
        if(idx == -1i) {
            return none;
        }
        else {
            return NumericOps::s_intToNat(idx);
        }
    }

    recursive? function filter_pred(l: LargeList<T>, p: recursive? pred(_: T) -> Bool): ListRepr<T> {
        let mask = LargeList<T>::s_large_list_map_pred[recursive?](l, p);

        if(!LargeList<Bool>::s_large_list_has(mask, true)) {
            return none;
        }
        elif(!LargeList<Bool>::s_large_list_has(mask, false)) {
            return l;
        }
        else {
            let idxl = LargeList<Bool>::s_large_list_indexof(mask, true);
            let idxh = LargeList<Bool>::s_large_list_last_indexof(mask, true);

            if(idxl == idxh) {
                return Vector1<T>{LargeList<T>::s_large_list_get(l, idxl)};
            }
            else {
                return ListOps::s_blockingfailure<ListRepr<T>>();
            }
        }
    }

    recursive? function filter_pred_idx(l: LargeList<T>, p: recursive? pred(_: T, _: Nat) -> Bool): ListRepr<T> {
        let mask = LargeList<T>::s_large_list_map_pred_idx[recursive?](l, p);

        if(!LargeList<Bool>::s_large_list_has(mask, true)) {
            return none;
        }
        elif(!LargeList<Bool>::s_large_list_has(mask, false)) {
            return l;
        }
        else {
            let idxl = LargeList<Bool>::s_large_list_indexof(mask, true);
            let idxh = LargeList<Bool>::s_large_list_last_indexof(mask, true);

            if(idxl == idxh) {
                return Vector1<T>{LargeList<T>::s_large_list_get(l, idxl)};
            }
            else {
                return ListOps::s_blockingfailure<ListRepr<T>>();
            }
        }
    }

    recursive? function map<U>(l: LargeList<T>, f: recursive? fn(_: T) -> U): LargeList<U> {
        return LargeList<T>::s_large_list_map_fn<U>[recursive?](l, f);
    }

    recursive? function map_idx<U>(l: LargeList<T>, f: recursive? fn(_: T, _: Nat) -> U): LargeList<U> {
        return LargeList<T>::s_large_list_map_fn_idx<U>[recursive?](l, f);
    }

    recursive? function min_arg<U unique Orderable>(l: LargeList<T>, f: recursive? fn(v: T) -> U): Nat, U {

        //Use map + uninterpreted function to assert OR use foldl?????

        let ri = ListOps::s_blockingfailure<Nat>();
        let ru = ListOps::s_blockingfailure<U>();

        return ri, ru;
    }

    recursive? function max_arg<U unique Orderable>(l: LargeList<T>, f: recursive? fn(v: T) -> U): Nat, U {
        let ri = ListOps::s_blockingfailure<Nat>();
        let ru = ListOps::s_blockingfailure<U>();

        return ri, ru;
    }

    function {when T unique Algebraic} sum(l: LargeList<T>): T {
        return ListOps::s_blockingfailure<T>();
    }

    recursive? function sort(l: LargeList<T>, cmp: recursive? pred(_: T, _: T) -> Bool): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    recursive? function unique_from_sorted(l: LargeList<T>, eq: recursive? pred(_: T, _: T) -> Bool): ListRepr<T> {
        return ListOps::s_blockingfailure<ListRepr<T>>();
    }
    
    function reverse(l: LargeList<T>): LargeList<T> {
        return ListOps::s_blockingfailure<LargeList<T>>();
    }

    function set(l: LargeList<T>, i: Nat, v: T): LargeList<T> {
        return LargeList<T>::s_large_list_set(l, i, v);
    }

    function push_back(l: LargeList<T>, v: T): LargeList<T> {
        return LargeList<T>::s_large_list_push_back(l, v);
    }

    function push_front(l: LargeList<T>, v: T): LargeList<T> {
        return LargeList<T>::s_large_list_push_front(l, v);
    }

    function remove(l: LargeList<T>, i: Nat): ListRepr<T> {
        let ll = LargeList<T>::s_large_list_remove(l, i);
        let llc = LargeList<T>::s_large_list_count(ll);
        if(llc > 3n) {
            return ll;
        }
        else {
            return LargeList<T>::s_large_list_to_vector(ll, llc);
        }
    }

    function pop_front(l: LargeList<T>): ListRepr<T> {
        let ll = LargeList<T>::s_large_list_pop_front(l);
        let llc = LargeList<T>::s_large_list_count(ll);
        if(llc > 3n) {
            return ll;
        }
        else {
            return LargeList<T>::s_large_list_to_vector(ll, llc);
        }
    }

    function pop_back(l: LargeList<T>): ListRepr<T> {
        let ll = LargeList<T>::s_large_list_pop_back(l);
        let llc = LargeList<T>::s_large_list_count(ll);
        if(llc > 3n) {
            return ll;
        }
        else {
            return LargeList<T>::s_large_list_to_vector(ll, llc);
        }
    }

    recursive? function reduce<U>(l: LargeList<T>, init: U, op: recursive? fn(_: U, _: T) -> U): U {
        return ListOps::s_blockingfailure<U>();
    }

    recursive? function reduce_idx<U>(l: LargeList<T>, init: U, op: recursive? fn(_: U, _: T, _: Nat) -> U): U {
        return ListOps::s_blockingfailure<U>();
    }

    recursive? function transduce<E, U>(l: LargeList<T>, env: E, op: recursive? fn(_: E, _: T) -> (|E, U|)): (|E, LargeList<U>|) {
        let re = ListOps::s_blockingfailure<E>();
        let rlu = ListOps::s_blockingfailure<LargeList<U>>();

        return (|re, rlu|);
    }

    recursive? function s_transduce_idx<E, U>(l: LargeList<T>, env: E, op: recursive? fn(_: E, _: T, _: Nat) -> (|E, U|)): (|E, LargeList<U>|) {
        let re = ListOps::s_blockingfailure<E>();
        let rlu = ListOps::s_blockingfailure<LargeList<U>>();

        return (|re, rlu|);
    }
}

#endif
