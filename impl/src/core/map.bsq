//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the bosque core language
namespace Core;

__internal entity Map<K grounded KeyType, V> provides Some, Expandoable<[K, V]>, APIType when K grounded APIType && V grounded APIType, TestableType when K grounded TestableType && V grounded TestableType {
    method empty(): Bool {
        return MapOps::s_map_empty<K, V>(this);
    }

    method size(): Nat {
        return MapOps::s_map_count<K, V>(this);
    }

    method has(key: K): Bool {
        return MapOps::s_map_has<K, V>(this, key);
    }

    method get(key: K): V 
        requires MapOps::s_map_has<K, V>(this, key);
    {
        return MapOps::s_map_get<K, V>(this, key);
    }

    method getOrNone(key: K): V? {
#if CHECK_LIBS
        if(!MapOps::s_map_has<K, V>(this, key)) {
            return none;
        }
        else {
            return MapOps::s_map_get<K, V>(this, key);
        }
#else
        let ev = MapOps::s_map_find<K, V>(this, key);
        if(!ev.1) {
            return none;
        }
        else {
            return ev.0;
        }
#endif
    }

    method getOption(key: K): Option<V> {
#if CHECK_LIBS
        if(!MapOps::s_map_has<K, V>(this, key)) {
            return nothing;
        }
        else {
            return something(MapOps::s_map_get<K, V>(this, key));
        }
#else
        let ev = MapOps::s_map_find<K, V>(this, key);
        if(!ev.1) {
            return nothing;
        }
        else {
            return something(ev.0);
        }
#endif
    }

    method getTry(key: K, out? v: V): Bool {
#if CHECK_LIBS
        if(!MapOps::s_map_has<K, V>(this, key)) {
            return false;
        }
        else {
            v = MapOps::s_map_get<K, V>(this, key);
            return true;
        }
#else
        let ev = MapOps::s_map_find<K, V>(this, key);
        if(!ev.1) {
            return false;
        }
        else {
            v = ev.0;
            return true;
        }
#endif
    }

    method entries(): List<[K, V]> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return List<K, V>{};
        }
        else {
            MapOps::s_map_entries<K, V>(this);
        }
    }

    method keys(): List<K> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return List<K>{};
        }
        else {
            let ee = MapOps::s_map_entries<K, V>(this);
            return ListOps::s_list_map_fn<[K, V], K>(ee, fn(kv: [K, V]): K => kv.0);
        }
    }

    method values(): List<V> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return List<V>{};
        }
        else {
            let ee = MapOps::s_map_entries<K, V>(this);
            return ListOps::s_list_map_fn<[K, V], V>(ee, fn(kv: [K, V]): V => kv.1);
        }
    }

    method union(m: Map<K, V>): Map<K, V> {
        if(/\(MapOps::s_map_empty<K, V>(this), MapOps::s_map_empty<K, V>(m))) {
            return Map<K, V>{};
        }
        elif(MapOps::s_map_empty<K, V>(this)) {
            return m;
        }
        elif(MapOps::s_map_empty<K, V>(m)) {
            return this;
        }
        else {
            let minkey1 = MapOps::s_map_min_key<K, V>(this);
            let maxkey1 = MapOps::s_map_max_key<K, V>(this);

            let minkey2 = MapOps::s_map_min_key<K, V>(m);
            let maxkey2 = MapOps::s_map_max_key<K, V>(m);

            if(MapOps::s_map_count<K, V>(this) == 1) {
                assert(!MapOps::s_map_has<K, V>(m, minkey1));
                return MapOps::s_map_add<K, V>(m, minkey1);
            }
            elif(MapOps::s_map_count<K, V>(m) == 1) {
                assert(!MapOps::s_map_has<K, V>(this, minkey2));
                return MapOps::s_map_add<K, V>(this, minkey2);
            }
            else {
                if(KeyType::less<K>(maxkey1, minkey2)) {
                    return MapOps::s_map_union_fast<K, V>(this, m);
                }
                elif(KeyType::less<K>(maxkey2, minkey1)) {
                    return MapOps::s_map_union_fast<K, V>(m, this);
                }
                else {
                    let m2l = MapOps::s_map_entries<K, V>(m2);
                    return ListOps::s_list_reduce<[K, V], Map<K, V>>(m2l, m1, fn(acc: Map<K, V>, v: [K, V]): Map<K, V> => {
                        assert(!MapOps::s_map_has<K, V>(acc, v));
                        MapOps::s_map_add<K, V>(acc, v);
                    });
                }
            }
        }
    }

    recursive? method submap(p: recursive? pred(k: K, v: V) -> Bool): Map<K, V> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return Map<K, V>{};
        }
        else {
            return MapOps::s_map_submap<K, V>[recursive?](this, p);
        }
    }

    recursive? method remap<U=?>(f: recursive? fn(k: K, v: V) -> U): Map<K, U> {
        if(MapOps::s_map_empty<K, V>(this)) {
            return Map<K, U>{};
        }
        else {
            return MapOps::s_map_remap<K, V, U>[recursive?](this, f);
        }
    }

    method add(k: K, v: V): Map<K, V>
        requires MapOps::s_map_empty<K, V>(this) || !MapOps::s_map_has<K, V>(this, k);
    {
        if(MapOps::s_map_empty<K, V>(this)) {
            return Map<K, U>{[k, v]};
        }
        else {
            return MapOps::s_map_add<K, V>(this, k, v);
        }
    }

    method set(k: K, v: V): Map<K, V> 
        requires !MapOps::s_map_empty<K, V>(this) && MapOps::s_map_has<K, V>(this, k);
    {
        return MapOps::s_map_set<K, V>(this, k, v);
    }

    method remove(k: K): Map<K, V> 
        requires !MapOps::s_map_empty<K, V>(this) && MapOps::s_map_has<K, V>(this, k);
    {
        return MapOps::s_map_remove<K, V>(this, k);
    }

    //
    //TODO: ref versions of the add/remove/set operators
    //

    internal function s_initializer_add(m: Map<K, V>, vtup: [K, V]): Map<K, V> {
        assert(!MapOps::s_map_has<K, V>(m, vtup.0));

        return MapOps::s_map_add<K, V>(m, vtup.0, vtup.1);
    }
}
